{"version":3,"file":"PluginManager.js","sources":["../../node_modules/@typhonjs-plugin/eventbus/src/EventbusSecure.js","../../node_modules/@typhonjs-plugin/eventbus/src/utils.js","../../node_modules/@typhonjs-plugin/eventbus/src/EventbusProxy.js","../../node_modules/@typhonjs-plugin/eventbus/src/Eventbus.js","../../node_modules/@typhonjs-plugin/eventbus/src/index.js","../../node_modules/@typhonjs-utils/loader-module/dist/node/ModuleLoader.js","../../src/PluginEntry.js","../../node_modules/@typhonjs-utils/object/src/objectUtil.js","../../src/invoke/PluginInvokeEvent.js","../../src/invoke/invokeAsyncEvent.js","../../src/utils/escapeTarget.js","../../src/utils/isValidConfig.js","../../src/utils/resolveModule.js","../../src/support/invoke/PluginInvokeSupport.js","../../src/invoke/invokeSyncEvent.js","../../src/PluginManager.js"],"sourcesContent":["/**\n * EventbusSecure provides a secure wrapper around another Eventbus instance.\n *\n * The main use case of EventbusSecure is to provide a secure eventbus window for general public consumption. Only\n * events can be triggered, but not registered / unregistered.\n *\n * You must use the initialize method passing in an existing Eventbus instance as the eventbus reference is private.\n * In order to secure the eventbus from unwanted access there is no way to access the eventbus reference externally from\n * the EventbusSecure instance. The initialize method returns an {@link EventbusSecureObj} object which contains two\n * functions to control the secure eventbus externally; `destroy` and `setEventbus`. Expose to end consumers just the\n * `eventbusSecure` instance.\n */\nexport default class EventbusSecure\n{\n   /**\n    * Stores the target eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus;\n\n   /**\n    * Stores a potentially alternate name instead of returning the wrapped Eventbus instance name.\n    *\n    * @type {string}\n    * @private\n    */\n   #name\n\n   /**\n    * Creates the EventbusSecure instance with an existing instance of Eventbus. An object / EventbusSecureObj is\n    * returned with an EventbusSecure reference and two functions for controlling the underlying Eventbus reference.\n    *\n    * `destroy()` will destroy the underlying Eventbus reference.\n    * `setEventbus(<eventbus>)` will set the underlying reference.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    *\n    * @param {string}     [name] - If a name is provided this will be used instead of eventbus name.\n    *\n    * @returns {EventbusSecureObj} The control object which contains an EventbusSecure reference and control functions.\n    */\n   static initialize(eventbus, name = void 0)\n   {\n      if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string`); }\n\n      const eventbusSecure = new EventbusSecure();\n      eventbusSecure.#eventbus = eventbus;\n      eventbusSecure.#name = name === void 0 ? eventbus.name : name;\n\n      return {\n         destroy: function()\n         {\n            if (!eventbusSecure.isDestroyed)\n            {\n               eventbusSecure.#eventbus = null;\n\n               if (this) { this.eventbusSecure = void 0 }\n            }\n         },\n\n         setEventbus: function(eventbus, name = void 0)\n         {\n            if (name !== void 0 && typeof name !== 'string') { throw new TypeError(`'name' is not a string`); }\n\n            if (!eventbusSecure.isDestroyed)\n            {\n               // Adopt the new eventbus name as the current name set matches the wrapped eventbus.\n               if (name === void 0 && eventbusSecure.#name === eventbusSecure.#eventbus.name)\n               {\n                  eventbusSecure.#name = eventbus.name;\n               }\n               else if (name !== void 0)\n               {\n                  eventbusSecure.#name = name;\n               }\n\n               eventbusSecure.#eventbus = eventbus;\n            }\n         },\n\n         eventbusSecure\n      };\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of secured eventbus event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.keys(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns whether this instance has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this.#eventbus === null;\n   }\n\n   /**\n    * Returns the name associated with this instance.\n    *\n    * @returns {string|*} The target eventbus name.\n    */\n   get name()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#name;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {EventbusSecure} This instance.\n    */\n   trigger(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      this.#eventbus.trigger(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {Promise<void|*|*[]>} A Promise to returning any results.\n    */\n   triggerAsync(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#eventbus.triggerAsync(...arguments);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {EventbusSecure} This EventbusProxy.\n    */\n   triggerDefer(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      this.#eventbus.triggerDefer(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {void|*|*[]} An Array of returned results.\n    */\n   triggerSync(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusSecure instance has been destroyed.'); }\n\n      return this.#eventbus.triggerSync(...arguments);\n   }\n}\n","/**\n * Regular expression used to split event strings.\n *\n * @type {RegExp}\n */\nexport const eventSplitter = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function}       iteratee - Event operation to invoke.\n *\n * @param {object}         events - Events object\n *\n * @param {string|object}  name - A single event name, compound event names, or a hash of event names.\n *\n * @param {Function}       callback - Event callback function\n *\n * @param {object}         opts - Optional parameters\n *\n * @returns {object|Events} Events object or processed data.\n */\nexport function eventsAPI(iteratee, events, name, callback, opts)\n{\n   let i = 0, names;\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = objectKeys(name); i < names.length; i++)\n      {\n         events = eventsAPI(iteratee, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++)\n      {\n         events = iteratee(events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n   }\n   return events;\n}\n\n/**\n * Returns a string to output for error messages including any eventbus name.\n *\n * @param {Eventbus|EventbusProxy|EventbusSecure} eventbus - The eventbus to format.\n *\n * @returns {string} A string representing the eventbus.\n */\nexport function getErrorName(eventbus)\n{\n   const name = eventbus.name;\n   return name !== '' ? `[${name}] ` : '';\n}\n\n/**\n * Provides  protected Object.keys functionality.\n *\n * @param {object}   object - Object to retrieve keys.\n *\n * @returns {string[]} Keys of object if any.\n */\nexport const objectKeys = (object) =>\n{\n   return object === null || typeof object !== 'object' ? [] : Object.keys(object);\n};\n\n/**\n * Reduces the event callbacks into a map of `{event: beforeWrapper}`. `after` unbinds the `beforeWrapper` after\n * it has been called the number of times specified by options.count.\n *\n * @param {Events}   map - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Function to invoke after event has been triggered once; `off()`\n *\n * @returns {Events} The Events object.\n */\nexport function beforeMap(map, name, callback, opts)\n{\n   const after = opts.after;\n   const count = opts.count + 1;\n\n   if (callback)\n   {\n      const beforeWrapper = map[name] = s_BEFORE(count, function()\n      {\n         return callback.apply(this, arguments);\n      }, () => { after(name, beforeWrapper); });\n\n      beforeWrapper._callback = callback;\n   }\n   return map;\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Creates a function that invokes `before`, with the `this` binding and arguments of the created function, while\n * it's called less than `count` times. Subsequent calls to the created function return the result of the last `before`\n * invocation.\n *\n * `after` is invoked after the count is reduced.\n *\n * @param {number}   count - The number of calls at which `before` is no longer invoked and then `after` is invoked.\n *\n * @param {Function} before - The function to restrict.\n *\n * @param {Function} after - The function to invoke after count number of calls.\n *\n * @returns {Function} Returns the new restricted function.\n */\nconst s_BEFORE = function(count, before, after)\n{\n   let result;\n\n   return function(...args)\n   {\n      if (--count > 0) { result = before.apply(this, args); }\n\n      if (count <= 1)\n      {\n         if (after) { after.apply(this, args); }\n         after = void 0;\n         before = void 0;\n      }\n\n      return result;\n   };\n};\n","import EventbusSecure from './EventbusSecure.js';\n\nimport * as Utils     from './utils.js';\n\n/**\n * EventbusProxy provides a protected proxy of another Eventbus instance.\n *\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\n *\n * EventbusProxy provides the on / off, before, once, and trigger methods with the same signatures as found in\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\n *\n * Finally the EventbusProxy only allows events registered through it to be turned off providing a buffer between\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\n */\nexport default class EventbusProxy\n{\n   /**\n    * Stores the target eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus;\n\n   /**\n    * Stores all proxied event bindings.\n    *\n    * @type {Events}\n    * @private\n    */\n   #events;\n\n   /**\n    * Creates the event proxy with an existing instance of Eventbus.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    */\n   constructor(eventbus)\n   {\n      this.#eventbus = eventbus;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {EventbusProxy} This EventbusProxy instance.\n    */\n   before(count, name, callback, context = void 0, guarded = false)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, guarded);\n   }\n\n   /**\n    * Creates an EventbusSecure instance wrapping the proxied Eventbus reference. An EventbusSecure instance provides a\n    * secure window to public consumers with only trigger dispatch available.\n    *\n    * @param {string}   [name] - Optional name for the EventbusSecure instance.\n    *\n    * @returns {EventbusSecureObj} An EventbusSecure control object for this eventbus.\n    */\n   createSecure(name = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return EventbusSecure.initialize(this.#eventbus, name);\n   }\n\n   /**\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\n    * after `destroy` has been called result in a ReferenceError thrown.\n    */\n   destroy()\n   {\n      if (this.#eventbus !== null)\n      {\n         this.off();\n      }\n\n      this.#events = void 0;\n\n      this.#eventbus = null;\n   }\n\n   /**\n    * Returns an iterable for all events from the proxied eventbus yielding an array with event name, callback function,\n    * and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.entries(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns the current proxied eventbus event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get eventCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.eventCount;\n   }\n\n   /**\n    * Returns the current proxied eventbus callback count.\n    *\n    * @returns {number} Returns the current proxied callback count.\n    */\n   get callbackCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.callbackCount;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of proxied eventbus event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this.#eventbus.keys(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns whether this EventbusProxy has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this.#eventbus === null;\n   }\n\n   /**\n    * Returns the target eventbus name.\n    *\n    * @returns {string|*} The target eventbus name.\n    */\n   get name()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return `proxy-${this.#eventbus.name}`;\n   }\n\n   /**\n    * Returns the current proxied event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get proxyEventCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this.#events) { return 0; }\n\n      return Object.keys(this.#events).length;\n   }\n\n   /**\n    * Returns the current proxied callback count.\n    *\n    * @returns {number} Returns the current proxied callback count.\n    */\n   get proxyCallbackCount()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this.#events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this.#events) { count += this.#events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns whether an event name is guarded.\n    *\n    * @param {string|object}  name - Event name(s) or event map to verify.\n    *\n    * @param {object}         [data] - Stores the output of which names are guarded.\n    *\n    * @returns {boolean} Whether the given event name is guarded.\n    */\n   isGuarded(name, data = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.isGuarded(name, data);\n   }\n\n   /**\n    * Remove a previously-bound proxied event binding.\n    *\n    * Please see {@link Eventbus#off}.\n    *\n    * @param {string|object}  [name] - Event name(s) or event map.\n    *\n    * @param {Function}       [callback] - Event callback function\n    *\n    * @param {object}         [context] - Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   off(name = void 0, callback = void 0, context = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#events = Utils.eventsAPI(s_OFF_API, this.#events || {}, name, callback, {\n         context: context,\n         eventbus: this.#eventbus\n      });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * Please see {@link Eventbus#on}.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   on(name, callback, context = void 0, guarded = false)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Hang onto the options as s_ON_API sets the context we need to pass to the eventbus in `opts.ctx`.\n      const opts = { context, ctx: this, guarded };\n\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback, opts);\n\n      this.#eventbus.on(name, callback, opts.ctx, guarded);\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            context - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {EventbusProxy} This EventbusProxy instance.\n    */\n   once(name, callback, context = void 0, guarded = false)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      const data = {};\n      if (this.#eventbus.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count: 1, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, guarded);\n   }\n\n   /**\n    * Returns an iterable for all stored locally proxied events yielding an array with event name, callback\n    * function, and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyEntries(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this.#events[name])\n               {\n                  yield [name, event.callback, event.context, event.guarded];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            for (const event of this.#events[name])\n            {\n               yield [name, event.callback, event.context, event.guarded];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of the locally proxied event names.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyKeys(regex = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   trigger(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#eventbus.trigger(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {Promise<void|*|*[]>} A Promise returning any results.\n    */\n   triggerAsync(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.triggerAsync(...arguments);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   triggerDefer(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this.#eventbus.triggerDefer(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {void|*|*[]} An Array of returned results.\n    */\n   triggerSync(name) // eslint-disable-line  no-unused-vars\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this.#eventbus.triggerSync(...arguments);\n   }\n}\n\n/**\n * The reducing API that removes a callback from the `events` object. And delegates invoking off to the eventbus\n * reference.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, opts) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = opts.context;\n   const eventbus = opts.eventbus;\n\n   const names = name ? [name] : Utils.objectKeys(events);\n\n   for (let i = 0; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         eventbus.off(name, callback, context);\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, opts) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = opts.context, ctx = opts.ctx;\n      const guarded = typeof opts.guarded === 'boolean' ? opts.guarded /* c8 ignore next */ : false;\n\n      // Set opts `ctx` as this is what we send to the eventbus.\n      opts.ctx = context || ctx;\n\n      handlers.push({ callback, context, ctx: opts.ctx, guarded });\n   }\n\n   return events;\n};\n","import EventbusProxy    from './EventbusProxy.js';\nimport EventbusSecure   from './EventbusSecure.js';\n\nimport * as Utils       from './utils.js';\n\n/**\n * `@typhonjs-plugin/eventbus` / Provides the ability to bind and trigger custom named events.\n *\n * This module is an evolution of Backbone Events. (http://backbonejs.org/#Events). Eventbus extends the\n * functionality provided in Backbone Events with additional triggering methods to receive asynchronous and\n * synchronous results.\n *\n * ---------------\n */\nexport default class Eventbus\n{\n   /**\n    * Stores the name of this eventbus.\n    *\n    * @type {string}\n    * @private\n    */\n   #name = '';\n\n   /**\n    * Stores the events map for associated events and callback / context data.\n    *\n    * @type {Events}\n    * @private\n    */\n   #events;\n\n   /**\n    * Provides a constructor which optionally takes the eventbus name.\n    *\n    * @param {string}   name - Optional eventbus name.\n    */\n   constructor(name = '')\n   {\n      if (typeof name !== 'string') { throw new TypeError(`'name' is not a string`); }\n\n      this.#name = name;\n\n      /**\n       * Stores the Listening instances for this context.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeners = void 0;\n\n      /**\n       * A unique ID set when listened to.\n       *\n       * @type {string}\n       * @private\n       */\n      this._listenId = void 0;\n\n      /**\n       * Stores the Listening instances for other contexts.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeningTo = void 0;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   before(count, name, callback, context = void 0, guarded = false)\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- before() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, guarded);\n   }\n\n   /**\n    * Creates an EventbusProxy wrapping this Eventbus instance. An EventbusProxy proxies events allowing all listeners\n    * added to be easily removed from the wrapped Eventbus.\n    *\n    * @returns {EventbusProxy} A new EventbusProxy for this eventbus.\n    */\n   createProxy()\n   {\n      return new EventbusProxy(this);\n   }\n\n   /**\n    * Creates an EventbusSecure instance wrapping this Eventbus. An EventbusSecure instance provides a secure window to\n    * public consumers with only trigger dispatch available.\n    *\n    * @param {string}   [name] - Optional name for the EventbusSecure instance.\n    *\n    * @returns {EventbusSecureObj} An EventbusSecure control object for this eventbus.\n    */\n   createSecure(name = void 0)\n   {\n      return EventbusSecure.initialize(this, name);\n   }\n\n   /**\n    * Returns an iterable for all stored events yielding an array with event name, callback function, and event context.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this.#events[name])\n               {\n                  yield [name, event.callback, event.context, event.guarded];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            for (const event of this.#events[name])\n            {\n               yield [name, event.callback, event.context, event.guarded];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current event count.\n    *\n    * @returns {number} Returns the current event count.\n    */\n   get eventCount()\n   {\n      if (!this.#events) { return 0; }\n\n      return Object.keys(this.#events).length;\n   }\n\n   /**\n    * Returns the current callback count.\n    *\n    * @returns {number} The current callback count.\n    */\n   get callbackCount()\n   {\n      if (!this.#events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this.#events) { count += this.#events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns whether an event name is guarded.\n    *\n    * @param {string|object}  name - Event name(s) or event map to verify.\n    *\n    * @param {object}         [data] - Stores the output of which names are guarded.\n    *\n    * @returns {boolean} Whether the given event name is guarded.\n    */\n   isGuarded(name, data = {})\n   {\n      data.names = [];\n      data.guarded = false;\n\n      const result = Utils.eventsAPI(s_IS_GUARDED, data, name, void 0, { events: this.#events });\n\n      return result.guarded;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of registered event listeners.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#events) { return; }\n\n      if (regex)\n      {\n         for (const name in this.#events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this.#events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Returns the current eventbus name.\n    *\n    * @returns {string|*} The current eventbus name.\n    */\n   get name()\n   {\n      return this.#name;\n   }\n\n   /**\n    * Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\n    * be removed all at once later on. The callback will always be called with object as context.\n    *\n    * @example\n    * view.listenTo(model, 'change', view.render);\n    *\n    * @param {object}            obj - Event context\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenTo(obj, name, callback)\n   {\n      if (!obj) { return this; }\n\n      const data = {};\n      if (s_TRY_CATCH_IS_GUARDED(obj, name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- listenTo() failed as event name(s) are guarded for target object: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      const id = obj._listenId || (obj._listenId = s_UNIQUE_ID('l'));\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\n      let listening = _listening = listeningTo[id];\n\n      // This object is not listening to any other events on `obj` yet.\n      // Setup the necessary references to track the listening callbacks.\n      if (!listening)\n      {\n         this._listenId || (this._listenId = s_UNIQUE_ID('l'));\n         listening = _listening = listeningTo[id] = new Listening(this, obj);\n      }\n\n      // Bind callbacks on obj.\n      const error = s_TRY_CATCH_ON(obj, name, callback, this);\n      _listening = void 0;\n\n      if (error) { throw error; }\n\n      // If the target obj is not an Eventbus, track events manually.\n      if (listening.interop) { listening.on(name, callback); }\n\n      return this;\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire count times before being removed.\n    *\n    * @param {number}            count - Number of times the function will fire before being removed.\n    *\n    * @param {object}            obj - Target event context.\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToBefore(count, obj, name, callback)\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\n    *\n    * @param {object}            obj - Target event context\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToOnce(obj, name, callback)\n   {\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count: 1,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Remove a previously-bound callback function from an object. If no context is specified, all of the versions of\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\n    * will be removed. If no event is specified, callbacks for all events will be removed.\n    *\n    * Note that calling model.off(), for example, will indeed remove all events on the model — including events that\n    * Backbone uses for internal bookkeeping.\n    *\n    * @example\n    * // Removes just the `onChange` callback.\n    * object.off(\"change\", onChange);\n    *\n    * // Removes all \"change\" callbacks.\n    * object.off(\"change\");\n    *\n    * // Removes the `onChange` callback for all events.\n    * object.off(null, onChange);\n    *\n    * // Removes all callbacks for `context` for all events.\n    * object.off(null, null, context);\n    *\n    * // Removes all callbacks on `object`.\n    * object.off();\n    *\n    * @param {string|object}  [name] - Event name(s) or event map.\n    *\n    * @param {Function}       [callback] - Event callback function\n    *\n    * @param {object}         [context] - Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   off(name, callback = void 0, context = void 0)\n   {\n      if (!this.#events) { return this; }\n\n      this.#events = Utils.eventsAPI(s_OFF_API, this.#events, name, callback, { context, listeners: this._listeners });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\n    * model.on('change', this.render, this) or model.on({change: this.render}, this).\n    *\n    * @example\n    * The event string may also be a space-delimited list of several events...\n    * book.on(\"change:title change:author\", ...);\n    *\n    * @example\n    * Callbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of\n    * the event as the first argument. For example, to proxy all events from one object to another:\n    * proxy.on(\"all\", function(eventName) {\n    *    object.trigger(eventName);\n    * });\n    *\n    * @example\n    * All Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n    * book.on({\n    *    \"change:author\": authorPane.update,\n    *    \"change:title change:subtitle\": titleView.update,\n    *    \"destroy\": bookView.remove\n    * });\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   on(name, callback, context = void 0, guarded = false)\n   {\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- on() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback, {\n         context,\n         ctx: this,\n         guarded,\n         listening: _listening\n      });\n\n      if (_listening)\n      {\n         const listeners = this._listeners || (this._listeners = {});\n         listeners[_listening.id] = _listening;\n\n         // Allow the listening to use a counter, instead of tracking callbacks for library interop.\n         _listening.interop = false;\n      }\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @param {boolean}           [guarded=false] - When set to true this registration is guarded.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   once(name, callback, context = void 0, guarded = false)\n   {\n      const data = {};\n      if (this.isGuarded(name, data))\n      {\n         console.warn(`@typhonjs-plugin/eventbus ${Utils.getErrorName(this)}`\n          + `- once() failed as event name(s) are guarded: ${JSON.stringify(data.names)}`);\n         return this;\n      }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, { count: 1, after: this.off.bind(this) });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context, guarded);\n   }\n\n   /**\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\n    * on a specific object, or a specific event, or just a specific callback.\n    *\n    * @example\n    * view.stopListening();\n    *\n    * view.stopListening(model);\n    *\n    * @param {object}   obj - Event context\n    *\n    * @param {string}   [name] - Event name(s)\n    *\n    * @param {Function} [callback] - Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   stopListening(obj, name = void 0, callback = void 0)\n   {\n      const listeningTo = this._listeningTo;\n      if (!listeningTo) { return this; }\n\n      const ids = obj ? [obj._listenId] : Utils.objectKeys(listeningTo);\n\n      for (let i = 0; i < ids.length; i++)\n      {\n         const listening = listeningTo[ids[i]];\n\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\n         if (!listening) { break; }\n\n         listening.obj.off(name, callback, this);\n\n         if (listening.interop) { listening.off(name, callback); }\n      }\n\n      return this;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   trigger(name)\n   {\n      if (!this.#events) { return this; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_EVENTS, this.#events, name, void 0, args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {Promise<void|*|*[]>} A Promise with any results.\n    */\n   async triggerAsync(name)\n   {\n      if (!this.#events) { return void 0; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      const result = s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_ASYNC_EVENTS, this.#events, name, void 0, args);\n\n      // No event callbacks were triggered.\n      if (result === void 0) { return void 0; }\n\n      // A single Promise has been returned; just return it.\n      if (!Array.isArray(result)) { return result; }\n\n      // Multiple events & callbacks have been triggered so reduce the returned array of Promises and filter all\n      // values from each Promise result removing any undefined values.\n      return Promise.all(result).then((results) =>\n      {\n         let allResults = [];\n\n         for (const pResult of results)\n         {\n            if (Array.isArray(pResult))\n            {\n               allResults = allResults.concat(pResult);\n            }\n            else if (pResult !== void 0)\n            {\n               allResults.push(pResult);\n            }\n         }\n\n         return allResults.length > 1 ? allResults : allResults.length === 1 ? allResults[0] : void 0;\n      });\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   triggerDefer(name)   // eslint-disable-line  no-unused-vars\n   {\n      setTimeout(() => { this.trigger(...arguments); }, 0);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name - Event name(s)\n    *\n    * @returns {void|*|*[]} The results of the event invocation.\n    */\n   triggerSync(name)\n   {\n      if (!this.#events) { return void 0; }\n\n      const start = 1;\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + start]; }\n\n      return s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_SYNC_EVENTS, this.#events, name, void 0, args);\n   }\n}\n\n// Private / internal methods ---------------------------------------------------------------------------------------\n\n/**\n * Global listening object\n *\n * @type {Listening}\n */\nlet _listening;\n\n/**\n * A listening class that tracks and cleans up memory bindings when all callbacks have been offed.\n */\nclass Listening\n{\n   /**\n    * @type {Events}\n    */\n   #events;\n\n   /**\n    * @type {string}\n    */\n   #id;\n\n   /**\n    * @type {object}\n    */\n   #listener;\n\n   /**\n    * @type {object}\n    */\n   #obj;\n\n   /**\n    * @type {boolean}\n    */\n   #interop;\n\n   /**\n    * Current listening count.\n    *\n    * @type {number}\n    */\n   #count = 0;\n\n   constructor(listener, obj)\n   {\n      this.#id = listener._listenId;\n      this.#listener = listener;\n      this.#obj = obj;\n      this.#interop = true;\n   }\n\n   // Cleans up memory bindings between the listener and the listenee.\n   cleanup()\n   {\n      delete this.#listener._listeningTo[this.#obj._listenId];\n      if (!this.#interop) { delete this.#obj._listeners[this.#id]; }\n   }\n\n   get id() { return this.#id; }\n\n   get interop() { return this.#interop; }\n\n   get obj() { return this.#obj; }\n\n   incrementCount() { this.#count++; }\n\n   /**\n    * @see {@link Eventbus#on}\n    *\n    * @param {string|object}     name - Event name(s) or event map.\n    *\n    * @param {Function|object}   callback - Event callback function or context for event map.\n    *\n    * @param {object}            [context] - Event context\n    *\n    * @returns {Listening} This Listening instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      this.#events = Utils.eventsAPI(s_ON_API, this.#events || {}, name, callback,\n      {\n         context,\n         ctx: this,\n         listening: this\n      });\n\n      return this;\n   }\n\n   /**\n    * Offs a callback (or several). Uses an optimized counter if the listenee uses Eventbus. Otherwise, falls back to\n    * manual tracking to support events library interop.\n    *\n    * @param {string|object}     [name] - Event name(s) or event map.\n    *\n    * @param {Function|object}   [callback] - Event callback function or context for event map.\n    */\n   off(name, callback)\n   {\n      let cleanup;\n\n      if (this.#interop)\n      {\n         this.#events = Utils.eventsAPI(s_OFF_API, this.#events, name, callback, {\n            context: void 0,\n            listeners: void 0\n         });\n         cleanup = !this.#events;\n      }\n      else\n      {\n         this.#count--;\n         cleanup = this.#count === 0;\n      }\n\n      if (cleanup) { this.cleanup(); }\n   }\n\n   /**\n    * Sets interop.\n    *\n    * @param {boolean} value Value to set.\n    */\n   set interop(value)\n   {\n      /* c8 ignore next 1 */\n      if (typeof value !== 'boolean') { throw new TypeError(`'value' is not a boolean`); }\n      this.#interop = value\n   }\n}\n\n/**\n * The reducing API that tests if an event name is guarded. Any event data of a give event name can have the guarded\n * state set. If so the event name will be added to the output names array and `output.guarded` set to true.\n *\n * @param {object}   output - The output object.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {object} The output object.\n */\nconst s_IS_GUARDED = (output, name, callback, opts) =>\n{\n   const events = opts.events;\n\n   if (events)\n   {\n      const handlers = events[name];\n\n      if (Array.isArray(handlers))\n      {\n         for (const handler of handlers)\n         {\n            if (handler.guarded)\n            {\n                output.names.push(name);\n                output.guarded = true;\n                return output;\n            }\n         }\n      }\n   }\n\n   return output;\n}\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, opts) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = opts.context, listeners = opts.listeners;\n   let i = 0, names;\n\n   // Delete all event listeners and \"drop\" events.\n   if (!name && !context && !callback)\n   {\n      for (names = Utils.objectKeys(listeners); i < names.length; i++)\n      {\n         listeners[names[i]].cleanup();\n      }\n      return;\n   }\n\n   names = name ? [name] : Utils.objectKeys(events);\n\n   for (; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n         else\n         {\n            const listening = handler.listening;\n            if (listening) { listening.off(name, callback); }\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events - Events object\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - Event callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, opts) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = opts.context, ctx = opts.ctx, listening = opts.listening;\n      const guarded = typeof opts.guarded === 'boolean' ? opts.guarded : false;\n\n      if (listening) { listening.incrementCount(); }\n\n      handlers.push({ callback, context, ctx: context || ctx, guarded, listening });\n   }\n   return events;\n};\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee - Trigger API\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n *\n * @param {Events}   events - Array of stored event callback data.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - callback\n *\n * @param {object}   opts - Optional parameters\n *\n * @returns {*} The results of the callback if any.\n */\nconst s_RESULTS_TARGET_API = (iteratee, iterateeTarget, events, name, callback, opts) =>\n{\n   let results = void 0;\n   let i = 0, names;\n\n   // Handle the case of multiple events being triggered. The potential results of each event & callbacks must be\n   // processed into a single array of results.\n   if (name && Utils.eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(Utils.eventSplitter); i < names.length; i++)\n      {\n         const result = iteratee(iterateeTarget, events, names[i], callback, opts);\n\n         // Determine type of `results`; 0: undefined, 1: single value, 2: an array of values.\n         const resultsType = Array.isArray(results) ? 2 : results !== void 0 ? 1 : 0;\n\n         // Handle an array result depending on existing results value.\n         if (Array.isArray(result))\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1:\n                  // Create a new array from existing results then concat the new result array.\n                  results = [results].concat(result);\n                  break;\n               case 2:\n                  // `results` is already an array so concat the new result array.\n                  results = results.concat(result);\n                  break;\n            }\n         }\n         else if (result !== void 0)\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1: {\n                  // Create a new array from existing results then push the new result value.\n                  const newArray = [results];\n                  newArray.push(result);\n                  results = newArray;\n                  break;\n               }\n               case 2:\n                  // `results` is already an array so push the new result array.\n                  results.push(result);\n                  break;\n            }\n         }\n      }\n   }\n   else\n   {\n      // Just single event.\n      results = iteratee(iterateeTarget, events, name, callback, opts);\n   }\n\n   return results;\n};\n\n/**\n * Handles triggering the appropriate event callbacks.\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n *\n * @param {Events}   objEvents - Array of stored event callback data.\n *\n * @param {string}   name - Event name\n *\n * @param {Function} callback - callback\n *\n * @param {*[]}      args - Arguments supplied to a trigger method.\n *\n * @returns {*} The results from the triggered event.\n */\nconst s_TRIGGER_API = (iterateeTarget, objEvents, name, callback, args) =>\n{\n   let result;\n\n   if (objEvents)\n   {\n      const events = objEvents[name];\n      let allEvents = objEvents.all;\n      if (events && allEvents) { allEvents = allEvents.slice(); }\n      if (events) { result = iterateeTarget(events, args); }\n      if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\n   }\n\n   return result;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments).\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Event argument array\n */\nconst s_TRIGGER_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\n         return;\n      case 1:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\n         return;\n      case 2:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\n         return;\n      case 3:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\n         return;\n      default:\n         while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\n         return;\n   }\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method uses ES6 Promises and adds\n * any returned results to an array which is added to a Promise.all construction which passes back a Promise which\n * waits until all Promises complete. Any target invoked may return a Promise or any result. This is very useful to\n * use for any asynchronous operations.\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Arguments supplied to `triggerAsync`.\n *\n * @returns {Promise<void|*|*[]>} A Promise of the results from the triggered event.\n */\nconst s_TRIGGER_ASYNC_EVENTS = async (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result add it to the promises array.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // If there are multiple results then use Promise.all otherwise Promise.resolve. Filter out any undefined results.\n   return results.length > 1 ? Promise.all(results).then((values) =>\n   {\n      const filtered = values.filter((entry) => entry !== void 0);\n      switch (filtered.length)\n      {\n         case 0: return void 0;\n         case 1: return filtered[0];\n         default: return filtered;\n      }\n   }) : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method synchronously passes back a\n * single value or an array with all results returned by any invoked targets.\n *\n * @param {EventData[]} events - Array of stored event callback data.\n *\n * @param {*[]}         args - Arguments supplied to `triggerSync`.\n *\n * @returns {void|*|*[]} The results from the triggered event.\n */\nconst s_TRIGGER_SYNC_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // Return the results array if there are more than one or just a single result.\n   return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * A try-catch guarded function. Used when attempting to invoke `isGuarded` from an other eventbus / context via\n * `listenTo`.\n *\n * @param {object}         obj - Event target / context\n *\n * @param {string|object}  name - Event name(s) or event map.\n *\n * @param {object}         data - Output data.\n *\n * @returns {boolean} Any error if thrown.\n */\nconst s_TRY_CATCH_IS_GUARDED = (obj, name, data = {}) =>\n{\n   let guarded = false;\n\n   try\n   {\n      const result = obj.isGuarded(name, data);\n      if (typeof result === 'boolean') { guarded = result; }\n   }\n   catch (err)\n   {\n      guarded = false;\n      data.names = [];\n      data.guarded = false;\n   }\n\n   return guarded;\n};\n\n/**\n * A try-catch guarded #on function, to prevent poisoning the global `_listening` variable. Used when attempting to\n * invoke `on` from an other eventbus / context via `listenTo`.\n *\n * @param {object}            obj - Event target / context\n *\n * @param {string|object}     name - Event name(s) or event map.\n *\n * @param {Function|object}   callback - Event callback function or context for event map.\n *\n * @param {object}            [context] - Event context\n *\n * @returns {Error} Any error if thrown.\n */\nconst s_TRY_CATCH_ON = (obj, name, callback, context) =>\n{\n   try\n   {\n      obj.on(name, callback, context);\n   }\n   catch (err)\n   {\n      return err;\n   }\n};\n\n/**\n * Generate a unique integer ID (unique within the entire client session).\n *\n * @type {number} - unique ID counter.\n */\nlet idCounter = 0;\n\n/**\n * Creates a new unique ID with a given prefix\n *\n * @param {string}   prefix - An optional prefix to add to unique ID.\n *\n * @returns {string} A new unique ID with a given prefix.\n */\nconst s_UNIQUE_ID = (prefix = '') =>\n{\n   const id = `${++idCounter}`;\n   return prefix ? `${prefix}${id}` /* c8 ignore next */ : id;\n};\n","import Eventbus                        from './Eventbus.js';\n\nexport { default as EventbusProxy }    from './EventbusProxy.js';\nexport { default as EventbusSecure }   from './EventbusSecure.js';\n\nexport default Eventbus;\n\n/**\n * Provides a main eventbus instance.\n *\n * @type {Eventbus}\n */\nexport const eventbus = new Eventbus('mainEventbus');\n\n/**\n * Provides an eventbus instance potentially for use with a plugin system.\n *\n * @type {Eventbus}\n */\nexport const pluginEventbus = new Eventbus('pluginEventbus');\n\n/**\n * Provides an eventbus instance potentially for use for testing.\n *\n * @type {Eventbus}\n */\nexport const testEventbus = new Eventbus('testEventbus');\n","import t from\"module\";import e from\"path\";import r from\"url\";import a from\"fs\";class o{constructor(){this.baseDirectory=void 0,this.cntr=0,this.currentDirectory=void 0,this.packageObj=void 0,this.packagePath=void 0,this.rootPath=void 0,this._callback=void 0}isBaseParent(){if(this.baseDirectory===this.rootPath)return!1;const t=e.relative(this.baseDirectory,this.currentDirectory);return t&&!t.startsWith(\"..\")&&!e.isAbsolute(t)}static parse(t,{filepath:o,basepath:i,callback:c}={}){if(\"string\"!=typeof o&&!(o instanceof URL))throw new TypeError(\"'filepath' is not a 'string' or file 'URL'\");if(void 0!==i&&\"string\"!=typeof i&&!(i instanceof URL))throw new TypeError(\"'basepath' is not a 'string' or file 'URL'\");if(void 0!==c&&\"function\"!=typeof c)throw new TypeError(\"'callback' is not a 'function'\");if(i instanceof URL&&(i=r.fileURLToPath(i)),(o instanceof URL||o.startsWith(\"file:/\"))&&(o=r.fileURLToPath(o)),t.currentDirectory=a.existsSync(o)&&a.lstatSync(o).isDirectory()?e.resolve(o):e.resolve(e.dirname(o)),\"string\"!=typeof i&&(i=e.parse(t.currentDirectory).root),i.startsWith(\"file:/\")&&(i=r.fileURLToPath(i)),t.baseDirectory=a.existsSync(i)&&a.lstatSync(i).isDirectory()?e.resolve(i):e.resolve(e.dirname(i)),!a.existsSync(t.baseDirectory)||!a.existsSync(t.currentDirectory))throw new Error(\"Could not resolve 'filepath' or 'basepath'\");return t.rootPath=e.parse(t.currentDirectory).root,t._callback=c,t}}const i=t=>\"string\"==typeof t.packageObj.type,c=t.createRequire(import.meta.url);function s(t,r){switch(e.extname(t).toLowerCase()){case\".js\":return\"module\"===function(t){try{const r=o.parse(new o,t);r.isBaseParent()&&void 0===r._callback&&(r._callback=i);const c=function(t){const r=t instanceof o,i=r?t:new o;try{r||o.parse(i,t);const c={};do{if(i.packagePath=e.resolve(i.currentDirectory,\"package.json\"),a.existsSync(i.packagePath)&&(i.packageObj=JSON.parse(a.readFileSync(i.packagePath,\"utf-8\")),\"object\"==typeof i.packageObj)){if(\"function\"!=typeof i._callback)return{packageObj:i.packageObj,packagePath:i.packagePath};if(i._callback.call(c,i))return{packageObj:i.packageObj,packagePath:i.packagePath};i.cntr++}if(i.currentDirectory===i.baseDirectory)break}while((i.currentDirectory=e.dirname(i.currentDirectory))!==i.rootPath)}catch(t){return{packagePath:i.packagePath,error:t}}return{error:new Error(\"No 'package.json' located\")}}(r);return\"object\"==typeof c.packageObj&&\"module\"===c.packageObj.type?\"module\":\"commonjs\"}catch(t){return\"commonjs\"}}({filepath:t,basepath:r});case\".mjs\":return!0;default:return!1}}export default class{static async load({modulepath:t,resolveModule:a,basepath:o}={}){if(!(t instanceof URL)&&\"string\"!=typeof t)throw new TypeError(\"'modulepath' is not a string or URL\");if(void 0!==a&&\"function\"!=typeof a)throw new TypeError(\"'resolveModule' is not a function\");if(void 0!==o&&\"string\"!=typeof o)throw new TypeError(\"'basepath' is not a string\");const{filepath:i,isESM:n,type:p,loadpath:l}=function(t,a){let o,i,n=\"module\",p=t;try{o=c.resolve(t),i=s(o,a)}catch(c){t instanceof URL||t.startsWith(\"file:\")?(o=r.fileURLToPath(t),n=\"url\",p=t instanceof URL?t.toString():t):(o=e.resolve(t),n=\"path\",p=o),i=s(o,a)}return n=`${i?\"import\":\"require\"}-${n}`,{filepath:o,isESM:i,type:n,loadpath:p}}(t,o),h=n?await import(r.pathToFileURL(i)):c(i);return{filepath:i,instance:void 0!==a?a(h):h,loadpath:l,isESM:n,module:h,modulepath:t,type:p}}}\n//# sourceMappingURL=ModuleLoader.js.map\n","/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nexport default class PluginEntry\n{\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {PluginData}  data - Describes the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {EventbusProxy}  eventbusProxy - The EventbusProxy associated with the plugin wrapping the plugin manager\n    *                                         eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      /**\n       * Data describing the plugin, manager, and optional module data.\n       *\n       * @type {PluginData}\n       * @private\n       */\n      this._data = data;\n\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = true;\n\n      /**\n       * The plugin name.\n       *\n       * @type {string}\n       * @private\n       */\n      this._name = name;\n\n      /**\n       * The loaded plugin instance.\n       *\n       * @type {object}\n       * @private\n       */\n      this._instance = instance;\n\n      /**\n       * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n       *\n       * @type {EventbusProxy}\n       * @private\n       */\n      this._eventbusProxy = eventbusProxy;\n\n      /**\n       * Stores the proxied event names, callback functions, and context when this plugin is disabled.\n       *\n       * @type {Array<Array<string, Function, object>>}\n       * @private\n       */\n      this._events = void 0;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {PluginData} The associated PluginData.\n    */\n   get data() { return this._data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this._enabled; }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = enabled;\n\n      // If enabled and there are stored events then turn them on with the eventbus proxy.\n      if (enabled)\n      {\n         if (this._eventbusProxy !== void 0 && Array.isArray(this._events))\n         {\n            for (const event of this._events)\n            {\n               this._eventbusProxy.on(...event);\n            }\n\n            this._events = void 0;\n         }\n      }\n      else // Store any proxied events and unregister the proxied events.\n      {\n         if (this._eventbusProxy !== void 0)\n         {\n            this._events = Array.from(this._eventbusProxy.proxyEntries());\n            this._eventbusProxy.off();\n         }\n      }\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this._eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this._instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this._name; }\n\n\n   /**\n    * Set associated EventbusProxy.\n    *\n    * @param {EventbusProxy} eventbusProxy - EventbusProxy instance to associate.\n    */\n   set eventbusProxy(eventbusProxy) { this._eventbusProxy = eventbusProxy; }\n}\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n *\n * Support for typhonjs-plugin-manager is enabled.\n */\n\nconst s_TAG_MAP = '[object Map]';\nconst s_TAG_SET = '[object Set]';\nconst s_TAG_STRING = '[object String]';\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Is it an object.\n */\nexport function isObject(object)\n{\n   return object !== null && typeof object === 'object';\n}\n\n/**\n * Safely returns keys on an object or an empty array if not an object.\n *\n * @param {object} object - An object.\n *\n * @returns {string[]} Object keys\n */\nexport function objectKeys(object)\n{\n   return object !== null && typeof object === 'object' ? Object.keys(object) : [];\n}\n\n/**\n * Safely returns an objects size. Note for String objects unicode is not taken into consideration.\n *\n * @param {object} object - An object.\n *\n * @returns {number} Size of object.\n */\nexport function objectSize(object)\n{\n   if (object === void 0 || object === null || typeof object !== 'object') { return 0; }\n\n   const tag = Object.prototype.toString.call(object);\n\n   if (tag === s_TAG_MAP || tag === s_TAG_SET) { return object.size; }\n\n   if (tag === s_TAG_STRING) { return object.length; }\n\n   return Object.keys(object).length;\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.includes(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && !expected.includes(dataEntry)))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link PluginInvokeSupport#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nexport default class PluginInvokeEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\n       * may add to or modify this data.\n       *\n       * @type {PluginEventData}\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = void 0;\n   }\n}\n","import { isIterable }      from '@typhonjs-utils/object';\n\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {string}                     method - Method name to invoke.\n *\n * @param {object}                     copyProps - Properties that are copied.\n *\n * @param {object}                     passthruProps - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    plugins - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {PluginManager}              pluginManager - A plugin manager instance.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {Promise<PluginEventData>} The PluginEvent data.\n */\nexport default async function invokeAsyncEvent(method, copyProps = {}, passthruProps = {}, plugins, pluginManager,\n options, performErrorCheck = true)\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof plugins === 'string')\n   {\n      const entry = pluginManager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[method](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[method](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n}\n","const s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\n\n/**\n * Creates an escaped path which is suitable for use in RegExp construction.\n *\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\n * is used after the module has been loaded / is a good target.\n *\n * @param {string|URL}  target - Target full / relative path or URL to escape.\n *\n * @returns {string} The escaped target.\n */\nexport default function escapeTarget(target)\n{\n   let targetEscaped = target;\n\n   if (target instanceof URL)\n   {\n      targetEscaped = target.pathname;\n   }\n   else if (target.match(s_REGEX_STRING_URL))\n   {\n      targetEscaped = new URL(target).pathname;\n   }\n\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\n\n   return targetEscaped;\n}\n","/**\n * Performs validation of a PluginConfig.\n *\n * @param {PluginConfig}   pluginConfig A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nexport default function isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n","/**\n * Resolves a dynamically imported module for PluginManager. This function is passed to `@typhonjs-utils/loader-module`.\n *\n * @param {object}   module - The imported module.\n *\n * @returns {*} The export most likely to match a valid plugin.\n */\nexport default function(module)\n{\n   // If the module has a named export for `onPluginLoad` then take the module.\n   if (typeof module.onPluginLoad === 'function')\n   {\n      return module;\n   }\n   // Then potentially resolve any default export / static class.\n   else if (module.default)\n   {\n      return module.default;\n   }\n   // Finally resolve as just the module.\n   else\n   {\n      return module;\n   }\n}\n","import { isIterable, isObject } from \"@typhonjs-utils/object\";\n\nimport invokeAsyncEvent from '../../invoke/invokeAsyncEvent.js';\nimport invokeSyncEvent  from '../../invoke/invokeSyncEvent.js';\n\n/**\n * `plugins:async:invoke` - {@link PluginInvokeSupport#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link PluginInvokeSupport#invokeAsyncEvent}\n *\n * `plugins:get:method:names` - {@link PluginInvokeSupport#getMethodNames}\n *\n * `plugins:has:method` - {@link PluginInvokeSupport#hasMethod}\n *\n * `plugins:invoke` - {@link PluginInvokeSupport#invoke}\n *\n * `plugins:sync:invoke` - {@link PluginInvokeSupport#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link PluginInvokeSupport#invokeSyncEvent}\n *\n * @implements {PluginSupportImpl}\n */\nexport default class PluginInvokeSupport\n{\n   /**\n    * @type {PluginManager}\n    */\n   #pluginManager = null;\n\n   /**\n    * Create PluginInvokeSupport\n    *\n    * @param {PluginManager} pluginManager - The plugin manager to associate.\n    */\n   constructor(pluginManager)\n   {\n      this.#pluginManager = pluginManager;\n   }\n\n   get isDestroyed()\n   {\n      return this.#pluginManager === null || this.#pluginManager.isDestroyed;\n   }\n\n   get options()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager.getOptions();\n   }\n\n   get pluginManager()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     opts.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend } = {})\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\n         eventbus.off(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:invoke`, this.invoke, this);\n         eventbus.off(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\n         eventbus.off(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      this.#pluginManager = null;\n   }\n\n   /**\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\n    * along with sorting methods by plugin name.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {boolean}                 [opts.enabled] - If enabled is a boolean it will return plugin methods names\n    *                                                   given the respective enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\n   {\n      if (this.isDestroyed)\n      { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Create an array from a single plugin name.\n      if (typeof plugins === 'string')\n      {\n         plugins = [plugins];\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = {};\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.instance && (anyEnabledState || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor')\n               { results[name] = true; }\n            }\n         }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\n            {\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n               {\n                  // Skip any names that are not a function or are the constructor.\n                  if (entry.instance[name] instanceof Function && name !== 'constructor')\n                  { results[name] = true; }\n               }\n            }\n         }\n      }\n\n      return Object.keys(results).sort();\n   }\n\n   /**\n    * Checks if the provided method name exists across all plugins or specific plugins if defined.\n    *\n    * @param {object}                  opts - Options object.\n    *\n    * @param {string}                  opts.method - Method name to test.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check for method. If\n    *                                                   undefined all plugins must contain the method.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod({ method, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string')\n      {\n         throw new TypeError(`'method' is not a string.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.pluginManager.getPluginEntry(plugins);\n         return entry !== void 0 && typeof entry.instance[method] === 'function';\n      }\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && typeof entry.instance[method] === 'function') { return false; }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (typeof entry.instance[method] === 'function') { return false; }\n         }\n      }\n\n      return true;\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given method name.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    */\n   invoke({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n   }\n\n   /**\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\n    * Any target invoked may return a Promise or any result.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<*|*[]>} A single result or array of results.\n    */\n   async invokeAsync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (typeof plugins === 'undefined') { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results).then((values) =>\n      {\n         const filtered = values.filter((entry) => entry !== void 0);\n         switch (filtered.length)\n         {\n            case 0: return void 0;\n            case 1: return filtered[0];\n            default: return filtered;\n         }\n      }) : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {object}   [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}   [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<PluginEventData>} The PluginEvent data.\n    */\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      // Invokes the private internal async events method with optional error checking enabled.\n      return invokeAsyncEvent(method, copyProps, passthruProps, plugins, this.pluginManager, this.options);\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {*|*[]} A single result or array of results.\n    */\n   invokeSync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (typeof plugins === 'undefined') { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {string}            opts.method - Method name to invoke.\n    *\n    * @param {object}            [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}            [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {PluginEventData} The PluginEvent data.\n    */\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      // Invokes the private internal sync events method with optional error checking enabled.\n      return invokeSyncEvent(method, copyProps, passthruProps, plugins, this.pluginManager, this.options);\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {Eventbus}   opts.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     opts.oldPrepend - The old event prepend.\n    *\n    * @param {string}     opts.newPrepend - The new event prepend.\n    */\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend } = {})\n   {\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\n         oldEventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:async:invoke`, this.invokeAsync, this, true);\n         newEventbus.on(`${newPrepend}:async:invoke:event`, this.invokeAsyncEvent, this, true);\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this, true);\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this, true);\n         newEventbus.on(`${newPrepend}:invoke`, this.invoke, this, true);\n         newEventbus.on(`${newPrepend}:sync:invoke`, this.invokeSync, this, true);\n         newEventbus.on(`${newPrepend}:sync:invoke:event`, this.invokeSyncEvent, this, true);\n      }\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {PluginManagerOptions} options Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (typeof obj !== 'undefined' && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n","import { isIterable }      from '@typhonjs-utils/object';\n\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {string}                     method - Method name to invoke.\n *\n * @param {object}                     copyProps - Properties that are copied.\n *\n * @param {object}                     passthruProps - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    plugins - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {PluginManager}              pluginManager - A plugin manager instance.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {PluginEventData} The PluginEvent data.\n */\nexport default function invokeSyncEvent(method, copyProps = {}, passthruProps = {}, plugins, pluginManager, options,\n performErrorCheck = true)\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   if (typeof plugins === 'string')\n   {\n      const entry = pluginManager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[method](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[method](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n}\n","import Eventbus          from '@typhonjs-plugin/eventbus';\nimport { EventbusProxy } from '@typhonjs-plugin/eventbus';\nimport ModuleLoader      from '@typhonjs-utils/loader-module';\n\nimport PluginEntry       from './PluginEntry.js';\n\nimport invokeAsyncEvent  from './invoke/invokeAsyncEvent.js';\n\nimport escapeTarget      from './utils/escapeTarget.js';\nimport isValidConfig     from './utils/isValidConfig.js';\nimport resolveModule     from './utils/resolveModule.js';\n\nimport { deepFreeze, isIterable, isObject }  from '@typhonjs-utils/object';\n\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link PluginManager#add}\n *\n * `plugins:async:add:all` - {@link PluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link PluginManager#destroy}\n *\n * `plugins:async:remove` - {@link PluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link PluginManager#removeAll}\n *\n * `plugins:get:enabled` - {@link PluginManager#getEnabled}\n *\n * `plugins:get:options` - {@link PluginManager#getOptions}\n *\n * `plugins:get:plugin:by:event` - {@link PluginManager#getPluginByEvent}\n *\n * `plugins:get:plugin:data` - {@link PluginManager#getPluginData}\n *\n * `plugins:get:plugin:events` - {@link PluginManager#getPluginEvents}\n *\n * `plugins:get:plugin:names` - {@link PluginManager#getPluginNames}\n *\n * `plugins:has:plugin` - {@link PluginManager#hasPlugin}\n *\n * `plugins:is:valid:config` - {@link PluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link PluginManager#setEnabled}\n *\n * `plugins:set:options` - {@link PluginManager#setOptions}\n *\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * If eventbus functionality is enabled it is important especially if using a process / global level eventbus such as\n * `@typhonjs-plugin/eventbus/instances` to call {@link PluginManager#destroy} to clean up all plugin eventbus\n * resources and the plugin manager event bindings; this is primarily a testing concern.\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n *\n * // One can also indirectly invoke any method of the plugin.\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\n *\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\n * eventbus.triggerSync('plugins:invoke:sync:event', {\n *    method: 'aCoolMethod',\n *    plugins: 'an-npm-plugin-enabled-module'\n * });\n *\n * // The 3rd parameter will make a copy of the hash and the 4th defines a pass through object hash sending a single\n * // event / object hash to the invoked method.\n *\n * // -----------------------\n *\n * // Given that `@typhonjs-plugin/eventbus/instances` defines a global / process level eventbus you can import it in\n * // an entirely different file or even NPM module and invoke methods of loaded plugins like this:\n *\n * import eventbus from '@typhonjs-plugin/eventbus/instances';\n *\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke', 'aCoolMethod');\n *\n * assert(eventbus.triggerSync('cool:event') === true);\n *\n * // Removes the plugin and unregisters events.\n * await eventbus.triggerAsync('plugins:remove', 'an-npm-plugin-enabled-module');\n *s\n * assert(eventbus.triggerSync('cool:event') === true); // Will now fail!\n *\n * // In this case though when using the global eventbus be mindful to always call `pluginManager.destroy()` in the\n * // main thread of execution scope to remove all plugins and the plugin manager event bindings!\n */\nexport default class PluginManager\n{\n   /**\n    * Stores the associated eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus = null;\n\n   /**\n    * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n    *\n    * @type {EventbusProxy[]}\n    * @private\n    */\n   #eventbusProxies = [];\n\n   /**\n    * Stores any EventbusSecure instances created, so that they may be automatically destroyed.\n    *\n    * @type {EventbusSecureObj[]}\n    * @private\n    */\n   #eventbusSecure = [];\n\n   /**\n    * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\n    * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\n    * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\n    * off.\n    *\n    * @type {PluginManagerOptions}\n    * @private\n    */\n   #options =\n   {\n      noEventAdd: false,\n      noEventDestroy: true,\n      noEventOptions: true,\n      noEventRemoval: false,\n      noEventSetEnabled: true,\n      throwNoMethod: false,\n      throwNoPlugin: false\n   };\n\n   /**\n    * Stores the plugins by name with an associated PluginEntry.\n    *\n    * @type {Map<string, PluginEntry>}\n    * @private\n    */\n   #pluginMap = new Map();\n\n   /**\n    * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\n    *\n    * @type {PluginSupportImpl[]}\n    * @private\n    */\n   #pluginSupport = [];\n\n   /**\n    * Instantiates PluginManager\n    *\n    * @param {object}   [options] - Provides various configuration options:\n    *\n    * @param {Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus' used as the plugin\n    *                                        eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\n    *                                                     eventbus.\n    *\n    * @param {PluginSupportImpl|Iterable<PluginSupportImpl>} [options.PluginSupport] - Optional classes to pass in which\n    *                                                 extends the plugin manager. A default implementation is available:\n    *                                                 {@link PluginSupport}\n    *\n    * @param {PluginManagerOptions}  [options.manager] - The plugin manager options.\n    */\n   constructor(options = {})\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\n      {\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\n      }\n\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\n      {\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\n      }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\n       !isIterable(options.PluginSupport))\n      {\n         throw new TypeError(\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\n      }\n\n      if (options.manager !== void 0 && !isObject(options.manager))\n      {\n         throw new TypeError(`'options.manager' is not an object.`);\n      }\n\n      // Instantiate any PluginSupport classes\n      if (isIterable(options.PluginSupport))\n      {\n         for (const PluginSupport of options.PluginSupport)\n         {\n            this.#pluginSupport.push(new PluginSupport(this));\n         }\n      }\n      else if (options.PluginSupport !== void 0)\n      {\n         this.#pluginSupport.push(new options.PluginSupport(this));\n      }\n\n      this.setOptions(options.manager);\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(`'pluginConfig.name' is not a string for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(`'pluginConfig.options' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof moduleData !== 'undefined' && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this.#pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name}.`);\n      }\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         try\n         {\n            const result = await ModuleLoader.load({ modulepath: target, resolveModule })\n\n            // Please note that a plugin or other logger must be setup on the associated eventbus.\n            if (this.#eventbus !== null)\n            {\n               this.#eventbus.trigger('log:debug',\n                `@typhonjs-plugin/manager - ${result.isESM ? 'import' : 'require'}: ${result.loadpath}`);\n            }\n\n            instance = result.instance;\n            type = result.type;\n         }\n         catch (err)\n         {\n            throw new Error(`@typhonjs-plugin/manager - Could not load target: ${target}\\n\\nPluginConfig:\\n`\n             + `${JSON.stringify(pluginConfig, null, 3)}\\n\\n${err}`);\n         }\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            target,\n            targetEscaped: escapeTarget(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['manager']);\n\n      const eventbusProxy = this.#eventbus !== null && typeof this.#eventbus !== 'undefined' ?\n       new EventbusProxy(this.#eventbus) : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this.#pluginMap.set(pluginConfig.name, entry);\n\n      // Invoke private module method which allows skipping optional error checking.\n      await invokeAsyncEvent('onPluginLoad', {}, {}, pluginConfig.name, this, this.getOptions(), false);\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this.#eventbus)\n      {\n         await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {Iterable<PluginConfig>}  pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                  [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    */\n   async addAll(pluginConfigs = [], moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {Iterable<PluginConfig>}  pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                  [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventAdd) { return this.addAll(pluginConfigs, moduleData); }\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this.#eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (this.#eventbus === null)\n      {\n         throw new ReferenceError('No eventbus assigned to plugin manager.');\n      }\n\n      const eventbusProxy = new EventbusProxy(this.#eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusSecure wrapping this eventbus is returned.\n    * It is added to `this.#eventbusSecure` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusSecure} A secure wrapper for the currently set Eventbus.\n    */\n   createEventbusSecure(name = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (this.#eventbus === null)\n      {\n         throw new ReferenceError('No eventbus assigned to plugin manager.');\n      }\n\n      const eventbusSecureObj = this.#eventbus.createSecure(name);\n\n      // Store EventbusSecure object to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusSecure.push(eventbusSecureObj);\n\n      return eventbusSecureObj.eventbusSecure;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Destroy any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.destroy();\n      }\n\n      this.#eventbusSecure = [];\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this.#eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this.#eventbusProxies = [];\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      const results = await this.removeAll();\n\n      if (this.#eventbus !== null && this.#eventbus !== void 0)\n      {\n         this.#eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugin, this);\n         this.#eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         await pluginSupport.destroy({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\n      }\n\n      this.#pluginSupport = [];\n      this.#pluginMap = null;\n      this.#eventbus = null;\n\n      return results;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async _destroyEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventDestroy) { return this.destroy(); }\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this.#pluginMap === null || this.#pluginMap === void 0;\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\n    *                                           plugins.\n    */\n   getEnabled({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.enabled;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.#pluginMap.get(name);\n         const loaded = entry !== void 0;\n         results.push({ name, enabled: loaded && entry.enabled, loaded });\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const [name, entry] of this.#pluginMap.entries())\n         {\n            const loaded = entry !== void 0;\n            results.push({ name, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {Eventbus} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this.#options));\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginByEvent({ event = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof event !== 'string' && !(event instanceof RegExp))\n      {\n         throw new TypeError(`'event' is not a string or RegExp.`);\n      }\n\n      const pluginEvents = this.getPluginEvents();\n\n      const results = [];\n\n      if (typeof event === 'string')\n      {\n         for (const entry of pluginEvents)\n         {\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\n         }\n      }\n      else\n      {\n         for (const entry of pluginEvents)\n         {\n            for (const eventEntry of entry.events)\n            {\n               if (event.test(eventEntry))\n               {\n                  results.push(entry.plugin);\n                  break;\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {PluginData|PluginData[]|undefined} The plugin data for a plugin or list of plugins.\n    */\n   getPluginData({ plugins = [] } = {})\n   {\n      if (this.isDestroyed)\n      { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 ? JSON.parse(JSON.stringify(entry.data)) : void 0;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.#pluginMap.get(name);\n\n         if (entry !== void 0)\n         {\n            results.push(JSON.parse(JSON.stringify(entry.data)));\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push(JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets a PluginEntry instance for the given plugin name.\n    *\n    * @param {string} plugin - The plugin name to get.\n    *\n    * @returns {void|PluginEntry} The PluginEntry for the given plugin name.\n    */\n   getPluginEntry(plugin)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.get(plugin)\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginEvents({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()).sort() : [];\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this.#pluginMap.get(plugin);\n\n         if (entry !== void 0)\n         {\n            results.push({\n               plugin,\n               events: entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()).sort() : []\n            });\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push({\n                  plugin: entry.name,\n                  events: entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()).sort() : []\n               });\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns an iterable of PluginEntry instances.\n    *\n    * @returns {Iterable<PluginEntry>} An iterable of PluginEntry instances.\n    */\n   getPluginMapEntries()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.entries();\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names).\n    *\n    * @returns {Iterable<string>} An iterable of plugin map keys.\n    */\n   getPluginMapKeys()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.keys();\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names).\n    *\n    * @returns {Iterable<string>} An iterable of plugin map keys.\n    */\n   getPluginMapValues()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.values();\n   }\n\n   /**\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\n    *\n    * @param {object}  [opts] - Options object.\n    *\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames({ enabled = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = [];\n\n      for (const entry of this.#pluginMap.values())\n      {\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results.sort();\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugin] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean} True if a plugin exists.\n    */\n   hasPlugin({ plugin = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugin !== 'string') { throw new TypeError(`'plugin' is not a string.`); }\n\n      return this.#pluginMap.has(plugin);\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\n    * automatically.\n    *\n    * @param {object}                  opts - Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async remove({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      const removeEntry = async (entry) =>\n      {\n         const errors = [];\n\n         const pluginName = entry.name;\n\n         try\n         {\n            // Invoke private module method which allows skipping optional error checking.\n            await invokeAsyncEvent('onPluginUnload', {}, {}, pluginName, this, this.getOptions(), false);\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         try\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            entry.instance._eventbus = void 0;\n         }\n         catch (err) { /* noop */ }\n\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n         this.#pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         try\n         {\n            if (this.#eventbus)\n            {\n               await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n                JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         return { name: pluginName, success: errors.length === 0, errors };\n      };\n\n      const results = [];\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n\n         if (entry !== void 0)\n         {\n            results.push(await removeEntry(entry));\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this.#pluginMap.get(name);\n\n            if (entry !== void 0)\n            {\n               results.push(await removeEntry(entry));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.remove({ plugins: Array.from(this.#pluginMap.keys()) });\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {object}                  opts - Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeEventbus(opts)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventRemoval ? this.remove(opts) : [];\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventRemoval) { return this.removeAll(); }\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {boolean}           opts.enabled - The enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to set state.\n    */\n   setEnabled({ enabled, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry !== void 0)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this.#eventbus)\n            {\n               this.#eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         setEntryEnabled(this.#pluginMap.get(plugins));\n      }\n\n      let count = 0;\n\n      // First attempt to iterate through plugins.\n      for (const name of plugins)\n      {\n         setEntryEnabled(this.#pluginMap.get(name));\n         count++;\n      }\n\n      // If plugins is empty then set all plugins enabled state.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            setEntryEnabled(entry);\n         }\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent setEnabled if optional `noEventSetEnabled` is true. This\n    * disables the ability for setting plugin enabled state via events preventing any external code from setting state.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @private\n    */\n   _setEnabledEventbus(opts)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventSetEnabled) { this.setEnabled(opts); }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.eventbus - The new eventbus to associate.\n    *\n    * @param {string}     [opts.eventPrepend='plugins'] - An optional string to prepend to all of the event\n    *                                                     binding targets.\n    *\n    * @returns {Promise<PluginManager>} This plugin manager.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this.#eventbus) { return this; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this.#pluginMap.size > 0)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await invokeAsyncEvent('onPluginUnload', {}, {}, this.#pluginMap.keys(), this, this.getOptions(), false);\n\n         for (const entry of this.#pluginMap.values())\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            try\n            {\n               entry.instance._eventbus = void 0;\n            }\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.manager.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n         }\n\n         // Invoke private module method which allows skipping optional error checking.\n         await invokeAsyncEvent('onPluginLoad', {}, {}, this.#pluginMap.keys(), this, this.getOptions(), false);\n\n         for (const entry of this.#pluginMap.values())\n         {\n            // Invoke `typhonjs:plugin:manager:eventbus:changed` allowing external code to react to plugin\n            // changing eventbus.\n            if (this.#eventbus)\n            {\n               this.#eventbus.trigger(`typhonjs:plugin:manager:eventbus:changed`, Object.assign({\n                  oldEventbus: this.#eventbus,\n                  oldManagerEventPrepend: oldPrepend,\n                  oldScopedName: `${oldPrepend}:${entry.name}`,\n                  newEventbus: eventbus,\n                  newManagerEventPrepend: eventPrepend,\n                  newScopedName: `${eventPrepend}:${entry.name}`\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      }\n\n      if (this.#eventbus !== null)\n      {\n         this.#eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugin, this);\n         this.#eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${oldPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this, true);\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this, true);\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this, true);\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugin, this, true);\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this, true);\n      eventbus.on(`${eventPrepend}:set:enabled`, this._setEnabledEventbus, this, true);\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this, true);\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setEventbus({\n            oldEventbus: this.#eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      // Set the new eventbus for any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.setEventbus(eventbus);\n      }\n      this.#eventbus = eventbus;\n\n      return this;\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.noEventAdd === 'boolean') { this.#options.noEventAdd = options.noEventAdd; }\n      if (typeof options.noEventDestroy === 'boolean') { this.#options.noEventDestroy = options.noEventDestroy; }\n      if (typeof options.noEventInvoke === 'boolean') { this.#options.noEventInvoke = options.noEventInvoke; }\n      if (typeof options.noEventOptions === 'boolean') { this.#options.noEventOptions = options.noEventOptions; }\n      if (typeof options.noEventRemoval === 'boolean') { this.#options.noEventRemoval = options.noEventRemoval; }\n      if (typeof options.throwNoMethod === 'boolean') { this.#options.throwNoMethod = options.throwNoMethod; }\n      if (typeof options.throwNoPlugin === 'boolean') { this.#options.throwNoPlugin = options.throwNoPlugin; }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setOptions({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventOptions` is\n    * enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventOptions) { this.setOptions(options); }\n   }\n}\n"],"names":["EventbusSecure","[object Object]","eventbus","name","TypeError","eventbusSecure","destroy","isDestroyed","this","setEventbus","regex","ReferenceError","entry","keys","trigger","arguments","triggerAsync","triggerDefer","triggerSync","eventSplitter","eventsAPI","iteratee","events","callback","opts","names","i","context","objectKeys","length","test","split","getErrorName","object","Object","beforeMap","map","after","count","beforeWrapper","s_BEFORE","apply","_callback","before","result","args","EventbusProxy","guarded","Number","isInteger","data","isGuarded","console","warn","Utils.getErrorName","JSON","stringify","Utils.eventsAPI","Utils.beforeMap","off","bind","on","initialize","entries","eventCount","callbackCount","proxyEventCount","proxyCallbackCount","s_OFF_API","ctx","s_ON_API","RegExp","event","Utils.objectKeys","handlers","remaining","j","handler","push","Eventbus","_listeners","_listenId","_listeningTo","s_IS_GUARDED","obj","s_TRY_CATCH_IS_GUARDED","id","s_UNIQUE_ID","listeningTo","listening","_listening","Listening","error","s_TRY_CATCH_ON","interop","stopListening","listenTo","listeners","ids","Math","max","Array","s_RESULTS_TARGET_API","s_TRIGGER_API","s_TRIGGER_EVENTS","s_TRIGGER_ASYNC_EVENTS","isArray","Promise","all","then","results","allResults","pResult","concat","setTimeout","s_TRIGGER_SYNC_EVENTS","listener","cleanup","value","output","incrementCount","iterateeTarget","Utils.eventSplitter","resultsType","newArray","objEvents","allEvents","slice","ev","a1","a2","a3","l","call","async","values","filtered","filter","err","idCounter","prefix","pluginEventbus","testEventbus","o","baseDirectory","cntr","currentDirectory","packageObj","packagePath","rootPath","t","e","relative","startsWith","isAbsolute","filepath","basepath","c","URL","r","fileURLToPath","a","existsSync","lstatSync","isDirectory","resolve","dirname","parse","root","Error","type","createRequire","import","meta","url","s","extname","toLowerCase","isBaseParent","readFileSync","PluginEntry","instance","eventbusProxy","_data","_enabled","_name","_instance","_eventbusProxy","_events","enabled","from","proxyEntries","deepFreeze","skipFreezeKeys","_deepFreeze","isIterable","Symbol","iterator","isObject","key","hasOwnProperty","includes","freeze","PluginInvokeEvent","copyProps","passthruProps","assign","pluginName","pluginOptions","invokeAsyncEvent","method","plugins","pluginManager","options","performErrorCheck","pluginInvokeCount","pluginInvokeNames","hasMethod","hasPlugin","getPluginEntry","plugin","throwNoPlugin","throwNoMethod","$$plugin_invoke_count","$$plugin_invoke_names","s_REGEX_ESCAPE_RELATIVE","s_REGEX_ESCAPE_FORWARD","s_REGEX_STRING_URL","escapeTarget","target","targetEscaped","pathname","match","replace","isValidConfig","pluginConfig","module","onPluginLoad","default","PluginInvokeSupport","getOptions","eventPrepend","invokeAsync","getMethodNames","invoke","invokeSync","invokeSyncEvent","anyEnabledState","s_GET_ALL_PROPERTY_NAMES","Function","getPluginMapValues","sort","getPluginMapKeys","isArgsArray","oldEventbus","newEventbus","oldPrepend","newPrepend","props","getOwnPropertyNames","forEach","prop","indexOf","getPrototypeOf","prototype","noEventAdd","noEventDestroy","noEventOptions","noEventRemoval","noEventSetEnabled","Map","PluginSupport","manager","setOptions","moduleData","has","modulepath","resolveModule","isESM","n","p","loadpath","toString","h","pathToFileURL","load","pluginData","_eventPrepend","scopedName","set","pluginConfigs","pluginsData","add","addAll","eventbusSecureObj","createSecure","removeAll","_addEventbus","_addAllEventbus","_destroyEventbus","_removeEventbus","_removeAllEventbus","getEnabled","getPluginByEvent","getPluginData","getPluginEvents","getPluginNames","_setEnabledEventbus","_setOptionsEventbus","pluginSupport","get","loaded","pluginEvents","eventEntry","proxyKeys","removeEntry","errors","_eventbus","delete","success","remove","setEntryEnabled","setEnabled","size","oldManagerEventPrepend","oldScopedName","newManagerEventPrepend","newScopedName","noEventInvoke"],"mappings":"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"}