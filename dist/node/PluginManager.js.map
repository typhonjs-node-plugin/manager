{"version":3,"file":"PluginManager.js","sources":["../../node_modules/@typhonjs-utils/package-json/src/util/TraversalData.js","../../node_modules/@typhonjs-utils/package-json/src/util/getPackageType.js","../../node_modules/@typhonjs-plugin/eventbus/src/EventbusProxy.js","../../node_modules/@typhonjs-plugin/eventbus/src/Eventbus.js","../../node_modules/@typhonjs-utils/object/src/objectUtil.js","../../src/PluginEntry.js","../../src/PluginEvent.js","../../src/isValidConfig.js","../../src/AbstractPluginManager.js","../../src/node/PluginManager.js","../../node_modules/@typhonjs-utils/package-json/src/util/getPackagePath.js","../../src/PluginSupport.js"],"sourcesContent":["import url  from 'url';\nimport fs   from 'fs';\nimport path from 'path';\n\n/**\n * Stores the data tracked over traversing the starting directory. And provides a few internal utility methods.\n */\nexport default class TraversalData\n{\n   constructor()\n   {\n      /**\n       * Stores any base directory defined or the root path.\n       *\n       * @type {string}\n       */\n      this.baseDirectory = void 0;\n\n      /**\n       * Stores the number of times a package is processed; useful in callbacks.\n       *\n       * @type {number}\n       */\n      this.cntr = 0;\n\n      /**\n       * Current directory of traversal.\n       *\n       * @type {string}\n       */\n      this.currentDirectory = void 0;\n\n      /**\n       * Current loaded `package.json` object.\n       *\n       * @type {object}\n       */\n      this.packageObj = void 0;\n\n      /**\n       * Path of current loaded `package.json` object\n       *\n       * @type {string}\n       */\n      this.packagePath = void 0;\n\n      /**\n       * The root path to stop traversal; determined from starting directory path.\n       *\n       * @type {string}\n       */\n      this.rootPath = void 0;\n\n      /**\n       * Stores a callback function.\n       *\n       * @type {Function}\n       * @private\n       */\n      this._callback = void 0;\n   }\n\n   /**\n    * Returns true if basedir has been set comparing the starting directory against the base directory to\n    * determine if the base directory is a parent path intentionally stopping traversal.\n    *\n    * @returns {boolean} Whether basedir is set and a parent of the starting directory.\n    */\n   isBaseParent()\n   {\n      // If basepath is not configured it is set to root path.\n      if (this.baseDirectory === this.rootPath) { return false; }\n\n      const relative = path.relative(this.baseDirectory, this.currentDirectory);\n      return relative && !relative.startsWith('..') && !path.isAbsolute(relative);\n   }\n\n   /**\n    * Parses the options object passed into the various getPackage functions.\n    *\n    * @param {TraversalData}  data - A TraversalData instance.\n    *\n    * @param {object}      options - An object.\n    *\n    * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n    *\n    * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n    *                                           provided.\n    *\n    * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes\n    *                                           back a truthy value that stops or continues the traversal.\n    *\n    * @returns {TraversalData} Returns the parsed TraversalData instance.\n    */\n   static parse(data, { filepath, basepath = void 0, callback } = {})\n   {\n      if (typeof filepath !== 'string' && !(filepath instanceof URL))\n      {\n         throw new TypeError(`'filepath' is not a 'string' or file 'URL'`);\n      }\n\n      if (basepath !== void 0 && typeof basepath !== 'string' && !(basepath instanceof URL))\n      {\n         throw new TypeError(`'basepath' is not a 'string' or file 'URL'`);\n      }\n\n      if (callback !== void 0 && typeof callback !== 'function')\n      {\n         throw new TypeError(`'callback' is not a 'function'`);\n      }\n\n      // Convert basepath if an URL to a file path\n      if (basepath instanceof URL)\n      {\n         basepath = url.fileURLToPath(basepath);\n      }\n\n      // Convert any URL or string file URL to path.\n      if (filepath instanceof URL || filepath.startsWith('file:/'))\n      {\n         filepath = url.fileURLToPath(filepath);\n      }\n\n      // Handle `filepath` as a directory or get directory of path with file name.\n      data.currentDirectory = fs.existsSync(filepath) && fs.lstatSync(filepath).isDirectory() ?\n       path.resolve(filepath) : path.resolve(path.dirname(filepath));\n\n      // Convert basepath to root of resolved file path if not a string.\n      if (typeof basepath !== 'string')\n      {\n         basepath = path.parse(data.currentDirectory).root;\n      }\n\n      // Convert string file URL to path.\n      if (basepath.startsWith('file:/'))\n      {\n         basepath = url.fileURLToPath(basepath);\n      }\n\n      // Handle `basepath` as a directory or convert a path with file name to a directory.\n      data.baseDirectory = fs.existsSync(basepath) && fs.lstatSync(basepath).isDirectory() ? path.resolve(basepath) :\n       path.resolve(path.dirname(basepath));\n\n      // If the resolved paths do not exist then return null.\n      if (!fs.existsSync(data.baseDirectory) || !fs.existsSync(data.currentDirectory))\n      {\n         throw new Error(`Could not resolve 'filepath' or 'basepath'`);\n      }\n\n      // Ensure we track the root of the current directory path to stop iteration.\n      data.rootPath = path.parse(data.currentDirectory).root;\n\n      data._callback = callback;\n\n      return data;\n   }\n}\n","import getPackagePath from './getPackagePath.js';\nimport TraversalData  from './TraversalData.js';\n\n/**\n * Attempts to traverse from `filepath` to `basepath` attempting to access `type` field of `package.json`. The type\n * is returned if it is set in the found `package.json` otherwise `commonjs` is returned.\n *\n * Note: With only `filepath` set this function only reliably returns a positive result when there are no\n * intermediary `package.json` files in between a supposed root and path. If provided with malformed\n * data or there is any error / edge case triggered then 'commonjs' by default will be returned.\n *\n * Another edge case is that traversal stops at the first valid `package.json` file and this may not contain a `type`\n * property whereas a `package.json` file in the root of the module may define it.\n *\n * However if you provide a `filepath` and a `basepath` that is a parent path giving a firm stopping point then a\n * proper resolution callback, `s_RESOLVE_TYPE`, is automatically added. Intermediary `package.json` files that\n * do not have an explicit `type` attribute set do not prevent traversal which continues until the `basepath` is\n * reached which is how Node.js actually resolves the `type` attribute.\n *\n * @param {object}      options - An object.\n *\n * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n *\n * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n *                                           provided.\n *\n * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes back a\n *                                           truthy value that stops or continues the traversal.\n *\n * @returns {string} Type of package - 'module' for ESM otherwise 'commonjs'.\n */\nexport default function getPackageType(options)\n{\n   try\n   {\n      const data = TraversalData.parse(new TraversalData(), options);\n\n      // Base directory is set and there is no callback set so add a proper resolution callback for package type.\n      if (data.isBaseParent() && data._callback === void 0)\n      {\n         data._callback = s_RESOLVE_TYPE;\n      }\n\n      const result = getPackagePath(data);\n\n      return typeof result.packageObj === 'object' ?\n       result.packageObj.type === 'module' ? 'module' : 'commonjs' :\n        'commonjs';\n   }\n   catch (error)\n   {\n      return 'commonjs';\n   }\n}\n\n/**\n * Handles proper resolution of finding the parent `package.json` that has a type attribute set. You must set\n * `basepath` to provide a known stopping point.\n *\n * @param {TraversalData}  data - Current traversal state.\n *\n * @returns {boolean} If the package object contains a `type` attribute then stop traversal.\n */\nconst s_RESOLVE_TYPE = (data) => typeof data.packageObj.type === 'string';\n","import Eventbus from './Eventbus.js';\n\n/**\n * EventbusProxy provides a protected proxy of another Eventbus instance.\n *\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\n *\n * EventbusProxy provides the on / off, once, and trigger methods with the same signatures as found in\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\n *\n * Finally the EventbusProxy only allows events registered through it to be turned off providing a buffer between\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\n */\nexport default class EventbusProxy\n{\n   /**\n    * Creates the event proxy with an existing instance of TyphonEvents.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    */\n   constructor(eventbus)\n   {\n      if (!(eventbus instanceof Eventbus))\n      {\n         throw new TypeError(`'eventbus' is not an instance of Eventbus.`);\n      }\n\n      /**\n       * Stores the target eventbus.\n       *\n       * @type {Eventbus}\n       * @private\n       */\n      this._eventbus = eventbus;\n\n      /**\n       * Stores all proxied event bindings.\n       *\n       * @type {Array<{name: string, callback: Function, context: *}>}\n       * @private\n       */\n      this._events = [];\n   }\n\n   /**\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\n    * after `destroy` has been called result in a ReferenceError thrown.\n    */\n   destroy()\n   {\n      if (this._eventbus !== null)\n      {\n         for (const event of this._events) { this._eventbus.off(event.name, event.callback, event.context); }\n      }\n\n      this._events = [];\n\n      this._eventbus = null;\n   }\n\n   /**\n    * Iterates over all of events from the proxied eventbus yielding an array with event name, callback function, and\n    * event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *entries(eventName = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this._eventbus.entries(eventName))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns the current proxied eventbus event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get eventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.eventCount;\n   }\n\n   /**\n    * Returns the event names of proxied eventbus event listeners.\n    *\n    * @returns {string[]} Returns the event names of proxied event listeners.\n    */\n   get eventNames()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.eventNames;\n   }\n\n   /**\n    * Returns whether this EventbusProxy has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this._eventbus === null;\n   }\n\n   /**\n    * Returns the target eventbus name.\n    *\n    * @returns {string|*} The target eventbus name.\n    */\n   get name()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.name;\n   }\n\n   /**\n    * Remove a previously-bound proxied event binding.\n    *\n    * Please see {@link Eventbus#off}.\n    *\n    * @param {string}   [name]     - Event name(s)\n    *\n    * @param {Function} [callback] - Event callback function\n    *\n    * @param {object}   [context]  - Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   off(name = void 0, callback = void 0, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      const hasName = typeof name !== 'undefined' && name !== null;\n      const hasCallback = typeof callback !== 'undefined' && callback !== null;\n      const hasContext = typeof context !== 'undefined' && context !== null;\n\n      // Remove all events if `off()` is invoked.\n      if (!hasName && !hasCallback && !hasContext)\n      {\n         for (const event of this._events) { this._eventbus.off(event.name, event.callback, event.context); }\n         this._events = [];\n      }\n      else\n      {\n         const values = {};\n         if (hasName) { values.name = name; }\n         if (hasCallback) { values.callback = callback; }\n         if (hasContext) { values.context = context; }\n\n         for (let cntr = this._events.length; --cntr >= 0;)\n         {\n            const event = this._events[cntr];\n\n            let foundMatch = true;\n\n            for (const key in values)\n            {\n               if (event[key] !== values[key]) { foundMatch = false; break; }\n            }\n\n            if (foundMatch)\n            {\n               this._eventbus.off(values.name, values.callback, values.context);\n               this._events.splice(cntr, 1);\n            }\n         }\n      }\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * This is proxied through `listenTo` of an internal Events instance instead of directly modifying the target\n    * eventbus.\n    *\n    * Please see {@link Eventbus#on}.\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   on(name, callback, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.on(name, callback, context);\n\n      this._events.push({ name, callback, context });\n\n      return this;\n   }\n\n   /**\n    * Iterates over all stored proxy events yielding an array with event name, callback function, and event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *proxyEntries(eventName = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (!this._events) { return; }\n\n      if (eventName)\n      {\n         for (const event of this._events)\n         {\n            if (eventName === event.name) { yield [event.name, event.callback, event.context]; }\n         }\n      }\n      else\n      {\n         for (const event of this._events)\n         {\n            yield [event.name, event.callback, event.context];\n         }\n      }\n   }\n\n   /**\n    * Returns the current proxied event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get proxyEventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._events.length;\n   }\n\n   /**\n    * Returns the event names of proxied event listeners.\n    *\n    * @returns {string[]} Returns the event names of proxied event listeners.\n    */\n   get proxyEventNames()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this._events) { return []; }\n\n      const eventNames = {};\n\n      for (const event of this._events) { eventNames[event.name] = true; }\n\n      return Object.keys(eventNames);\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * Please see {@link Eventbus#trigger}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   trigger()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.trigger(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * Please see {@link Eventbus#triggerAsync}.\n    *\n    * @returns {Promise} A Promise to returning any results.\n    */\n   triggerAsync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerAsync(...arguments);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * Please see {@link Eventbus#triggerDefer}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   triggerDefer()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.triggerDefer(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * Please see {@link Eventbus#triggerSync}.\n    *\n    * @returns {*|Array.<*>} An Array of returned results.\n    */\n   triggerSync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerSync(...arguments);\n   }\n}\n","import EventbusProxy from './EventbusProxy.js';\n\n/**\n * `@typhonjs-plugin/eventbus` / Provides the ability to bind and trigger custom named events.\n *\n * This module is an evolution of Backbone Events. (http://backbonejs.org/#Events). Eventbus extends the\n * functionality provided in Backbone Events with additional triggering methods to receive asynchronous and\n * synchronous results.\n *\n * ---------------\n */\nexport default class Eventbus\n{\n   /**\n    * Provides a constructor which optionally takes the eventbus name.\n    *\n    * @param {string}   eventbusName - Optional eventbus name.\n    */\n   constructor(eventbusName = void 0)\n   {\n      /**\n       * Stores the name of this eventbus.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventbusName = eventbusName;\n   }\n\n   /**\n    * Creates an EventProxy wrapping this events instance. An EventProxy proxies events allowing all listeners added\n    * to be easily removed from the wrapped Events instance.\n    *\n    * @returns {EventbusProxy} A new EventbusProxy for this eventbus.\n    */\n   createProxy()\n   {\n      return new EventbusProxy(this);\n   }\n\n   /**\n    * Iterates over all stored events yielding an array with event name, callback function, and event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *entries(eventName = void 0)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return; }\n\n      if (eventName)\n      {\n         for (const event of this._events[eventName])\n         {\n            yield [eventName, event.callback, event.ctx];\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            for (const event of this._events[name])\n            {\n               yield [name, event.callback, event.ctx];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current event count.\n    *\n    * @returns {number} The current proxied event count.\n    */\n   get eventCount()\n   {\n      let count = 0;\n\n      for (const name in this._events) { count += this._events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns the event names of registered event listeners.\n    *\n    * @returns {string[]} The event names of registered event listeners.\n    */\n   get eventNames()\n   {\n      /* c8 ignore next */\n      if (!this._events) { return []; }\n\n      return Object.keys(this._events);\n   }\n\n   /**\n    * Returns the current eventbus name.\n    *\n    * @returns {string|*} The current eventbus name.\n    */\n   get name()\n   {\n      return this._eventbusName;\n   }\n\n   /**\n    * Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\n    * be removed all at once later on. The callback will always be called with object as context.\n    *\n    * @example\n    * view.listenTo(model, 'change', view.render);\n    *\n    * @see http://backbonejs.org/#Events-listenTo\n    *\n    * @param {object}   obj         - Event context\n    * @param {string}   name        - Event name(s)\n    * @param {Function} callback    - Event callback function\n    * @param {object}   [context]   - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenTo(obj, name, callback, context = this)\n   {\n      if (!obj) { return this; }\n      const id = obj._listenId || (obj._listenId = s_UNIQUE_ID('l'));\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\n      let listening = listeningTo[id];\n\n      // This object is not listening to any other events on `obj` yet.\n      // Setup the necessary references to track the listening callbacks.\n      if (!listening)\n      {\n         const thisId = this._listenId || (this._listenId = s_UNIQUE_ID('l'));\n         listening = listeningTo[id] = { obj, objId: id, id: thisId, listeningTo, count: 0 };\n      }\n\n      // Bind callbacks on obj, and keep track of them on listening.\n      s_INTERNAL_ON(obj, name, callback, context, listening);\n      return this;\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\n    *\n    * @see http://backbonejs.org/#Events-listenToOnce\n    *\n    * @param {object}   obj      - Event context\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   [context=this] - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToOnce(obj, name, callback, context = this)\n   {\n      // Map the event into a `{event: once}` object.\n      const events = s_EVENTS_API(s_ONCE_MAP, {}, name, callback, this.stopListening.bind(this, obj));\n\n      return this.listenTo(obj, events, void 0, context);\n   }\n\n   /**\n    * Remove a previously-bound callback function from an object. If no context is specified, all of the versions of\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\n    * will be removed. If no event is specified, callbacks for all events will be removed.\n    *\n    * Note that calling model.off(), for example, will indeed remove all events on the model — including events that\n    * Backbone uses for internal bookkeeping.\n    *\n    * @example\n    * // Removes just the `onChange` callback.\n    * object.off(\"change\", onChange);\n    *\n    * // Removes all \"change\" callbacks.\n    * object.off(\"change\");\n    *\n    * // Removes the `onChange` callback for all events.\n    * object.off(null, onChange);\n    *\n    * // Removes all callbacks for `context` for all events.\n    * object.off(null, null, context);\n    *\n    * // Removes all callbacks on `object`.\n    * object.off();\n    *\n    * @see http://backbonejs.org/#Events-off\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   off(name, callback = void 0, context = void 0)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return this; }\n\n      /**\n       * @type {*}\n       * @protected\n       */\n      this._events = s_EVENTS_API(s_OFF_API, this._events, name, callback, { context, listeners: this._listeners });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\n    * model.on('change', this.render, this) or model.on({change: this.render}, this).\n    *\n    * @example\n    * The event string may also be a space-delimited list of several events...\n    * book.on(\"change:title change:author\", ...);\n    *\n    * @example\n    * Callbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of\n    * the event as the first argument. For example, to proxy all events from one object to another:\n    * proxy.on(\"all\", function(eventName) {\n    *    object.trigger(eventName);\n    * });\n    *\n    * @example\n    * All Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n    * book.on({\n    *    \"change:author\": authorPane.update,\n    *    \"change:title change:subtitle\": titleView.update,\n    *    \"destroy\": bookView.remove\n    * });\n    *\n    * @see http://backbonejs.org/#Events-on\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      return s_INTERNAL_ON(this, name, callback, context, void 0);\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @see http://backbonejs.org/#Events-once\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   once(name, callback, context = void 0)\n   {\n      // Map the event into a `{event: once}` object.\n      const events = s_EVENTS_API(s_ONCE_MAP, {}, name, callback, this.off.bind(this));\n\n      if (typeof name === 'string' && (context === null || typeof context === 'undefined')) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\n    * on a specific object, or a specific event, or just a specific callback.\n    *\n    * @example\n    * view.stopListening();\n    *\n    * view.stopListening(model);\n    *\n    * @see http://backbonejs.org/#Events-stopListening\n    *\n    * @param {object}   obj            - Event context\n    * @param {string}   name           - Event name(s)\n    * @param {Function} callback       - Event callback function\n    * @param {object}   [context=this] - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   stopListening(obj, name = void 0, callback = void 0, context = this)\n   {\n      const listeningTo = this._listeningTo;\n      if (!listeningTo) { return this; }\n\n      const ids = obj ? [obj._listenId] : Object.keys(listeningTo);\n\n      for (let i = 0; i < ids.length; i++)\n      {\n         const listening = listeningTo[ids[i]];\n\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\n         if (!listening) { break; }\n\n         listening.obj.off(name, callback, context);\n      }\n\n      return this;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @see http://backbonejs.org/#Events-trigger\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   trigger(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return this; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_EVENTS, this._events, name, void 0, args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {Promise} A Promise with any results.\n    */\n   async triggerAsync(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return Promise.resolve([]); }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      const promise = s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_ASYNC_EVENTS, this._events, name, void 0, args);\n\n      return promise !== void 0 ? promise : Promise.resolve();\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   triggerDefer()\n   {\n      setTimeout(() => { this.trigger(...arguments); }, 0);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {*|Array<*>} The results of the event invocation.\n    */\n   triggerSync(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return void 0; }\n\n      const start = 1;\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + start]; }\n\n      return s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_SYNC_EVENTS, this._events, name, void 0, args);\n   }\n}\n\n// Private / internal methods ---------------------------------------------------------------------------------------\n\n/**\n * Regular expression used to split event strings.\n *\n * @type {RegExp}\n */\nconst s_EVENT_SPLITTER = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee    - Event operation to invoke.\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string|object} name   - A single event name, compound event names, or a hash of event names.\n * @param {Function} callback    - Event callback function\n * @param {object}   opts        - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_EVENTS_API = (iteratee, events, name, callback, opts) =>\n{\n   let i = 0, names;\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = Object.keys(name); i < names.length; i++)\n      {\n         events = s_EVENTS_API(iteratee, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && s_EVENT_SPLITTER.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(s_EVENT_SPLITTER); i < names.length; i++)\n      {\n         events = iteratee(events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n   }\n   return events;\n};\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee       - Trigger API\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n * @param {Array<*>} events         - Array of stored event callback data.\n * @param {string}   name           - Event name(s)\n * @param {Function} callback       - callback\n * @param {object}   opts           - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_EVENTS_TARGET_API = (iteratee, iterateeTarget, events, name, callback, opts) =>\n{\n   let i = 0, names;\n\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = Object.keys(name); i < names.length; i++)\n      {\n         events = s_EVENTS_API(iteratee, iterateeTarget, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && s_EVENT_SPLITTER.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(s_EVENT_SPLITTER); i < names.length; i++)\n      {\n         events = iteratee(iterateeTarget, events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(iterateeTarget, events, name, callback, opts);\n   }\n\n   return events;\n};\n\n/**\n * Guard the `listening` argument from the public API.\n *\n * @param {Eventbus}   obj    - The Eventbus instance\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   context  - Event context\n * @param {object.<{obj: object, objId: string, id: string, listeningTo: object, count: number}>} listening -\n *                              Listening object\n * @returns {Eventbus} The Eventbus instance.\n */\nconst s_INTERNAL_ON = (obj, name, callback, context, listening) =>\n{\n   obj._events = s_EVENTS_API(s_ON_API, obj._events || {}, name, callback, { context, ctx: obj, listening });\n\n   if (listening)\n   {\n      const listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n   }\n\n   return obj;\n};\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   options  - Optional parameters\n * @returns {Eventbus} The Eventbus object.\n */\nconst s_OFF_API = (events, name, callback, options) =>\n{\n   if (!events) { return; }\n\n   let i = 0, listening;\n   const context = options.context, listeners = options.listeners;\n\n   // Delete all events listeners and \"drop\" events.\n   if (!name && !callback && !context && listeners)\n   {\n      const ids = Object.keys(listeners);\n      for (; i < ids.length; i++)\n      {\n         listening = listeners[ids[i]];\n         delete listeners[listening.id];\n         delete listening.listeningTo[listening.objId];\n      }\n      return;\n   }\n\n   const names = name ? [name] : Object.keys(events);\n   for (; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      /* c8 ignore next */\n      if (!handlers) { break; }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n         if (\n          callback && callback !== handler.callback &&\n          callback !== handler.callback._callback ||\n          context && context !== handler.context\n         )\n         {\n            remaining.push(handler);\n         }\n         else\n         {\n            listening = handler.listening;\n            if (listening && --listening.count === 0)\n            {\n               delete listeners[listening.id];\n               delete listening.listeningTo[listening.objId];\n            }\n         }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   options  - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_ON_API = (events, name, callback, options) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = options.context, ctx = options.ctx, listening = options.listening;\n\n      if (listening) { listening.count++; }\n\n      handlers.push({ callback, context, ctx: context || ctx, listening });\n   }\n   return events;\n};\n\n/**\n * Reduces the event callbacks into a map of `{event: onceWrapper}`. `offer` unbinds the `onceWrapper` after\n * it has been called.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} map - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {Function} offer    - Function to invoke after event has been triggered once; `off()`\n * @returns {*} The Events object.\n */\nconst s_ONCE_MAP = function(map, name, callback, offer)\n{\n   if (callback)\n   {\n      const once = map[name] = () =>\n      {\n         offer(name, once);\n         return callback.apply(this, arguments);\n      };\n\n      once._callback = callback;\n   }\n   return map;\n};\n\n/**\n * Handles triggering the appropriate event callbacks.\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n * @param {Array<*>} objEvents      - Array of stored event callback data.\n * @param {string}   name           - Event name(s)\n * @param {Function} cb             - callback\n * @param {Array<*>} args           - Arguments supplied to a trigger method.\n * @returns {*} The results from the triggered event.\n */\nconst s_TRIGGER_API = (iterateeTarget, objEvents, name, cb, args) =>\n{\n   let result;\n\n   if (objEvents)\n   {\n      const events = objEvents[name];\n      let allEvents = objEvents.all;\n      if (events && allEvents) { allEvents = allEvents.slice(); }\n      if (events) { result = iterateeTarget(events, args); }\n      if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\n   }\n\n   return result;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments).\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>}  events - events array\n * @param {Array<*>} args - event argument array\n */\nconst s_TRIGGER_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\n         return;\n      case 1:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\n         return;\n      case 2:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\n         return;\n      case 3:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\n         return;\n      default:\n         while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\n         return;\n   }\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method uses ES6 Promises and adds\n * any returned results to an array which is added to a Promise.all construction which passes back a Promise which\n * waits until all Promises complete. Any target invoked may return a Promise or any result. This is very useful to\n * use for any asynchronous operations.\n *\n * @param {Array<*>} events   -  Array of stored event callback data.\n * @param {Array<*>} args     -  Arguments supplied to `triggerAsync`.\n * @returns {Promise} A Promise of the results from the triggered event.\n */\nconst s_TRIGGER_ASYNC_EVENTS = async (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   try\n   {\n      switch (args.length)\n      {\n         case 0:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 1:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 2:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 3:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         default:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n      }\n   }\n   catch (error) // will catch synchronous event binding errors and reject again async errors.\n   {\n      return Promise.reject(error);\n   }\n\n   // If there are multiple results then use Promise.all otherwise Promise.resolve.\n   return results.length > 1 ? Promise.all(results).then((values) =>\n   {\n      const filtered = values.filter((entry) => entry !== void 0);\n      switch (filtered.length)\n      {\n         case 0: return void 0;\n         case 1: return filtered[0];\n         default: return filtered;\n      }\n   }) : results.length === 1 ? Promise.resolve(results[0]) : Promise.resolve();\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method synchronously passes back a\n * single value or an array with all results returned by any invoked targets.\n *\n * @param {Array<*>} events   -  Array of stored event callback data.\n * @param {Array<*>} args     -  Arguments supplied to `triggerSync`.\n * @returns {*|Array<*>} The results from the triggered event.\n */\nconst s_TRIGGER_SYNC_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // Return the results array if there are more than one or just a single result.\n   return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * Generate a unique integer ID (unique within the entire client session).\n *\n * @type {number} - unique ID counter.\n */\nlet idCounter = 0;\n\n/**\n * Creates a new unique ID with a given prefix\n *\n * @param {string}   prefix - An optional prefix to add to unique ID.\n * @returns {string} A new unique ID with a given prefix.\n */\nconst s_UNIQUE_ID = (prefix = '') =>\n{\n   const id = `${++idCounter}`;\n   return prefix ? `${prefix}${id}` : id;\n};\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n *\n * Support for typhonjs-plugin-manager is enabled.\n */\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (expected.indexOf(dataArray[cntr]) < 0)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && expected.indexOf(dataEntry) < 0))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && skipFreezeKeys.indexOf(key) === -1) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","import { EventbusProxy } from '@typhonjs-plugin/eventbus';\n\n/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nexport default class PluginEntry\n{\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {PluginData}  data -  describing the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {EventbusProxy}  eventbusProxy - An EventProxy associated with the plugin wrapping the plugin manager\n    * eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      /**\n       * Data describing the plugin, manager, and optional module data.\n       *\n       * @type {PluginData}\n       * @private\n       */\n      this._data = data;\n\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = true;\n\n      /**\n       * The plugin name.\n       *\n       * @type {string}\n       * @private\n       */\n      this._name = name;\n\n      /**\n       * The loaded plugin instance.\n       *\n       * @type {object}\n       * @private\n       */\n      this._instance = instance;\n\n      /**\n       * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n       *\n       * @type {EventbusProxy}\n       * @private\n       */\n      this._eventbusProxy = eventbusProxy;\n   }\n\n   /**\n    * Provides a convenience method to escape file paths.\n    *\n    * @param {string}   value - A string to escape.\n    *\n    * @returns {string} An escaped string.\n    */\n   static escape(value)\n   {\n      if (typeof value !== 'string') { throw new TypeError(`'value' is not a string.`); }\n\n      // Remove any leading relative directory paths.\n      let escaped = value.replace(/^(\\.\\.|\\.)/, '');\n\n      // Escape any forward / reverse slashes for RegExp creation.\n      escaped = escaped.replace(/[\\\\]/g, '\\\\');\n      escaped = escaped.replace(/[/]/g, '\\\\/');\n\n      return escaped;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {PluginData} The associated PluginData.\n    */\n   get data() { return this._data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this._enabled; }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = enabled;\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this._eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this._instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this._name; }\n}\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n","import { EventbusProxy } from '@typhonjs-plugin/eventbus';\n\n/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link AbstractPluginManager#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nexport default class PluginEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied.\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = void 0;\n   }\n}\n","/**\n * @typedef {object} PluginConfig\n *\n * @property {string}      name - Defines the name of the plugin; if no `target` entry is present the name\n *                                doubles as the target (please see target).\n *\n * @property {string|URL}  [target] - Defines the target Node module to load or defines a local file (full\n *                                    path or relative to current working directory to load. Target may also be a file\n *                                    URL / string or in the browser a web URL.\n *\n * @property {string}      [instance] - Defines an existing object instance to use as the plugin.\n *\n * @property {object}      [options] - Defines an object of options for the plugin.\n */\n\n/**\n * Performs validation of a PluginConfig.\n *\n * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nexport default function isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n","import Eventbus                     from '@typhonjs-plugin/eventbus';\nimport { EventbusProxy }            from '@typhonjs-plugin/eventbus';\nimport { deepFreeze, isIterable }   from '@typhonjs-utils/object';\n\nimport PluginEntry                  from './PluginEntry.js';\nimport PluginEvent                  from './PluginEvent.js';\n\nimport isValidConfig                from './isValidConfig.js';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * It isn't necessary to use an eventbus associated with the plugin manager though invocation then relies on invoking\n * methods directly with the plugin manager instance.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link AbstractPluginManager#add}\n *\n * `plugins:async:add:all` - {@link AbstractPluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link AbstractPluginManager#destroy}\n *\n * `plugins:async:invoke` - {@link AbstractPluginManager#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link AbstractPluginManager#invokeAsyncEvent}\n *\n * `plugins:async:remove` - {@link AbstractPluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link AbstractPluginManager#removeAll}\n *\n * `plugins:create:eventbus:proxy` - {@link AbstractPluginManager#createEventbusProxy}\n *\n * `plugins:get:enabled` - {@link AbstractPluginManager#getPluginsEnabled}\n *\n * `plugins:get:options` - {@link AbstractPluginManager#getOptions}\n *\n * `plugins:has:plugin` - {@link AbstractPluginManager#hasPlugin}\n *\n * `plugins:invoke` - {@link AbstractPluginManager#invoke}\n *\n * `plugins:is:valid:config` - {@link AbstractPluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link AbstractPluginManager#setPluginsEnabled}\n *\n * `plugins:set:options` - {@link AbstractPluginManager#setOptions}\n *\n * `plugins:sync:invoke` - {@link AbstractPluginManager#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link AbstractPluginManager#invokeSyncEvent}\n *\n * Automatically when a plugin is loaded and unloaded respective callbacks `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules in Node and the browser and CJS on Node the plugin manager is by nature asynchronous for\n * the\n * core methods of adding / removing plugins and destroying the manager. The lifecycle methods `onPluginLoad` and\n * `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * If eventbus functionality is enabled it is important especially if using a process / global level eventbus such as\n * `@typhonjs-plugin/eventbus/instances` to call {@link AbstractPluginManager#destroy} to clean up all plugin eventbus\n * resources and the plugin manager event bindings; this is primarily a testing concern.\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n *\n * // One can also indirectly invoke any method of the plugin via:\n * eventbus.triggerSync('plugins:invoke:sync:event', 'aCoolMethod'); // Any plugin with a method named `aCoolMethod` is\n *    invoked. eventbus.triggerSync('plugins:invoke:sync:event', 'aCoolMethod', {}, {},\n *    'an-npm-plugin-enabled-module'); // specific invocation.\n *\n * // The 3rd parameter will make a copy of the hash and the 4th defines a pass through object hash sending a single\n * // event / object hash to the invoked method.\n *\n * // -----------------------\n *\n * // Given that `@typhonjs-plugin/eventbus/instances` defines a global / process level eventbus you can import it in\n *    an\n * entirely different file or even NPM module and invoke methods of loaded plugins like this:\n *\n * import eventbus from '@typhonjs-plugin/eventbus/instances';\n *\n * eventbus.triggerSync('plugins:invoke', 'aCoolMethod'); // Any plugin with a method named `aCoolMethod` is invoked.\n *\n * assert(eventbus.triggerSync('cool:event') === true);\n *\n * eventbus.trigger('plugins:remove', 'an-npm-plugin-enabled-module'); // Removes the plugin and unregisters events.\n *\n * assert(eventbus.triggerSync('cool:event') === true); // Will now fail!\n *\n * // In this case though when using the global eventbus be mindful to always call `pluginManager.destroy()` in the\n *    main\n * // thread of execution scope to remove all plugins and the plugin manager event bindings!\n */\nexport default class AbstractPluginManager\n{\n   /**\n    * Instantiates AbstractPluginManager\n    *\n    * @param {object}   [options] - Provides various configuration options:\n    *\n    * @param {Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus' used as the plugin\n    * eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\n    *                                                     eventbus.\n    *\n    * @param {boolean}  [options.throwNoMethod=false] - If true then when a method fails to be invoked by any plugin\n    *                                                   an exception will be thrown.\n    *\n    * @param {boolean}  [options.throwNoPlugin=false] - If true then when no plugin is matched to be invoked an\n    *                                                   exception will be thrown.\n    *\n    * @param {PluginSupportImpl|PluginSupportImpl[]}  [options.PluginSupport] - Optional classes to pass in which\n    *                                                 extends the plugin manager. A default implementation is available:\n    *                                                 {@link PluginSupport}\n    */\n   constructor(options = {})\n   {\n      if (typeof options !== 'object') { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\n       !Array.isArray(options.PluginSupport))\n      {\n         throw new TypeError(\n          `'options.PluginSupport' must be a constructor function or array of such matching PluginSupportImpl.`);\n      }\n\n      /**\n       * Stores the plugins by name with an associated PluginEntry.\n       *\n       * @type {Map<string, PluginEntry>}\n       * @private\n       */\n      this._pluginMap = new Map();\n\n      /**\n       * Stores any associated eventbus.\n       *\n       * @type {Eventbus}\n       * @protected\n       */\n      this._eventbus = null;\n\n      /**\n       * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n       *\n       * @type {EventbusProxy[]}\n       * @private\n       */\n      this._eventbusProxies = [];\n\n      /**\n       * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\n       *\n       * @type {PluginSupportImpl[]}\n       * @private\n       */\n      this._pluginSupport = [];\n\n      if (Array.isArray(options.PluginSupport))\n      {\n         for (const PluginSupport of options.PluginSupport)\n         {\n            this._pluginSupport.push(new PluginSupport(this));\n         }\n      }\n      else if (options.PluginSupport !== void 0)\n      {\n         this._pluginSupport.push(new options.PluginSupport(this));\n      }\n\n      /**\n       * Defines options for throwing exceptions. Turned off by default.\n       *\n       * @type {PluginManagerOptions}\n       * @private\n       */\n      this._options =\n      {\n         pluginsEnabled: true,\n         noEventAdd: false,\n         noEventDestroy: false,\n         noEventOptions: true,\n         noEventRemoval: false,\n         throwNoMethod: false,\n         throwNoPlugin: false\n      };\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n\n      this.setOptions(options);\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<PluginData|undefined>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(`'pluginConfig.name' is not a string for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(`'pluginConfig.options' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof moduleData !== 'undefined' && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this._pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name}.`);\n      }\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         // Defer to child class to load module in Node or the browser.\n         const result = await this._loadModule(target);\n\n         instance = result.instance;\n         type = result.type;\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`,\n            target,\n            targetEscaped: PluginEntry.escape(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['eventPrepend', 'scopedName']);\n\n      const eventbusProxy = this._eventbus !== null && typeof this._eventbus !== 'undefined' ?\n       new EventbusProxy(this._eventbus) : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this._pluginMap.set(pluginConfig.name, entry);\n\n      // Invoke private module method which allows skipping optional error checking.\n      await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, pluginConfig.name, this._pluginMap, this._options, false);\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this._eventbus)\n      {\n         await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {PluginConfig[]} pluginConfigs - An array of plugin config object hash entries.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all loaded plugins.\n    */\n   async addAll(pluginConfigs = [], moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!Array.isArray(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not an array.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData|undefined>} - Operation success.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig[]} pluginConfigs - An array of plugin config object hash entries.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all loaded plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventAdd) { return this.addAll(pluginConfigs, moduleData); }\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this._eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (!(this._eventbus instanceof Eventbus))\n      {\n         throw new ReferenceError('No eventbus assigned to plugin manager.');\n      }\n\n      const eventbusProxy = new EventbusProxy(this._eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this._eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      await this.removeAll();\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this._eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this._eventbusProxies = [];\n\n      if (this._eventbus !== null && typeof this._eventbus !== 'undefined')\n      {\n         this._eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke`, this.invokeAsync, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${this._eventPrepend}:get:enabled`, this.getPluginsEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${this._eventPrepend}:invoke`, this.invoke, this);\n         this._eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${this._eventPrepend}:set:enabled`, this.setPluginsEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke`, this.invokeSync, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      for (const pluginSupport of this._pluginSupport)\n      {\n         await pluginSupport.destroy({ eventbus: this._eventbus, eventPrepend: this._eventPrepend });\n      }\n\n      this._pluginSupport = [];\n      this._pluginMap = null;\n      this._eventbus = null;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise} The promise returned from `destroy` or immediate resolution.\n    */\n   async _destroyEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventDestroy) { return this.destroy(); }\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this._pluginMap === null || this._pluginMap === void 0;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {Eventbus|null} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this._eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this._options));\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {undefined|object}  [options] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>}   [options.pluginNames] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|Array<{pluginName: string, enabled: boolean}>} - Enabled state for single plugin or array of\n    *                                                                    results for multiple plugins.\n    */\n   getPluginsEnabled({ pluginNames = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginNames !== 'string' && !isIterable(pluginNames))\n      {\n         throw new TypeError(`'pluginNames' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof pluginNames === 'string')\n      {\n         const entry = this._pluginMap.get(pluginNames);\n         return entry instanceof PluginEntry && entry.enabled;\n      }\n\n      const results = [];\n\n      // If there are plugin names specified then limit returned results to just them.\n      if (pluginNames.length)\n      {\n         for (const pluginName of pluginNames)\n         {\n            const entry = this._pluginMap.get(pluginName);\n            const loaded = entry instanceof PluginEntry;\n            results.push({ pluginName, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n      else // Return all plugins enabled state.\n      {\n         for (const [pluginName, entry] of this._pluginMap.entries())\n         {\n            const loaded = entry instanceof PluginEntry;\n            results.push({ pluginName, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name.\n    *\n    * @param {string}   pluginName - Plugin name to test.\n    *\n    * @returns {boolean} - True if a plugin exists.\n    */\n   hasPlugin(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      return this._pluginMap.has(pluginName);\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given methodName..\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    */\n   invoke(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return; }\n\n      if (typeof nameOrList === 'string')\n      {\n         const plugin = this._pluginMap.get(nameOrList);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[methodName] === 'function')\n            {\n               Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of nameOrList)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n      }\n   }\n\n   /**\n    * This dispatch method uses ES6 Promises and adds any returned results to an array which is added to a Promise.all\n    * construction which passes back a Promise which waits until all Promises complete. Any target invoked may return a\n    * Promise or any result. This is very useful to use for any asynchronous operations.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {Promise<*|Array<*>>} A Promise with any returned results.\n    */\n   invokeAsync(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      try\n      {\n         if (typeof nameOrList === 'string')\n         {\n            const plugin = this._pluginMap.get(nameOrList);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                   plugin.instance[methodName](args);\n\n                  // If we received a valid result return immediately.\n                  if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n         else\n         {\n            for (const name of nameOrList)\n            {\n               const plugin = this._pluginMap.get(name);\n\n               if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n               {\n                  hasPlugin = true;\n\n                  if (typeof plugin.instance[methodName] === 'function')\n                  {\n                     result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                      plugin.instance[methodName](args);\n\n                     // If we received a valid result return immediately.\n                     if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                     hasMethod = true;\n                  }\n               }\n            }\n         }\n\n         if (this._options.throwNoPlugin && !hasPlugin)\n         {\n            return Promise.reject(new Error(`PluginManager failed to find any target plugins.`));\n         }\n\n         if (this._options.throwNoMethod && !hasMethod)\n         {\n            return Promise.reject(new Error(`PluginManager failed to invoke '${methodName}'.`));\n         }\n      }\n      catch (error)\n      {\n         return Promise.reject(error);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results) : Promise.resolve(result);\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {object}            [copyProps={}] - plugin event object.\n    *\n    * @param {object}            [passthruProps={}] - if true, event has plugin option.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {Promise<PluginEvent>} A PluginEvent representing the invocation results.\n    */\n   invokeAsyncEvent(methodName, copyProps = {}, passthruProps = {}, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return Promise.resolve(); }\n\n      // Invokes the private internal async events method with optional error checking enabled.\n      return s_INVOKE_ASYNC_EVENTS(methodName, copyProps, passthruProps, nameOrList, this._pluginMap, this._options);\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {*|Array<*>} An array of results.\n    */\n   invokeSync(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      if (typeof nameOrList === 'string')\n      {\n         const plugin = this._pluginMap.get(nameOrList);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[methodName] === 'function')\n            {\n               result = Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n               // If we received a valid result return immediately.\n               if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of nameOrList)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                   plugin.instance[methodName](args);\n\n                  // If we received a valid result return immediately.\n                  if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {object}            [copyProps={}] - plugin event object.\n    *\n    * @param {object}            [passthruProps={}] - if true, event has plugin option.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {PluginEvent|undefined} A plugin event with invocation results.\n    */\n   invokeSyncEvent(methodName, copyProps = {}, passthruProps = {}, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return void 0; }\n\n      // Invokes the private internal sync events method with optional error checking enabled.\n      return s_INVOKE_SYNC_EVENTS(methodName, copyProps, passthruProps, nameOrList, this._pluginMap, this._options);\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Child implementations provide platform specific module loading by overriding this method.\n    *\n    * @param {string|URL}   moduleOrPath - A module name, file path, or URL.\n    *\n    * @returns {Promise<*>} Loaded module.\n    * @private\n    */\n   async _loadModule(moduleOrPath)  // eslint-disable-line no-unused-vars\n   {\n   }\n\n   /**\n    * Removes a plugin by name after unloading it and clearing any event bindings automatically.\n    *\n    * @param {string}   pluginName - The plugin name to remove.\n    *\n    * @returns {Promise<boolean>} - Operation success.\n    */\n   async remove(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      const entry = this._pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, pluginName, this._pluginMap, this._options, false);\n\n         // Automatically remove any potential reference to a stored event proxy instance.\n         try\n         {\n            entry.instance._eventbus = void 0;\n         }\n         catch (err) { /* nop */ }\n\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n         this._pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         if (this._eventbus)\n         {\n            await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n             JSON.parse(JSON.stringify(entry.data)));\n         }\n\n         return true;\n      }\n\n      return false;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<Array<{plugin: string, result: boolean}>>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      const values = [];\n\n      for (const pluginName of this._pluginMap.keys())\n      {\n         const result = await this.remove(pluginName);\n         values.push({ plugin: pluginName, result });\n      }\n\n      this._pluginMap.clear();\n\n      return values;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {string}   pluginName - The plugin name to remove.\n    *\n    * @returns {Promise<boolean>} - Operation success.\n    * @private\n    */\n   async _removeEventbus(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventRemoval ? this.remove(pluginName) : false;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<Array<{plugin: string, result: boolean}>>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventRemoval) { return this.removeAll(); }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.eventbus - The new eventbus to associate.\n    *\n    * @param {string}     [options.eventPrepend='plugins'] - An optional string to prepend to all of the event\n    *                                                        binding targets.\n    *\n    * @returns {Promise<AbstractPluginManager>} This plugin manager.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!(eventbus instanceof Eventbus)) { throw new TypeError(`'eventbus' is not an 'Eventbus'.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a 'string'.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this._eventbus) { return this; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this._pluginMap.size > 0)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            try\n            {\n               entry.instance._eventbus = void 0;\n            }\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.plugin.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n         }\n\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Invoke `typhonjs:plugin:manager:eventbus:changed` allowing external code to react to plugin\n            // changing eventbus.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:eventbus:changed`, Object.assign({\n                  oldEventbus: this._eventbus,\n                  oldManagerEventPrepend: oldPrepend,\n                  oldScopedName: `${oldPrepend}:${entry.name}`,\n                  newEventbus: eventbus,\n                  newManagerEventPrepend: eventPrepend,\n                  newScopedName: `${eventPrepend}:${entry.name}`\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      }\n\n      if (this._eventbus !== null)\n      {\n         this._eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         this._eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${oldPrepend}:get:enabled`, this.getPluginsEnabled, this);\n         this._eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\n         this._eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${oldPrepend}:set:enabled`, this.setPluginsEnabled, this);\n         this._eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n\n         // Invoke `typhonjs:plugin:manager:eventbus:removed` allowing external code to react to eventbus removal.\n         this._eventbus.trigger(`typhonjs:plugin:manager:eventbus:removed`,\n         {\n            oldEventbus: this._eventbus,\n            oldEventPrepend: oldPrepend,\n            newEventbus: eventbus,\n            newEventPrepend: eventPrepend\n         });\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this);\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this);\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n      eventbus.on(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\n      eventbus.on(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this);\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n      eventbus.on(`${eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getPluginsEnabled, this);\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this);\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugin, this);\n      eventbus.on(`${eventPrepend}:invoke`, this.invoke, this);\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this);\n      eventbus.on(`${eventPrepend}:set:enabled`, this.setPluginsEnabled, this);\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      eventbus.on(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\n      eventbus.on(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n\n      // Invoke `typhonjs:plugin:manager:eventbus:set` allowing external code to react to eventbus set.\n      eventbus.trigger('typhonjs:plugin:manager:eventbus:set',\n      {\n         oldEventbus: this._eventbus,\n         oldEventPrepend: oldPrepend,\n         newEventbus: eventbus,\n         newEventPrepend: eventPrepend\n      });\n\n      for (const pluginSupport of this._pluginSupport)\n      {\n         pluginSupport.setEventbus({\n            oldEventbus: this._eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      this._eventbus = eventbus;\n\n      return this;\n   }\n\n   /**\n    * Set optional parameters. All parameters are off by default.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof options !== 'object') { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.pluginsEnabled === 'boolean') { this._options.pluginsEnabled = options.pluginsEnabled; }\n      if (typeof options.noEventAdd === 'boolean') { this._options.noEventAdd = options.noEventAdd; }\n      if (typeof options.noEventDestroy === 'boolean') { this._options.noEventDestroy = options.noEventDestroy; }\n      if (typeof options.noEventOptions === 'boolean') { this._options.noEventOptions = options.noEventOptions; }\n      if (typeof options.noEventRemoval === 'boolean') { this._options.noEventRemoval = options.noEventRemoval; }\n      if (typeof options.throwNoMethod === 'boolean') { this._options.throwNoMethod = options.throwNoMethod; }\n      if (typeof options.throwNoPlugin === 'boolean') { this._options.throwNoPlugin = options.throwNoPlugin; }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventOptions` is\n    * enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventOptions) { this.setOptions(options); }\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            options - Options object.\n    *\n    * @param {boolean}           options.enabled - The enabled state.\n    *\n    * @param {string|string[]}   [options.pluginNames] - Plugin name or list of names to set state.\n    */\n   setPluginsEnabled({ enabled, pluginNames = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginNames !== 'string' && !Array.isArray(pluginNames))\n      {\n         throw new TypeError(`'pluginNames' is not a string or array.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry instanceof PluginEntry)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof pluginNames === 'string')\n      {\n         setEntryEnabled(this._pluginMap.get(pluginNames));\n      }\n\n      // If there are plugin names specified then limit setting enabled state just them.\n      if (pluginNames.length)\n      {\n         for (const pluginName of pluginNames)\n         {\n            setEntryEnabled(this._pluginMap.get(pluginName));\n         }\n      }\n      else // Set all plugins enabled state.\n      {\n         for (const pluginEntry of this._pluginMap.values())\n         {\n            setEntryEnabled(pluginEntry);\n         }\n      }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {string}                     methodName - Method name to invoke.\n *\n * @param {object}                     copyProps - plugin event object.\n *\n * @param {object}                     passthruProps - if true, event has plugin option.\n *\n * @param {string|string[]}            nameOrList - An optional plugin name or array / iterable of plugin names to\n *                                                  invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap - Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {Promise<PluginEvent>} A PluginEvent representing the invocation results.\n */\nconst s_INVOKE_ASYNC_EVENTS = async (methodName, copyProps = {}, passthruProps = {}, nameOrList, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n    typeof nameOrList[Symbol.iterator] !== 'function')\n   {\n      throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof nameOrList === 'string')\n   {\n      const entry = pluginMap.get(nameOrList);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[methodName] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[methodName](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of nameOrList)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[methodName] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[methodName](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n};\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {string}                     methodName - Method name to invoke.\n *\n * @param {object}                     copyProps - plugin event object.\n *\n * @param {object}                     passthruProps - if true, event has plugin option.\n *\n * @param {string|string[]}            nameOrList - An optional plugin name or array / iterable of plugin names to\n *                                                  invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap - Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {PluginEvent} A PluginEvent representing the invocation results.\n */\nconst s_INVOKE_SYNC_EVENTS = (methodName, copyProps = {}, passthruProps = {}, nameOrList, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n    typeof nameOrList[Symbol.iterator] !== 'function')\n   {\n      throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   if (typeof nameOrList === 'string')\n   {\n      const entry = pluginMap.get(nameOrList);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[methodName] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[methodName](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of nameOrList)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[methodName] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[methodName](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n};\n\n/**\n * @typedef {object} PluginConfig\n *\n * @property {string}      name - Defines the name of the plugin; if no `target` entry is present the name\n *                                doubles as the target (please see target).\n *\n * @property {string|URL}  [target] - Defines the target Node module to load or defines a local file (full\n *                                    path or relative to current working directory to load. Target may also be a file\n *                                    URL / string or in the browser a web URL.\n *\n * @property {string}      [instance] - Defines an existing object instance to use as the plugin.\n *\n * @property {object}      [options] - Defines an object of options for the plugin.\n */\n\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n\n/**\n * @typedef {object} PluginManagerOptions\n *\n * @property {boolean}   [pluginsEnabled] - If false all plugins are disabled.\n *\n * @property {boolean}   [noEventAdd] - If true this prevents plugins from being added by `plugins:add` and\n *                                      `plugins:add:all` events forcing direct method invocation for addition.\n *\n * @property {boolean}   [noEventDestroy] - If true this prevents the plugin manager from being destroyed by\n *                                          `plugins:destroy:manager` forcing direct method invocation for destruction.\n *\n * @property {boolean}   [noEventOptions] - If true this prevents setting options for the plugin manager by\n *                                          `plugins:destroy:manager` forcing direct method invocation for destruction.\n *\n * @property {boolean}   [noEventRemoval] - If true this prevents plugins from being removed by `plugins:remove` and\n *                                          `plugins:remove:all` events forcing direct method invocation for removal.\n *\n * @property {boolean}   [throwNoMethod] - If true then when a method fails to be invoked by any plugin an exception\n *                                         will be thrown.\n *\n * @property {boolean}   [throwNoPlugin] - If true then when no plugin is matched to be invoked an exception will be\n *                                         thrown.\n */\n\n// TODO THIS NEEDS REFINEMENT\n/**\n * Interface for PluginSupport implementation classes.\n *\n * @interface PluginSupportImpl\n */\n\n/**\n * A method to invoke when the plugin manager is destroyed.\n *\n * @function\n * @async\n * @name PluginSupportImpl#destroy\n */\n\n/**\n * A method to invoke when the plugin manager eventbus is set.\n *\n * @function\n * @name PluginSupportImpl#setEventbus\n */\n","import fs                     from 'fs';\nimport module                 from 'module';\nimport path                   from 'path';\nimport url                    from 'url';\n\nimport { getPackageType }     from '@typhonjs-utils/package-json';\n\nimport AbstractPluginManager  from '../AbstractPluginManager.js';\n\nconst requireMod = module.createRequire(import.meta.url);\n\nexport default class PluginManager extends AbstractPluginManager\n{\n   async _loadModule(moduleOrPath)\n   {\n      // Convert to file path if an URL or file URL string.\n      const { filepath, isESM, type, loadPath } = resolvePath(moduleOrPath);\n\n      if (!fs.existsSync(filepath))\n      {\n         throw new Error(`@typhonjs-plugin/manager could not load:\\n${loadPath}`);\n      }\n\n      const module = isESM ? await import(url.pathToFileURL(filepath)) : requireMod(filepath);\n\n      // Please note that a plugin or other logger must be setup on the associated eventbus.\n      if (this._eventbus !== null && typeof this._eventbus !== 'undefined')\n      {\n         this._eventbus.trigger('log:debug', `@typhonjs-plugin/manager - ${isESM ? 'import' : 'require'}: ${loadPath}`);\n      }\n\n      let instance;\n\n      // If the module has a named export for `onPluginLoad` then take the module.\n      if (typeof module.onPluginLoad === 'function')\n      {\n         instance = module;\n      }\n      // Then potentially resolve any default export / static class.\n      else if (module.default)\n      {\n         instance = module.default;\n      }\n      // Finally resolve as just the module.\n      else\n      {\n         instance = module;\n      }\n\n      return { instance, type };\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * For `.js` files uses `getPackageType` to determine if `type` is set to `module` in associated `package.json`. If\n * the `modulePath` provided ends in `.mjs` it is assumed to be ESM.\n *\n * @param {string} filepath - File path to load.\n *\n * @returns {boolean} If the filepath is an ES Module.\n */\nfunction isPathModule(filepath)\n{\n   const extension = path.extname(filepath).toLowerCase();\n\n   switch (extension)\n   {\n      case '.js':\n         return getPackageType({ filepath }) === 'module';\n\n      case '.mjs':\n         return true;\n\n      default:\n         return false;\n   }\n}\n\n/**\n * Resolves a modulePath first by `require.resolve` to allow Node to resolve an actual module. If this fails then\n * the `moduleOrPath` is resolved as a file path.\n *\n * @param {string} moduleOrPath - A module name or file path to load.\n *\n * @returns {{filepath: string, isESM: boolean, type: string, loadPath: string}} An object including file path and\n *                                                                               whether the module is ESM.\n */\nfunction resolvePath(moduleOrPath)\n{\n   let filepath, isESM, type = 'module';\n\n   let loadPath = moduleOrPath;\n\n   try\n   {\n      filepath = requireMod.resolve(moduleOrPath);\n      isESM = isPathModule(filepath);\n   }\n   catch (error)\n   {\n      if (moduleOrPath instanceof URL || moduleOrPath.startsWith('file:'))\n      {\n         filepath = url.fileURLToPath(moduleOrPath);\n         type = 'url';\n\n         loadPath = moduleOrPath instanceof URL ? moduleOrPath.toString() : moduleOrPath;\n      }\n      else\n      {\n         filepath = path.resolve(moduleOrPath);\n         type = 'path';\n\n         loadPath = filepath;\n      }\n\n      isESM = isPathModule(filepath);\n   }\n\n   type = `${isESM ? 'import' : 'require'}-${type}`;\n\n   return { filepath, isESM, type, loadPath };\n}\n","import fs            from 'fs';\nimport path          from 'path';\n\nimport TraversalData from './TraversalData.js';\n\n/**\n * @typedef {object} PackageObjData\n *\n * @property {object|undefined}  packageObj - Loaded `package.json` object.\n * @property {string|undefined}  packagePath - Path of loaded `package.json` object.\n * @property {Error|undefined}   error - An error instance.\n */\n\n/**\n * Attempts to traverse from `filepath` to `basepath` attempting to load `package.json` along with the package path.\n *\n * Note: If malformed data is presented the result will undefined along with a possible error included in the returned\n * object / `PackageObjData`. Also note that a file may be specified that does not exist and the directory will be\n * resolved. If that directory exists then resolution will continue.\n *\n * @param {object}      options - An object.\n *\n * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n *\n * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n *                                           provided.\n *\n * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes back a\n *                                           truthy value that stops or continues the traversal.\n *\n * @returns {PackageObjData} Loaded package.json / path or potentially an error.\n */\nexport default function getPackagePath(options)\n{\n   const isTraversalData = options instanceof TraversalData;\n\n   const data = isTraversalData ? options : new TraversalData();\n\n   try\n   {\n      if (!isTraversalData)\n      {\n         TraversalData.parse(data, options);\n      }\n\n      const context = {};\n\n      do\n      {\n         data.packagePath = path.resolve(data.currentDirectory, 'package.json');\n\n         // If there is a `package.json` path attempt to load it.\n         if (fs.existsSync(data.packagePath))\n         {\n            data.packageObj = JSON.parse(fs.readFileSync(data.packagePath, 'utf-8'));\n\n            // If it is a valid object then process it.\n            if (typeof data.packageObj === 'object')\n            {\n               // If there is a provided callback then invoke it with the traversal data and if a truthy value is\n               // returned then return the data; otherwise immediately return the loaded `package.json` object & path.\n               if (typeof data._callback === 'function')\n               {\n                  if (data._callback.call(context, data))\n                  {\n                     return { packageObj: data.packageObj, packagePath: data.packagePath };\n                  }\n               }\n               else\n               {\n                  return { packageObj: data.packageObj, packagePath: data.packagePath };\n               }\n\n               data.cntr++;\n            }\n         }\n\n         // If the current directory equals the base directory then stop traversal.\n         if (data.currentDirectory === data.baseDirectory) { break; }\n\n      // If the current directory equals the root path then stop traversal.\n      } while ((data.currentDirectory = path.dirname(data.currentDirectory)) !== data.rootPath);\n   }\n   catch (error)\n   {\n      return { packagePath: data.packagePath, error };\n   }\n\n   return { error: new Error(`No 'package.json' located`) };\n}\n","import Eventbus      from '@typhonjs-plugin/eventbus';\n\nimport PluginEntry   from './PluginEntry.js';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * It isn't necessary to use an eventbus associated with the plugin manager though invocation then relies on invoking\n * methods directly with the plugin manager instance.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:get:all:plugin:data` - {@link AbstractPluginManager#getAllPluginData}\n *\n * `plugins:get:method:names` - {@link AbstractPluginManager#getMethodNames}\n *\n * `plugins:get:plugin:data` - {@link AbstractPluginManager#getPluginData}\n *\n * `plugins:get:plugin:event:names` - {@link AbstractPluginManager#getPluginEventNames}\n *\n * `plugins:get:plugin:method:names` - {@link AbstractPluginManager#getPluginMethodNames}\n *\n * `plugins:get:plugin:names` - {@link AbstractPluginManager#getPluginNames}\n *\n * `plugins:get:plugin:options` - {@link AbstractPluginManager#getPluginOptions}\n *\n * `plugins:get:plugins:by:event:name` - {@link AbstractPluginManager#getPluginsByEventName}\n *\n * `plugins:get:plugins:event:names` - {@link AbstractPluginManager#getPluginsEventNames}\n *\n * `plugins:has:method` - {@link AbstractPluginManager#hasMethod}\n *\n * `plugins:has:plugin:method` - {@link AbstractPluginManager#hasPluginMethod}\n *\n * @example\n *\n * @implements {PluginSupportImpl}\n */\nexport default class PluginSupport\n{\n   constructor(pluginManager)\n   {\n      this._pluginManager = pluginManager;\n   }\n\n   get isDestroyed()\n   {\n      return this._pluginManager === null || this._pluginManager === void 0 ||\n       this._pluginManager._pluginMap === null || this._pluginManager._pluginMap === void 0;\n   }\n\n   get pluginMap()\n   {\n      /* c8 ignore next 4 */\n      if (this.isDestroyed)\n      {\n         throw new ReferenceError('This PluginManager instance has been destroyed.');\n      }\n\n      return this._pluginManager._pluginMap;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     options.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend } = {})\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         eventbus.off(`${eventPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         eventbus.off(`${eventPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         eventbus.off(`${eventPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      this._pluginManager = null;\n   }\n\n   /**\n    * Returns all plugin data or if a boolean is passed in will return plugin data by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {PluginData[]} A list of all PluginData or just enabled / disabled plugins.\n    */\n   getAllPluginData(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = [];\n\n      // Return all plugin data if enabled is not defined.\n      const allPlugins = enabled === void 0;\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (allPlugins || entry.enabled === enabled)\n         {\n            results.push(this.getPluginData(entry.name));\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all method names or if a boolean is passed in will return method names for plugins by current enabled\n    * state.\n    *\n    * @param {boolean|undefined} [enabled] - If enabled is a boolean it will return plugin methods names given their\n    *                                        enabled state.\n    *\n    * @param {string|undefined}  [pluginName] - If a string then just this plugins methods names are returned.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames(enabled = void 0, pluginName = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = {};\n      const allEnabled = typeof enabled === 'undefined';\n      const allNames = typeof pluginName === 'undefined';\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.instance && (allEnabled || entry.enabled === enabled) && (allNames || entry.name === pluginName))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor') { results[name] = true; }\n            }\n         }\n      }\n\n      return Object.keys(results);\n   }\n\n   /**\n    * Gets the plugin data for a plugin by name.\n    *\n    * @param {string}   pluginName - A plugin name.\n    *\n    * @returns {PluginData|undefined} The plugin data for a specific plugin.\n    */\n   getPluginData(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      const entry = this.pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry)\n      {\n         return JSON.parse(JSON.stringify(entry.data));\n      }\n\n      return void 0;\n   }\n\n// TODO FINISH IMPLEMENTING\n   // /**\n   //  * Returns the event binding names registered on any associated plugin EventbusProxy.\n   //  *\n   //  * @param {string}   pluginName - Plugin name to set state.\n   //  *\n   //  * @returns {string[]} - Event binding names registered from the plugin.\n   //  *\n   //  * @param {undefined|object}  [options] - Options object. If undefined all plugin enabled state is returned.\n   //  *\n   //  * @param {string|string[]}   [options.pluginNames] - Plugin name or list of names to get state.\n   //  *\n   //  * @returns {boolean|Array<{pluginName: string, enabled: boolean}>} - Event binding names registered from a\n   //  *                                                                    plugin, list of plugins, or all plugins.\n   //  */\n   // newPluginEventNames({ pluginNames = [] } = {})\n   // {\n   //    if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n   //\n   //    if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n   //\n   //    const entry = this.pluginMap.get(pluginName);\n   //\n   //    return entry instanceof PluginEntry && entry.eventbusProxy ? entry.eventbusProxy.proxyEventNames : [];\n   // }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]} - Event binding names registered from the plugin.\n    */\n   getPluginEventNames(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      const entry = this.pluginMap.get(pluginName);\n\n      return entry instanceof PluginEntry && entry.eventbusProxy ? entry.eventbusProxy.proxyEventNames : [];\n   }\n\n   /**\n    * Returns the event binding names registered from each plugin.\n    *\n    * @param {string|string[]} [nameOrList] - An array / iterable of plugin names.\n    *\n    * @returns {Array<{pluginName: string, events: string[]}>} A list of objects with plugin name and event binding\n    *                                                          names registered from the plugin.\n    */\n   getPluginsEventNames(nameOrList)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this.pluginMap.keys(); }\n      if (typeof nameOrList === 'string') { nameOrList = [nameOrList]; }\n\n      const results = [];\n\n      for (const pluginName of nameOrList)\n      {\n         results.push({ pluginName, events: this.getPluginEventNames(pluginName) });\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns the plugin names that registered the given event binding name.\n    *\n    * @param {string} eventName - An event name that plugins may have registered.\n    *\n    * @returns {string[]} A list of plugin names that has registered the given event name.\n    */\n   getPluginsByEventName(eventName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof eventName !== 'string') { throw new TypeError(`'eventName' is not a 'string'.`); }\n\n      const results = [];\n\n      const pluginEventNames = this.getPluginsEventNames();\n\n      for (const entry of pluginEventNames)\n      {\n         if (entry.events.indexOf(eventName) >= 0) { results.push(entry.pluginName); }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all plugin names or if a boolean is passed in will return plugin names by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {Array<{plugin: string, method: string}>} A list of plugin names and method names.\n    */\n   getPluginMethodNames(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = [];\n      const allPlugins = typeof enabled === 'undefined';\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.instance && (allPlugins || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor')\n               {\n                  results.push({ plugin: entry.name, method: name });\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all plugin names or if a boolean is passed in will return plugin names by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      // Return all plugin names if enabled is not defined.\n      if (enabled === void 0) { return Array.from(this.pluginMap.keys()); }\n\n      const results = [];\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns a copy of the given plugin options.\n    *\n    * @param {string}   pluginName - Plugin name to retrieve.\n    *\n    * @returns {*} A copy of the given plugin options.\n    */\n   getPluginOptions(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      let result;\n\n      const entry = this.pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry) { result = JSON.parse(JSON.stringify(entry.data.plugin.options)); }\n\n      return result;\n   }\n\n   /**\n    * Returns true if there is at least one plugin loaded with the given method name.\n    *\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod(methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      for (const plugin of this.pluginMap.values())\n      {\n         if (typeof plugin.instance[methodName] === 'function') { return true; }\n      }\n\n      return false;\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name that also has a method with the given\n    * method name.\n    *\n    * @param {string}   pluginName - Plugin name to test.\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True if a plugin and method exists.\n    */\n   hasPluginMethod(pluginName, methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      const plugin = this.pluginMap.get(pluginName);\n\n      return plugin instanceof PluginEntry && typeof plugin[methodName] === 'function';\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {Eventbus}   options.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     options.oldPrepend - The old event prepend.\n    *\n    * @param {string}     options.newPrepend - The new event prepend.\n    */\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend } = {})\n   {\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         oldEventbus.off(`${oldPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         oldEventbus.off(`${oldPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:data`, this.getPluginData, this);\n         newEventbus.on(`${newPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:names`, this.getPluginNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         newEventbus.on(`${newPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         newEventbus.on(`${newPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this);\n         newEventbus.on(`${newPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (typeof obj !== 'undefined' && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n\n/**\n * Interface for PluginSupport instances.\n *\n * @interface PluginSupportImpl\n */\n\n/**\n * A method to invoke when the plugin manager is destroyed.\n *\n * @function\n * @async\n * @name PluginSupportImpl#destroy\n */\n\n/**\n * A method to invoke when the plugin manager eventbus is set.\n *\n * @function\n * @async\n * @name PluginSupportImpl#setEventbus\n */\n"],"names":["TraversalData","[object Object]","this","baseDirectory","cntr","currentDirectory","packageObj","packagePath","rootPath","_callback","relative","path","startsWith","isAbsolute","data","filepath","basepath","callback","URL","TypeError","url","fileURLToPath","fs","existsSync","lstatSync","isDirectory","resolve","dirname","parse","root","Error","s_RESOLVE_TYPE","type","EventbusProxy","eventbus","Eventbus","_eventbus","_events","event","off","name","context","eventName","ReferenceError","entry","entries","eventCount","eventNames","isDestroyed","hasName","hasCallback","hasContext","values","length","foundMatch","key","splice","on","push","proxyEventCount","proxyEventNames","Object","keys","trigger","arguments","triggerAsync","triggerDefer","triggerSync","eventbusName","_eventbusName","ctx","count","obj","id","_listenId","s_UNIQUE_ID","listeningTo","_listeningTo","listening","thisId","objId","s_INTERNAL_ON","events","s_EVENTS_API","s_ONCE_MAP","stopListening","bind","listenTo","s_OFF_API","listeners","_listeners","ids","i","Math","max","args","Array","s_EVENTS_TARGET_API","s_TRIGGER_API","s_TRIGGER_EVENTS","Promise","promise","s_TRIGGER_ASYNC_EVENTS","setTimeout","s_TRIGGER_SYNC_EVENTS","s_EVENT_SPLITTER","iteratee","opts","names","test","split","iterateeTarget","s_ON_API","options","handlers","remaining","j","handler","map","offer","once","apply","objEvents","cb","result","allEvents","all","slice","concat","ev","a1","a2","a3","l","call","async","results","error","reject","then","filtered","filter","idCounter","prefix","deepFreeze","skipFreezeKeys","isArray","_deepFreeze","hasOwnProperty","indexOf","freeze","PluginEntry","instance","eventbusProxy","_data","_enabled","_name","_instance","_eventbusProxy","value","escaped","replace","enabled","PluginEvent","copyProps","passthruProps","assign","JSON","stringify","pluginName","pluginOptions","isValidConfig","pluginConfig","target","s_INVOKE_ASYNC_EVENTS","methodName","nameOrList","pluginMap","performErrorCheck","Symbol","iterator","pluginInvokeCount","pluginInvokeNames","hasMethod","hasPlugin","get","plugin","throwNoPlugin","throwNoMethod","$$plugin_invoke_count","$$plugin_invoke_names","requireMod","module","createRequire","import","meta","isPathModule","extname","toLowerCase","isBaseParent","isTraversalData","readFileSync","getPackagePath","getPackageType","PluginSupport","pluginManager","_pluginManager","_pluginMap","eventPrepend","getAllPluginData","getMethodNames","getPluginData","getPluginEventNames","getPluginMethodNames","getPluginNames","getPluginOptions","getPluginsByEventName","getPluginsEventNames","hasPluginMethod","allPlugins","allEnabled","allNames","s_GET_ALL_PROPERTY_NAMES","Function","pluginEventNames","method","from","oldEventbus","newEventbus","oldPrepend","newPrepend","props","getOwnPropertyNames","forEach","prop","getPrototypeOf","prototype","Map","_eventbusProxies","_pluginSupport","_options","pluginsEnabled","noEventAdd","noEventDestroy","noEventOptions","noEventRemoval","setEventbus","setOptions","moduleData","has","_loadModule","toString","pluginData","manager","_eventPrepend","scopedName","targetEscaped","escape","set","pluginConfigs","pluginsData","add","addAll","removeAll","destroy","_addEventbus","_addAllEventbus","_destroyEventbus","invokeAsync","invokeAsyncEvent","_removeEventbus","_removeAllEventbus","createEventbusProxy","getPluginsEnabled","getOptions","invoke","setPluginsEnabled","_setOptionsEventbus","invokeSync","invokeSyncEvent","pluginSupport","pluginNames","object","loaded","s_INVOKE_SYNC_EVENTS","moduleOrPath","err","delete","remove","clear","size","oldManagerEventPrepend","oldScopedName","newManagerEventPrepend","newScopedName","oldEventPrepend","newEventPrepend","setEntryEnabled","pluginEntry","isESM","loadPath","resolvePath","pathToFileURL","onPluginLoad","default"],"mappings":"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"}