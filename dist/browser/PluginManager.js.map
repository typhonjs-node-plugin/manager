{"version":3,"file":"PluginManager.js","sources":["../../node_modules/@typhonjs-plugin/eventbus/dist/browser/Eventbus.js","../../node_modules/@typhonjs-utils/loader-module/dist/browser/ModuleLoader.js","../../src/PluginEntry.js","../../node_modules/@typhonjs-utils/object/src/objectUtil.js","../../src/support/invoke/PluginInvokeEvent.js","../../src/support/invoke/invokeAsyncEvent.js","../../src/utils/escapeTarget.js","../../src/utils/isValidConfig.js","../../src/utils/resolveModule.js","../../src/support/invoke/PluginInvokeSupport.js","../../src/support/invoke/invokeSyncEvent.js","../../src/PluginManager.js"],"sourcesContent":["function e(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,s(e,t,\"get\"))}function t(e,t,r){return function(e,t,s){if(t.set)t.set.call(e,s);else{if(!t.writable)throw new TypeError(\"attempted to set read only private field\");t.value=s}}(e,s(e,t,\"set\"),r),r}function s(e,t,s){if(!t.has(e))throw new TypeError(\"attempted to \"+s+\" private field on non-instance\");return t.get(e)}var r=new WeakMap,n=new WeakMap;class i{constructor(){r.set(this,{writable:!0,value:void 0}),n.set(this,{writable:!0,value:void 0})}static initialize(s,o){if(void 0!==o&&\"string\"!=typeof o)throw new TypeError(\"'name' is not a string\");const a=new i;return t(a,r,s),t(a,n,void 0===o?s.name:o),{destroy:function(){a.isDestroyed||(t(a,r,null),this&&(this.eventbusSecure=void 0))},setEventbus:function(s,i){if(void 0!==i&&\"string\"!=typeof i)throw new TypeError(\"'name' is not a string\");a.isDestroyed||(void 0===i&&e(a,n)===e(a,r).name?t(a,n,s.name):void 0!==i&&t(a,n,i),t(a,r,s))},eventbusSecure:a}}*keys(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");for(const s of e(this,r).keys(t))yield s}get isDestroyed(){return null===e(this,r)}get name(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");return e(this,n)}trigger(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");return e(this,r).trigger(t,...s),this}triggerAsync(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");return e(this,r).triggerAsync(t,...s)}triggerDefer(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");return e(this,r).triggerDefer(t,...s),this}triggerSync(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusSecure instance has been destroyed.\");return e(this,r).triggerSync(t,...s)}}const o=/\\s+/;function a(e,t,s,r,n){let i,c=0;if(s&&\"object\"==typeof s){void 0!==r&&\"context\"in n&&void 0===n.context&&(n.context=r);for(i=h(s);c<i.length;c++)t=a(e,t,i[c],s[i[c]],n)}else if(s&&o.test(s))for(i=s.split(o);c<i.length;c++)t=e(t,i[c],r,n);else t=e(t,s,r,n);return t}function c(e){const t=e.name;return\"\"!==t?`[${t}] `:\"\"}const h=e=>null===e||\"object\"!=typeof e?[]:Object.keys(e);function l(e,t,s,r){const n=r.after,i=r.count+1;if(s){const r=e[t]=u(i,(function(){return s.apply(this,arguments)}),(()=>{n(t,r)}));r._callback=s}return e}const u=function(e,t,s){let r;return function(...n){return--e>0&&(r=t.apply(this,n)),e<=1&&(s&&s.apply(this,n),s=void 0,t=void 0),r}};var d=new WeakMap,f=new WeakMap;class y{constructor(e){d.set(this,{writable:!0,value:void 0}),f.set(this,{writable:!0,value:void 0}),t(this,d,e)}before(t,s,r,n,i=!1){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");if(!Number.isInteger(t))throw new TypeError(\"'count' is not an integer\");const o={};if(e(this,d).isGuarded(s,o))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- before() failed as event name(s) are guarded: ${JSON.stringify(o.names)}`),this;const h=a(l,{},s,r,{count:t,after:this.off.bind(this)});return\"string\"==typeof s&&null==n&&(r=void 0),this.on(h,r,n,i)}createSecure(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return i.initialize(e(this,d),t)}destroy(){null!==e(this,d)&&this.off(),t(this,f,void 0),t(this,d,null)}*entries(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");for(const s of e(this,d).entries(t))yield s}get eventCount(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).eventCount}get callbackCount(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).callbackCount}*keys(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");for(const s of e(this,d).keys(t))yield s}get isDestroyed(){return null===e(this,d)}get name(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return`proxy-${e(this,d).name}`}get proxyEventCount(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,f)?Object.keys(e(this,f)).length:0}get proxyCallbackCount(){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");if(!e(this,f))return 0;let t=0;for(const s in e(this,f))t+=e(this,f)[s].length;return t}isGuarded(t,s={}){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).isGuarded(t,s)}off(s,r,n){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return t(this,f,a(g,e(this,f)||{},s,r,{context:n,eventbus:e(this,d)})),this}on(s,r,n,i=!1){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");const o={};if(e(this,d).isGuarded(s,o))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- on() failed as event name(s) are guarded: ${JSON.stringify(o.names)}`),this;const h={context:n,ctx:this,guarded:i};return t(this,f,a(b,e(this,f)||{},s,r,h)),e(this,d).on(s,r,h.ctx,i),this}once(t,s,r,n=!1){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");const i={};if(e(this,d).isGuarded(t,i))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- once() failed as event name(s) are guarded: ${JSON.stringify(i.names)}`),this;const o=a(l,{},t,s,{count:1,after:this.off.bind(this)});return\"string\"==typeof t&&null==r&&(s=void 0),this.on(o,s,r,n)}*proxyEntries(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");if(void 0!==t&&!(t instanceof RegExp))throw new TypeError(\"'regex' is not a RegExp\");if(e(this,f))if(t){for(const s in e(this,f))if(t.test(s))for(const t of e(this,f)[s])yield[s,t.callback,t.context,t.guarded]}else for(const t in e(this,f))for(const s of e(this,f)[t])yield[t,s.callback,s.context,s.guarded]}*proxyKeys(t){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");if(void 0!==t&&!(t instanceof RegExp))throw new TypeError(\"'regex' is not a RegExp\");if(e(this,f))if(t)for(const s in e(this,f))t.test(s)&&(yield s);else for(const t in e(this,f))yield t}trigger(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).trigger(t,...s),this}triggerAsync(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).triggerAsync(t,...s)}triggerDefer(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).triggerDefer(t,...s),this}triggerSync(t,...s){if(this.isDestroyed)throw new ReferenceError(\"This EventbusProxy instance has been destroyed.\");return e(this,d).triggerSync(t,...s)}}const g=(e,t,s,r)=>{if(!e)return;const n=r.context,i=r.eventbus,o=t?[t]:h(e);for(let r=0;r<o.length;r++){const a=e[t=o[r]];if(!a)break;const c=[];for(let e=0;e<a.length;e++){const t=a[e];(s&&s!==t.callback&&s!==t.callback._callback||n&&n!==t.context)&&c.push(t)}c.length?e[t]=c:(i.off(t,s,n),delete e[t])}return e},b=(e,t,s,r)=>{if(s){const n=e[t]||(e[t]=[]),i=r.context,o=r.ctx,a=\"boolean\"==typeof r.guarded&&r.guarded;r.ctx=i||o,n.push({callback:s,context:i,ctx:r.ctx,guarded:a})}return e};var v=new WeakMap,w=new WeakMap;class p{constructor(e=\"\"){if(v.set(this,{writable:!0,value:\"\"}),w.set(this,{writable:!0,value:void 0}),\"string\"!=typeof e)throw new TypeError(\"'name' is not a string\");t(this,v,e),this._listeners=void 0,this._listenId=void 0,this._listeningTo=void 0}before(e,t,s,r,n=!1){if(!Number.isInteger(e))throw new TypeError(\"'count' is not an integer\");const i={};if(this.isGuarded(t,i))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- before() failed as event name(s) are guarded: ${JSON.stringify(i.names)}`),this;const o=a(l,{},t,s,{count:e,after:this.off.bind(this)});return\"string\"==typeof t&&null==r&&(s=void 0),this.on(o,s,r,n)}createProxy(){return new y(this)}createSecure(e){return i.initialize(this,e)}*entries(t){if(void 0!==t&&!(t instanceof RegExp))throw new TypeError(\"'regex' is not a RegExp\");if(e(this,w))if(t){for(const s in e(this,w))if(t.test(s))for(const t of e(this,w)[s])yield[s,t.callback,t.context,t.guarded]}else for(const t in e(this,w))for(const s of e(this,w)[t])yield[t,s.callback,s.context,s.guarded]}get eventCount(){return e(this,w)?Object.keys(e(this,w)).length:0}get callbackCount(){if(!e(this,w))return 0;let t=0;for(const s in e(this,w))t+=e(this,w)[s].length;return t}isGuarded(t,s={}){return s.names=[],s.guarded=!1,a(S,s,t,void 0,{events:e(this,w)}).guarded}*keys(t){if(void 0!==t&&!(t instanceof RegExp))throw new TypeError(\"'regex' is not a RegExp\");if(e(this,w))if(t)for(const s in e(this,w))t.test(s)&&(yield s);else for(const t in e(this,w))yield t}get name(){return e(this,v)}listenTo(e,t,s){if(!e)return this;const r={};if(I(e,t,r))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- listenTo() failed as event name(s) are guarded for target object: ${JSON.stringify(r.names)}`),this;const n=e._listenId||(e._listenId=N(\"l\")),i=this._listeningTo||(this._listeningTo={});let o=x=i[n];o||(this._listenId||(this._listenId=N(\"l\")),o=x=i[n]=new P(this,e));const a=O(e,t,s,this);if(x=void 0,a)throw a;return o.interop&&o.on(t,s),this}listenToBefore(e,t,s,r){if(!Number.isInteger(e))throw new TypeError(\"'count' is not an integer\");const n=a(l,{},s,r,{count:e,after:this.stopListening.bind(this,t)});return this.listenTo(t,n)}listenToOnce(e,t,s){const r=a(l,{},t,s,{count:1,after:this.stopListening.bind(this,e)});return this.listenTo(e,r)}off(s,r,n){return e(this,w)?(t(this,w,a(_,e(this,w),s,r,{context:n,listeners:this._listeners})),this):this}on(s,r,n,i=!1){const o={};return this.isGuarded(s,o)?(console.warn(`@typhonjs-plugin/eventbus ${c(this)}- on() failed as event name(s) are guarded: ${JSON.stringify(o.names)}`),this):(t(this,w,a($,e(this,w)||{},s,r,{context:n,ctx:this,guarded:i,listening:x})),x&&((this._listeners||(this._listeners={}))[x.id]=x,x.interop=!1),this)}once(e,t,s,r=!1){const n={};if(this.isGuarded(e,n))return console.warn(`@typhonjs-plugin/eventbus ${c(this)}- once() failed as event name(s) are guarded: ${JSON.stringify(n.names)}`),this;const i=a(l,{},e,t,{count:1,after:this.off.bind(this)});return\"string\"==typeof e&&null==s&&(t=void 0),this.on(i,t,s,r)}stopListening(e,t,s){const r=this._listeningTo;if(!r)return this;const n=e?[e._listenId]:h(r);for(let e=0;e<n.length;e++){const i=r[n[e]];if(!i)break;i.obj.off(t,s,this),i.interop&&i.off(t,s)}return this}trigger(t,...s){return e(this,w)?(j(A,M,e(this,w),t,void 0,s),this):this}async triggerAsync(t,...s){if(!e(this,w))return;const r=j(A,W,e(this,w),t,void 0,s);return void 0!==r?Array.isArray(r)?Promise.all(r).then((e=>{let t=[];for(const s of e)Array.isArray(s)?t=t.concat(s):void 0!==s&&t.push(s);return t.length>1?t:1===t.length?t[0]:void 0})):r:void 0}triggerDefer(e,...t){return setTimeout((()=>{this.trigger(e,...t)}),0),this}triggerSync(t,...s){if(e(this,w))return j(A,C,e(this,w),t,void 0,s)}}let x;var E=new WeakMap,k=new WeakMap,T=new WeakMap,m=new WeakMap,D=new WeakMap,R=new WeakMap;class P{constructor(e,s){E.set(this,{writable:!0,value:void 0}),k.set(this,{writable:!0,value:void 0}),T.set(this,{writable:!0,value:void 0}),m.set(this,{writable:!0,value:void 0}),D.set(this,{writable:!0,value:void 0}),R.set(this,{writable:!0,value:0}),t(this,k,e._listenId),t(this,T,e),t(this,m,s),t(this,D,!0)}cleanup(){delete e(this,T)._listeningTo[e(this,m)._listenId],e(this,D)||delete e(this,m)._listeners[e(this,k)]}get id(){return e(this,k)}get interop(){return e(this,D)}get obj(){return e(this,m)}incrementCount(){t(this,R,+e(this,R)+1)}on(s,r,n){return t(this,E,a($,e(this,E)||{},s,r,{context:n,ctx:this,listening:this})),this}off(s,r){let n;e(this,D)?(t(this,E,a(_,e(this,E),s,r,{context:void 0,listeners:void 0})),n=!e(this,E)):(t(this,R,+e(this,R)-1),n=0===e(this,R)),n&&this.cleanup()}set interop(e){if(\"boolean\"!=typeof e)throw new TypeError(\"'value' is not a boolean\");t(this,D,e)}}const S=(e,t,s,r)=>{const n=r.events;if(n){const s=n[t];if(Array.isArray(s))for(const r of s)if(r.guarded)return e.names.push(t),e.guarded=!0,e}return e},_=(e,t,s,r)=>{if(!e)return;const n=r.context,i=r.listeners;let o,a=0;if(t||n||s){for(o=t?[t]:h(e);a<o.length;a++){const r=e[t=o[a]];if(!r)break;const i=[];for(let e=0;e<r.length;e++){const o=r[e];if(s&&s!==o.callback&&s!==o.callback._callback||n&&n!==o.context)i.push(o);else{const e=o.listening;e&&e.off(t,s)}}i.length?e[t]=i:delete e[t]}return e}for(o=h(i);a<o.length;a++)i[o[a]].cleanup()},$=(e,t,s,r)=>{if(s){const n=e[t]||(e[t]=[]),i=r.context,o=r.ctx,a=r.listening,c=\"boolean\"==typeof r.guarded&&r.guarded;a&&a.incrementCount(),n.push({callback:s,context:i,ctx:i||o,guarded:c,listening:a})}return e},j=(e,t,s,r,n,i)=>{let a,c,h=0;if(r&&o.test(r))for(c=r.split(o);h<c.length;h++){const r=e(t,s,c[h],n,i),o=Array.isArray(a)?2:void 0!==a?1:0;if(Array.isArray(r))switch(o){case 0:a=r;break;case 1:a=[a].concat(r);break;case 2:a=a.concat(r)}else if(void 0!==r)switch(o){case 0:a=r;break;case 1:{const e=[a];e.push(r),a=e;break}case 2:a.push(r)}}else a=e(t,s,r,n,i);return a},A=(e,t,s,r,n)=>{let i;if(t){const r=t[s];let o=t.all;r&&o&&(o=o.slice()),r&&(i=e(r,n)),o&&(i=e(o,[s].concat(n)))}return i},M=(e,t)=>{let s,r=-1;const n=t[0],i=t[1],o=t[2],a=e.length;switch(t.length){case 0:for(;++r<a;)(s=e[r]).callback.call(s.ctx);return;case 1:for(;++r<a;)(s=e[r]).callback.call(s.ctx,n);return;case 2:for(;++r<a;)(s=e[r]).callback.call(s.ctx,n,i);return;case 3:for(;++r<a;)(s=e[r]).callback.call(s.ctx,n,i,o);return;default:for(;++r<a;)(s=e[r]).callback.apply(s.ctx,t);return}},W=async(e,t)=>{let s,r=-1;const n=t[0],i=t[1],o=t[2],a=e.length,c=[];switch(t.length){case 0:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx);void 0!==t&&c.push(t)}break;case 1:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n);void 0!==t&&c.push(t)}break;case 2:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n,i);void 0!==t&&c.push(t)}break;case 3:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n,i,o);void 0!==t&&c.push(t)}break;default:for(;++r<a;){const n=(s=e[r]).callback.apply(s.ctx,t);void 0!==n&&c.push(n)}}return c.length>1?Promise.all(c).then((e=>{const t=e.filter((e=>void 0!==e));switch(t.length){case 0:return;case 1:return t[0];default:return t}})):1===c.length?c[0]:void 0},C=(e,t)=>{let s,r=-1;const n=t[0],i=t[1],o=t[2],a=e.length,c=[];switch(t.length){case 0:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx);void 0!==t&&c.push(t)}break;case 1:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n);void 0!==t&&c.push(t)}break;case 2:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n,i);void 0!==t&&c.push(t)}break;case 3:for(;++r<a;){const t=(s=e[r]).callback.call(s.ctx,n,i,o);void 0!==t&&c.push(t)}break;default:for(;++r<a;){const n=(s=e[r]).callback.apply(s.ctx,t);void 0!==n&&c.push(n)}}return c.length>1?c:1===c.length?c[0]:void 0},I=(e,t,s={})=>{let r=!1;try{const n=e.isGuarded(t,s);\"boolean\"==typeof n&&(r=n)}catch(e){r=!1,s.names=[],s.guarded=!1}return r},O=(e,t,s,r)=>{try{e.on(t,s,r)}catch(e){return e}};let G=0;const N=(e=\"\")=>{const t=\"\"+ ++G;return e?`${e}${t}`:t},J=new p(\"mainEventbus\"),z=new p(\"pluginEventbus\"),L=new p(\"testEventbus\");export default p;export{y as EventbusProxy,i as EventbusSecure,J as eventbus,z as pluginEventbus,L as testEventbus};\n//# sourceMappingURL=Eventbus.js.map\n","const t=/^(https?:\\/\\/|file:\\/\\/)/;export default class{static async load({modulepath:o,resolveModule:e}={}){if(!(o instanceof URL)&&\"string\"!=typeof o)throw new TypeError(\"'modulepath' is not a string or URL\");if(void 0!==e&&\"function\"!=typeof e)throw new TypeError(\"'resolveModule' is not a function\");const n=await import(o),i=o instanceof URL?o.toString():o,a=\"import-\"+(o instanceof URL||\"string\"==typeof o&&o.match(t)?\"url\":\"path\");return{filepath:i,instance:void 0!==e?e(n):n,isESM:!0,loadpath:i,module:n,modulepath:o,type:a}}}\n//# sourceMappingURL=ModuleLoader.js.map\n","/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nexport default class PluginEntry\n{\n   /**\n    * Data describing the plugin, manager, and optional module data.\n    *\n    * @type {PluginData}\n    * @private\n    */\n   #data;\n\n   /**\n    * The plugin enabled state.\n    *\n    * @type {boolean}\n    * @private\n    */\n   #enabled;\n\n   /**\n    * The plugin name.\n    *\n    * @type {string}\n    * @private\n    */\n   #name;\n\n   /**\n    * The loaded plugin instance.\n    *\n    * @type {object}\n    * @private\n    */\n   #instance;\n\n   /**\n    * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n    *\n    * @type {EventbusProxy}\n    * @private\n    */\n   #eventbusProxy;\n\n   /**\n    * Stores the proxied event names, callback functions, context and guarded state when this plugin is disabled.\n    *\n    * @type {Array<[string, Function, object, boolean]>}\n    * @private\n    */\n   #events;\n\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {PluginData}  data - Describes the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {EventbusProxy}  eventbusProxy - The EventbusProxy associated with the plugin wrapping the plugin manager\n    *                                         eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      this.#data = data;\n\n      this.#enabled = true;\n\n      this.#name = name;\n\n      this.#instance = instance;\n\n      this.#eventbusProxy = eventbusProxy;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {PluginData} The associated PluginData.\n    */\n   get data() { return this.#data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this.#enabled; }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      this.#enabled = enabled;\n\n      // If enabled and there are stored events then turn them on with the eventbus proxy.\n      if (enabled)\n      {\n         if (this.#eventbusProxy !== void 0 && Array.isArray(this.#events))\n         {\n            for (const event of this.#events)\n            {\n               this.#eventbusProxy.on(...event);\n            }\n\n            this.#events = void 0;\n         }\n      }\n      else // Store any proxied events and unregister the proxied events.\n      {\n         if (this.#eventbusProxy !== void 0)\n         {\n            this.#events = Array.from(this.#eventbusProxy.proxyEntries());\n            this.#eventbusProxy.off();\n         }\n      }\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this.#eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this.#instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this.#name; }\n\n\n   /**\n    * Set associated EventbusProxy.\n    *\n    * @param {EventbusProxy} eventbusProxy - EventbusProxy instance to associate.\n    */\n   set eventbusProxy(eventbusProxy) { this.#eventbusProxy = eventbusProxy; }\n}\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n *\n * Support for typhonjs-plugin-manager is enabled.\n */\n\nconst s_TAG_MAP = '[object Map]';\nconst s_TAG_SET = '[object Set]';\nconst s_TAG_STRING = '[object String]';\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Is it an object.\n */\nexport function isObject(object)\n{\n   return object !== null && typeof object === 'object';\n}\n\n/**\n * Safely returns keys on an object or an empty array if not an object.\n *\n * @param {object} object - An object.\n *\n * @returns {string[]} Object keys\n */\nexport function objectKeys(object)\n{\n   return object !== null && typeof object === 'object' ? Object.keys(object) : [];\n}\n\n/**\n * Safely returns an objects size. Note for String objects unicode is not taken into consideration.\n *\n * @param {object} object - An object.\n *\n * @returns {number} Size of object.\n */\nexport function objectSize(object)\n{\n   if (object === void 0 || object === null || typeof object !== 'object') { return 0; }\n\n   const tag = Object.prototype.toString.call(object);\n\n   if (tag === s_TAG_MAP || tag === s_TAG_SET) { return object.size; }\n\n   if (tag === s_TAG_STRING) { return object.length; }\n\n   return Object.keys(object).length;\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.includes(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && !expected.includes(dataEntry)))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link PluginInvokeSupport#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nexport default class PluginInvokeEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\n       * may add to or modify this data.\n       *\n       * @type {PluginEventData}\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = void 0;\n   }\n}\n","import { isIterable }      from '@typhonjs-utils/object';\n\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {object}                     opts - Options object.\n *\n * @param {string}                     opts.method - Method name to invoke.\n *\n * @param {PluginManager}              opts.manager - A plugin manager instance.\n *\n * @param {object}                     [opts.copyProps] - Properties that are copied.\n *\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {Promise<PluginEventData>} The PluginEvent data.\n */\nexport default async function invokeAsyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\n options = void 0, errorCheck = true } = {})\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (options === void 0) { options = manager.getOptions(); }\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof plugins === 'string')\n   {\n      const entry = manager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[method](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = manager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[method](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (errorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n}\n","const s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\n\n/**\n * Creates an escaped path which is suitable for use in RegExp construction.\n *\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\n * is used after the module has been loaded / is a good target.\n *\n * @param {string|URL}  target - Target full / relative path or URL to escape.\n *\n * @returns {string} The escaped target.\n */\nexport default function escapeTarget(target)\n{\n   let targetEscaped = target;\n\n   if (target instanceof URL)\n   {\n      targetEscaped = target.pathname;\n   }\n   else if (target.match(s_REGEX_STRING_URL))\n   {\n      targetEscaped = new URL(target).pathname;\n   }\n\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\n\n   return targetEscaped;\n}\n","/**\n * Performs validation of a PluginConfig.\n *\n * @param {PluginConfig}   pluginConfig A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nexport default function isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n","/**\n * Resolves a dynamically imported module for PluginManager. This function is passed to `@typhonjs-utils/loader-module`.\n *\n * @param {object}   module - The imported module.\n *\n * @returns {*} The export most likely to match a valid plugin.\n */\nexport default function(module)\n{\n   // If the module has a named export for `onPluginLoad` then take the module.\n   if (typeof module.onPluginLoad === 'function')\n   {\n      return module;\n   }\n   // Then potentially resolve any default export / static class.\n   else if (module.default)\n   {\n      return module.default;\n   }\n   // Finally resolve as just the module.\n   else\n   {\n      return module;\n   }\n}\n","import { isIterable }   from \"@typhonjs-utils/object\";\n\nimport invokeAsyncEvent from './invokeAsyncEvent.js';\nimport invokeSyncEvent  from './invokeSyncEvent.js';\n\n/**\n * `plugins:async:invoke` - {@link PluginInvokeSupport#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link PluginInvokeSupport#invokeAsyncEvent}\n *\n * `plugins:get:method:names` - {@link PluginInvokeSupport#getMethodNames}\n *\n * `plugins:has:method` - {@link PluginInvokeSupport#hasMethod}\n *\n * `plugins:invoke` - {@link PluginInvokeSupport#invoke}\n *\n * `plugins:sync:invoke` - {@link PluginInvokeSupport#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link PluginInvokeSupport#invokeSyncEvent}\n *\n * @implements {PluginSupportImpl}\n */\nexport default class PluginInvokeSupport\n{\n   /**\n    * @type {PluginManager}\n    */\n   #pluginManager = null;\n\n   /**\n    * Create PluginInvokeSupport\n    *\n    * @param {PluginManager} pluginManager - The plugin manager to associate.\n    */\n   constructor(pluginManager)\n   {\n      this.#pluginManager = pluginManager;\n   }\n\n   /**\n    * Returns whether the associated plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether the plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this.#pluginManager === null || this.#pluginManager.isDestroyed;\n   }\n\n   /**\n    * Returns the associated plugin manager options.\n    *\n    * @returns {PluginManagerOptions} The associated plugin manager options.\n    */\n   get options()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager.getOptions();\n   }\n\n   /**\n    * Gets the associated plugin manager.\n    *\n    * @returns {PluginManager} The associated plugin manager\n    */\n   get pluginManager()\n   {\n      /* c8 ignore next 1 */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginManager;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     opts.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend } = {})\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\n         eventbus.off(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:invoke`, this.invoke, this);\n         eventbus.off(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\n         eventbus.off(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      this.#pluginManager = null;\n   }\n\n   /**\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\n    * along with sorting methods by plugin name.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {boolean}                 [opts.enabled] - If enabled is a boolean it will return plugin methods names\n    *                                                   given the respective enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Create an array from a single plugin name.\n      if (typeof plugins === 'string')\n      {\n         plugins = [plugins];\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = {};\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.instance && (anyEnabledState || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\n            }\n         }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\n            {\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n               {\n                  // Skip any names that are not a function or are the constructor.\n                  if (typeof entry.instance[name] === 'function' && name !== 'constructor') { results[name] = true; }\n               }\n            }\n         }\n      }\n\n      return Object.keys(results).sort();\n   }\n\n   /**\n    * Checks if the provided method name exists across all plugins or specific plugins if defined.\n    *\n    * @param {object}                  opts - Options object.\n    *\n    * @param {string}                  opts.method - Method name to test.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check for method. If\n    *                                                   undefined all plugins must contain the method.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod({ method, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string')\n      {\n         throw new TypeError(`'method' is not a string.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.pluginManager.getPluginEntry(plugins);\n         return entry !== void 0 && typeof entry.instance[method] === 'function';\n      }\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginManager.getPluginEntry(name);\n\n         if (entry !== void 0 && typeof entry.instance[method] !== 'function') { return false; }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so check all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginManager.getPluginMapValues())\n         {\n            if (typeof entry.instance[method] !== 'function') { return false; }\n         }\n      }\n\n      return true;\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given method name.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    */\n   invoke({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const entry = this.pluginManager.getPluginEntry(plugins);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this.pluginManager.getPluginEntry(name);\n\n            if (entry !== void 0 && entry.enabled && entry.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof entry.instance[method] === 'function')\n               {\n                  isArgsArray ? entry.instance[method](...args) : entry.instance[method]();\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n   }\n\n   /**\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\n    * Any target invoked may return a Promise or any result.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<*|*[]>} A single result or array of results.\n    */\n   async invokeAsync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results).then((values) =>\n      {\n         const filtered = values.filter((entry) => entry !== void 0);\n         switch (filtered.length)\n         {\n            case 0: return void 0;\n            case 1: return filtered[0];\n            default: return filtered;\n         }\n      }) : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {object}   [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}   [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<PluginEventData>} The PluginEvent data.\n    */\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Invokes the private internal async events method.\n      return invokeAsyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @param {string}   opts.method - Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] - Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {*|*[]} A single result or array of results.\n    */\n   invokeSync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this.pluginManager.getPluginMapKeys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this.pluginManager.getPluginEntry(plugins);\n\n         if (plugin !== void 0 && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this.pluginManager.getPluginEntry(name);\n\n            if (plugin !== void 0 && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method]();\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this.options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this.options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {string}            opts.method - Method name to invoke.\n    *\n    * @param {object}            [opts.copyProps] - Properties that are copied.\n    *\n    * @param {object}            [opts.passthruProps] - Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {PluginEventData} The PluginEvent data.\n    */\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Invokes the private internal sync events method.\n      return invokeSyncEvent({ method, manager: this.pluginManager, copyProps, passthruProps, plugins });\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {Eventbus}   opts.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     opts.oldPrepend - The old event prepend.\n    *\n    * @param {string}     opts.newPrepend - The new event prepend.\n    */\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\n         oldEventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\n         oldEventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:async:invoke`, this.invokeAsync, this, true);\n         newEventbus.on(`${newPrepend}:async:invoke:event`, this.invokeAsyncEvent, this, true);\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this, true);\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this, true);\n         newEventbus.on(`${newPrepend}:invoke`, this.invoke, this, true);\n         newEventbus.on(`${newPrepend}:sync:invoke`, this.invokeSync, this, true);\n         newEventbus.on(`${newPrepend}:sync:invoke:event`, this.invokeSyncEvent, this, true);\n      }\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {PluginManagerOptions} options Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (obj !== void 0 && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n","import { isIterable }      from '@typhonjs-utils/object';\n\nimport PluginInvokeEvent   from './PluginInvokeEvent.js';\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {object}                     opts - Options object.\n *\n * @param {string}                     opts.method - Method name to invoke.\n *\n * @param {PluginManager}              opts.manager - A plugin manager instance.\n *\n * @param {object}                     [opts.copyProps] - Properties that are copied.\n *\n * @param {object}                     [opts.passthruProps] - Properties that are passed through.\n *\n * @param {string|Iterable<string>}    [opts.plugins] - Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {object}                     [opts.options] - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [opts.errorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {PluginEventData} The PluginEvent data.\n */\nexport default function invokeSyncEvent({ method, manager, copyProps = {}, passthruProps = {}, plugins = void 0,\n options = void 0, errorCheck = true } = {})\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (options === void 0) { options = manager.getOptions(); }\n   if (plugins === void 0) { plugins = manager.getPluginMapKeys(); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginInvokeEvent(copyProps, passthruProps);\n\n   if (typeof plugins === 'string')\n   {\n      const entry = manager.getPluginEntry(plugins);\n\n      if (entry !== void 0 && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[method](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = manager.getPluginEntry(name);\n\n         if (entry !== void 0 && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[method](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (errorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (errorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n}\n","import Eventbus            from '@typhonjs-plugin/eventbus';\nimport { EventbusProxy }   from '@typhonjs-plugin/eventbus';\nimport ModuleLoader        from '@typhonjs-utils/loader-module';\n\nimport PluginEntry         from './PluginEntry.js';\n\nimport invokeAsyncEvent    from './support/invoke/invokeAsyncEvent.js';\n\nimport escapeTarget        from './utils/escapeTarget.js';\nimport isValidConfig       from './utils/isValidConfig.js';\nimport resolveModule       from './utils/resolveModule.js';\n\nimport { deepFreeze, isIterable, isObject }  from '@typhonjs-utils/object';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link PluginManager#add}\n *\n * `plugins:async:add:all` - {@link PluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link PluginManager#destroy}\n *\n * `plugins:async:remove` - {@link PluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link PluginManager#removeAll}\n *\n * `plugins:get:enabled` - {@link PluginManager#getEnabled}\n *\n * `plugins:get:options` - {@link PluginManager#getOptions}\n *\n * `plugins:get:plugin:by:event` - {@link PluginManager#getPluginByEvent}\n *\n * `plugins:get:plugin:data` - {@link PluginManager#getPluginData}\n *\n * `plugins:get:plugin:events` - {@link PluginManager#getPluginEvents}\n *\n * `plugins:get:plugin:names` - {@link PluginManager#getPluginNames}\n *\n * `plugins:has:plugin` - {@link PluginManager#hasPlugins}\n *\n * `plugins:is:valid:config` - {@link PluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link PluginManager#setEnabled}\n *\n * `plugins:set:options` - {@link PluginManager#setOptions}\n *\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * If eventbus functionality is enabled it is important especially if using a process / global level eventbus such as\n * `@typhonjs-plugin/eventbus/instances` to call {@link PluginManager#destroy} to clean up all plugin eventbus\n * resources and the plugin manager event bindings; this is primarily a testing concern.\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n *\n * // One can also indirectly invoke any method of the plugin.\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\n *\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\n * eventbus.triggerSync('plugins:invoke:sync:event', {\n *    method: 'aCoolMethod',\n *    plugins: 'an-npm-plugin-enabled-module'\n * });\n *\n * // The 3rd parameter will make a copy of the hash and the 4th defines a pass through object hash sending a single\n * // event / object hash to the invoked method.\n *\n * // -----------------------\n *\n * // Given that `@typhonjs-plugin/eventbus/instances` defines a global / process level eventbus you can import it in\n * // an entirely different file or even NPM module and invoke methods of loaded plugins like this:\n *\n * import eventbus from '@typhonjs-plugin/eventbus/instances';\n *\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke', 'aCoolMethod');\n *\n * assert(eventbus.triggerSync('cool:event') === true);\n *\n * // Removes the plugin and unregisters events.\n * await eventbus.triggerAsync('plugins:remove', 'an-npm-plugin-enabled-module');\n *s\n * assert(eventbus.triggerSync('cool:event') === true); // Will now fail!\n *\n * // In this case though when using the global eventbus be mindful to always call `pluginManager.destroy()` in the\n * // main thread of execution scope to remove all plugins and the plugin manager event bindings!\n */\nexport default class PluginManager\n{\n   /**\n    * Stores the associated eventbus.\n    *\n    * @type {Eventbus}\n    * @private\n    */\n   #eventbus = null;\n\n   /**\n    * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n    *\n    * @type {EventbusProxy[]}\n    * @private\n    */\n   #eventbusProxies = [];\n\n   /**\n    * Stores any EventbusSecure instances created, so that they may be automatically destroyed.\n    *\n    * @type {EventbusSecureObj[]}\n    * @private\n    */\n   #eventbusSecure = [];\n\n   /**\n    * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\n    * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\n    * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\n    * off.\n    *\n    * @type {PluginManagerOptions}\n    * @private\n    */\n   #options =\n   {\n      noEventAdd: false,\n      noEventDestroy: true,\n      noEventRemoval: false,\n      noEventSetEnabled: true,\n      noEventSetOptions: true,\n      throwNoMethod: false,\n      throwNoPlugin: false\n   };\n\n   /**\n    * Stores the plugins by name with an associated PluginEntry.\n    *\n    * @type {Map<string, PluginEntry>}\n    * @private\n    */\n   #pluginMap = new Map();\n\n   /**\n    * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\n    *\n    * @type {PluginSupportImpl[]}\n    * @private\n    */\n   #pluginSupport = [];\n\n   /**\n    * Instantiates PluginManager\n    *\n    * @param {object}   [options] - Provides various configuration options:\n    *\n    * @param {Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus' used as the plugin\n    *                                        eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\n    *                                                     eventbus.\n    *\n    * @param {PluginManagerOptions}  [options.manager] - The plugin manager options.\n    *\n    * @param {PluginSupportImpl|Iterable<PluginSupportImpl>} [options.PluginSupport] - Optional classes to\n    *                                        pass in which extends the plugin manager. A default implementation is\n    *                                        available: {@link PluginInvokeSupport}\n    */\n   constructor(options = {})\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\n      {\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\n      }\n\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\n      {\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\n      }\n\n      if (options.manager !== void 0 && !isObject(options.manager))\n      {\n         throw new TypeError(`'options.manager' is not an object.`);\n      }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\n       !isIterable(options.PluginSupport))\n      {\n         throw new TypeError(\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\n      }\n\n      // Instantiate any PluginSupport classes\n      if (isIterable(options.PluginSupport))\n      {\n         for (const PluginSupport of options.PluginSupport)\n         {\n            this.#pluginSupport.push(new PluginSupport(this));\n         }\n      }\n      else if (options.PluginSupport !== void 0)\n      {\n         this.#pluginSupport.push(new options.PluginSupport(this));\n      }\n\n      this.setOptions(options.manager);\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {PluginConfig} pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}            [moduleData] - Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(\n          `'pluginConfig.name' is not a string for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (pluginConfig.target !== void 0 && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (pluginConfig.options !== void 0 && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(\n          `'pluginConfig.options' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      if (moduleData !== void 0 && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry:\\n${JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this.#pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name} for entry:\\n${\n          JSON.stringify(pluginConfig, null, 3)}`);\n      }\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         try\n         {\n            const result = await ModuleLoader.load({ modulepath: target, resolveModule })\n\n            // Please note that a plugin or other logger must be setup on the associated eventbus.\n            if (this.#eventbus !== null)\n            {\n               this.#eventbus.trigger('log:debug',\n                `@typhonjs-plugin/manager - ${result.isESM ? 'import' : 'require'}: ${result.loadpath}`);\n            }\n\n            instance = result.instance;\n            type = result.type;\n         }\n         catch (err)\n         {\n            throw new Error(`@typhonjs-plugin/manager - Could not load target: ${target}\\n\\nPluginConfig:\\n`\n             + `${JSON.stringify(pluginConfig, null, 3)}\\n\\n${err}`);\n         }\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            target,\n            targetEscaped: escapeTarget(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['manager']);\n\n      const eventbusProxy = this.#eventbus !== null && this.#eventbus !== void 0 ?\n       new EventbusProxy(this.#eventbus) /* c8 ignore next */ : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this.#pluginMap.set(pluginConfig.name, entry);\n\n      // Invokes the private internal async events method which allows skipping of error checking.\n      await invokeAsyncEvent({ method: 'onPluginLoad', manager: this, plugins: pluginConfig.name, errorCheck: false });\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this.#eventbus)\n      {\n         await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {Iterable<PluginConfig>}   pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                        [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    */\n   async addAll(pluginConfigs = [], moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig} pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}            [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {Iterable<PluginConfig>}   pluginConfigs - An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                        [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventAdd ? this.addAll(pluginConfigs, moduleData) : [];\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this.#eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\n\n      const eventbusProxy = new EventbusProxy(this.#eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusSecure wrapping this eventbus is returned.\n    * It is added to `this.#eventbusSecure` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusSecure} A secure wrapper for the currently set Eventbus.\n    */\n   createEventbusSecure(name = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (this.#eventbus === null) { throw new ReferenceError('No eventbus assigned to plugin manager.'); }\n\n      const eventbusSecureObj = this.#eventbus.createSecure(name);\n\n      // Store EventbusSecure object to make sure it is destroyed when the plugin manager is destroyed.\n      this.#eventbusSecure.push(eventbusSecureObj);\n\n      return eventbusSecureObj.eventbusSecure;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Destroy any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.destroy();\n      }\n\n      this.#eventbusSecure = [];\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this.#eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this.#eventbusProxies = [];\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      const results = await this.removeAll();\n\n      if (this.#eventbus !== null && this.#eventbus !== void 0)\n      {\n         this.#eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugins, this);\n         this.#eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         await pluginSupport.destroy({ eventbus: this.#eventbus, eventPrepend: this._eventPrepend });\n      }\n\n      this.#pluginSupport = [];\n      this.#pluginMap = null;\n      this.#eventbus = null;\n\n      return results;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async _destroyEventbus()\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventDestroy ? this.destroy() : [];\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this.#pluginMap === null || this.#pluginMap === void 0;\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\n    *                                                plugins.\n    */\n   getEnabled({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.enabled;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this.#pluginMap.get(plugin);\n         const loaded = entry !== void 0;\n         results.push({ plugin, enabled: loaded && entry.enabled, loaded });\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const [plugin, entry] of this.#pluginMap.entries())\n         {\n            const loaded = entry !== void 0;\n            results.push({ plugin, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {Eventbus} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this.#options));\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {object}          opts - Options object.\n    *\n    * @param {string|RegExp}   opts.event - Event name or RegExp to match event names.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginByEvent({ event = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof event !== 'string' && !(event instanceof RegExp))\n      {\n         throw new TypeError(`'event' is not a string or RegExp.`);\n      }\n\n      const pluginEvents = this.getPluginEvents();\n\n      const results = [];\n\n      if (typeof event === 'string')\n      {\n         for (const entry of pluginEvents)\n         {\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\n         }\n      }\n      else\n      {\n         for (const entry of pluginEvents)\n         {\n            for (const eventEntry of entry.events)\n            {\n               if (event.test(eventEntry))\n               {\n                  results.push(entry.plugin);\n                  break;\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {PluginData|PluginData[]|undefined} The plugin data for a plugin or list of plugins.\n    */\n   getPluginData({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 ? JSON.parse(JSON.stringify(entry.data)) : void 0;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.#pluginMap.get(name);\n\n         if (entry !== void 0)\n         {\n            results.push(JSON.parse(JSON.stringify(entry.data)));\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push(JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets a PluginEntry instance for the given plugin name.\n    *\n    * @param {string} plugin - The plugin name to get.\n    *\n    * @returns {void|PluginEntry} The PluginEntry for the given plugin name.\n    */\n   getPluginEntry(plugin)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.get(plugin)\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {object}                  [opts] - Options object. If undefined all plugin data is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} Event binding names registered from the plugin.\n    */\n   getPluginEvents({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n         return entry !== void 0 && entry.eventbusProxy ?\n          Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : [];\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this.#pluginMap.get(plugin);\n\n         if (entry !== void 0)\n         {\n            results.push({\n               plugin,\n               events: entry.eventbusProxy ?\n                Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\n            });\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            if (entry !== void 0)\n            {\n               results.push({\n                  plugin: entry.name,\n                  events: entry.eventbusProxy ?\n                   Array.from(entry.eventbusProxy.proxyKeys()).sort() /* c8 ignore next */ : []\n               });\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names).\n    *\n    * @returns {Iterable<string>} An iterable of plugin map keys.\n    */\n   getPluginMapKeys()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.keys();\n   }\n\n   /**\n    * Returns an iterable of plugin map keys (plugin names).\n    *\n    * @returns {Iterable<PluginEntry>} An iterable of plugin map keys.\n    */\n   getPluginMapValues()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.#pluginMap.values();\n   }\n\n   /**\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\n    *\n    * @param {object}  [opts] - Options object.\n    *\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames({ enabled = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = [];\n\n      for (const entry of this.#pluginMap.values())\n      {\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results.sort();\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name(s). If no options are provided then\n     * the result will be if any plugins are loaded.\n    *\n    * @param {object}                  [opts] - Options object. If undefined returns whether there are any plugins.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to check existence.\n    *\n    * @returns {boolean} True if a plugin exists.\n    */\n   hasPlugins({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return whether a single plugin exists.\n      if (typeof plugins === 'string')\n      {\n         return this.#pluginMap.has(plugins);\n      }\n\n      let count = 0;\n\n      // Return whether all plugins specified exist.\n      for (const name of plugins)\n      {\n         if (!this.#pluginMap.has(name)) { return false; }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so simply check size of the map.\n      if (count === 0)\n      {\n         return this.#pluginMap.size !== 0;\n      }\n\n      return true;\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\n    * automatically.\n    *\n    * @param {object}                  opts - Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async remove({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      const removeEntry = async (entry) =>\n      {\n         const errors = [];\n\n         const pluginName = entry.name;\n\n         try\n         {\n            // Invokes the private internal async events method which allows skipping of error checking.\n            await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, plugins: pluginName, errorCheck: false });\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         try\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            entry.instance._eventbus = void 0;\n         }\n         catch (err) { /* noop */ }\n\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n         this.#pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         try\n         {\n            if (this.#eventbus)\n            {\n               await this.#eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n                JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         return { plugin: pluginName, success: errors.length === 0, errors };\n      };\n\n      const results = [];\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this.#pluginMap.get(plugins);\n\n         if (entry !== void 0)\n         {\n            results.push(await removeEntry(entry));\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this.#pluginMap.get(name);\n\n            if (entry !== void 0)\n            {\n               results.push(await removeEntry(entry));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.remove({ plugins: Array.from(this.#pluginMap.keys()) });\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {object}                  opts - Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeEventbus(opts)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventRemoval ? this.remove(opts) : [];\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this.#options.noEventRemoval ? this.removeAll() : [];\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            opts - Options object.\n    *\n    * @param {boolean}           opts.enabled - The enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] - Plugin name or iterable list of names to set state.\n    */\n   setEnabled({ enabled, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry !== void 0)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this.#eventbus)\n            {\n               this.#eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         setEntryEnabled(this.#pluginMap.get(plugins));\n      }\n\n      let count = 0;\n\n      // First attempt to iterate through plugins.\n      for (const name of plugins)\n      {\n         setEntryEnabled(this.#pluginMap.get(name));\n         count++;\n      }\n\n      // If plugins is empty then set all plugins enabled state.\n      if (count === 0)\n      {\n         for (const entry of this.#pluginMap.values())\n         {\n            setEntryEnabled(entry);\n         }\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent setEnabled if optional `noEventSetEnabled` is true. This\n    * disables the ability for setting plugin enabled state via events preventing any external code from setting state.\n    *\n    * @param {object}   opts - Options object.\n    *\n    * @private\n    */\n   _setEnabledEventbus(opts)\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventSetEnabled) { this.setEnabled(opts); }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts - An options object.\n    *\n    * @param {Eventbus}   opts.eventbus - The new eventbus to associate.\n    *\n    * @param {string}     [opts.eventPrepend='plugins'] - An optional string to prepend to all of the event\n    *                                                     binding targets.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this.#eventbus) { return; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this.#pluginMap.size > 0)\n      {\n         // Invokes the private internal async events method which allows skipping of error checking.\n         await invokeAsyncEvent({ method: 'onPluginUnload', manager: this, errorCheck: false });\n\n         for (const entry of this.#pluginMap.values())\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            try\n            {\n               entry.instance._eventbus = void 0;\n            }\n            /* c8 ignore next */\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.manager.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n         }\n\n         // Invokes the private internal async events method which allows skipping of error checking.\n         await invokeAsyncEvent({ method: 'onPluginLoad', manager: this, errorCheck: false });\n      }\n\n      if (this.#eventbus !== null)\n      {\n         this.#eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\n         this.#eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this.#eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this.#eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugins, this);\n         this.#eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this.#eventbus.off(`${oldPrepend}:set:enabled`, this._setEnabledEventbus, this);\n         this.#eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this, true);\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this, true);\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this, true);\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this, true);\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this, true);\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugins, this, true);\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this, true);\n      eventbus.on(`${eventPrepend}:set:enabled`, this._setEnabledEventbus, this, true);\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this, true);\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setEventbus({\n            oldEventbus: this.#eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      // Set the new eventbus for any EventbusSecure instances created.\n      for (const eventbusSecureObj of this.#eventbusSecure)\n      {\n         eventbusSecureObj.setEventbus(eventbus);\n      }\n\n      this.#eventbus = eventbus;\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.noEventAdd === 'boolean') { this.#options.noEventAdd = options.noEventAdd; }\n\n      if (typeof options.noEventDestroy === 'boolean') { this.#options.noEventDestroy = options.noEventDestroy; }\n\n      if (typeof options.noEventRemoval === 'boolean') { this.#options.noEventRemoval = options.noEventRemoval; }\n\n      if (typeof options.noEventSetEnabled === 'boolean')\n      {\n         this.#options.noEventSetEnabled = options.noEventSetEnabled;\n      }\n\n      if (typeof options.noEventSetOptions === 'boolean')\n      {\n         this.#options.noEventSetOptions = options.noEventSetOptions;\n      }\n\n      if (typeof options.throwNoMethod === 'boolean') { this.#options.throwNoMethod = options.throwNoMethod; }\n\n      if (typeof options.throwNoPlugin === 'boolean') { this.#options.throwNoPlugin = options.throwNoPlugin; }\n\n      for (const pluginSupport of this.#pluginSupport)\n      {\n         pluginSupport.setOptions(options);\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventSetOptions` is\n    * enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options = {})\n   {\n      /* c8 ignore next */\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this.#options.noEventSetOptions) { this.setOptions(options); }\n   }\n}\n"],"names":["EventbusSecure","eventbus","name","TypeError","eventbusSecure","destroy","isDestroyed","this","setEventbus","_classPrivateFieldGet","regex","ReferenceError","entry","keys","e","trigger","args","r","triggerAsync","triggerDefer","triggerSync","s_URL_REGEX","PluginEntry","constructor","data","instance","eventbusProxy","enabled","Array","isArray","event","on","from","proxyEntries","off","deepFreeze","skipFreezeKeys","_deepFreeze","isIterable","object","Symbol","iterator","isObject","cntr","length","key","hasOwnProperty","includes","Object","freeze","PluginInvokeEvent","copyProps","passthruProps","assign","JSON","parse","stringify","pluginName","pluginOptions","async","invokeAsyncEvent","method","manager","plugins","options","errorCheck","getOptions","getPluginMapKeys","pluginInvokeCount","pluginInvokeNames","hasMethod","hasPlugin","ev","results","getPluginEntry","plugin","result","push","throwNoPlugin","Error","throwNoMethod","$$plugin_invoke_count","$$plugin_invoke_names","Promise","all","s_REGEX_ESCAPE_RELATIVE","s_REGEX_ESCAPE_FORWARD","s_REGEX_STRING_URL","escapeTarget","target","targetEscaped","URL","pathname","match","replace","isValidConfig","pluginConfig","module","onPluginLoad","default","PluginInvokeSupport","pluginManager","eventPrepend","invokeAsync","getMethodNames","invoke","invokeSync","invokeSyncEvent","anyEnabledState","count","s_GET_ALL_PROPERTY_NAMES","getPluginMapValues","sort","isArgsArray","then","values","filtered","filter","oldEventbus","newEventbus","oldPrepend","newPrepend","setOptions","obj","props","getOwnPropertyNames","forEach","prop","indexOf","getPrototypeOf","prototype","noEventAdd","noEventDestroy","noEventRemoval","noEventSetEnabled","noEventSetOptions","Map","PluginSupport","Eventbus","moduleData","has","type","modulepath","resolveModule","import","loadpath","toString","filepath","isESM","load","err","pluginData","_eventPrepend","scopedName","EventbusProxy","set","pluginConfigs","pluginsData","add","addAll","createEventbusProxy","createEventbusSecure","eventbusSecureObj","createSecure","removeAll","_addEventbus","_addAllEventbus","_destroyEventbus","_removeEventbus","_removeAllEventbus","getEnabled","getPluginByEvent","getPluginData","getPluginEvents","getPluginNames","hasPlugins","_setEnabledEventbus","_setOptionsEventbus","pluginSupport","get","loaded","entries","getEventbus","RegExp","pluginEvents","events","eventEntry","test","proxyKeys","size","removeEntry","errors","_this","_eventbus","delete","success","remove","opts","setEnabled","setEntryEnabled"],"mappings":"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"}