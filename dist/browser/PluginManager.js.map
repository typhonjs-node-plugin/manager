{"version":3,"file":"PluginManager.js","sources":["../../node_modules/@typhonjs-plugin/eventbus/src/utils.js","../../node_modules/@typhonjs-plugin/eventbus/src/EventbusProxy.js","../../node_modules/@typhonjs-plugin/eventbus/src/Eventbus.js","../../src/PluginEntry.js","../../src/PluginEvent.js","../../src/utils/escapeTarget.js","../../src/utils/isValidConfig.js","../../node_modules/@typhonjs-utils/object/src/objectUtil.js","../../src/AbstractPluginManager.js","../../src/support/PluginSupport.js","../../src/browser/PluginManager.js"],"sourcesContent":["/**\n * Regular expression used to split event strings.\n *\n * @type {RegExp}\n */\nexport const eventSplitter = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee    - Event operation to invoke.\n * @param {Events} events        - Events object\n * @param {string|object} name   - A single event name, compound event names, or a hash of event names.\n * @param {Function} callback    - Event callback function\n * @param {object}   opts        - Optional parameters\n * @returns {Events} Events object\n */\nexport function eventsAPI(iteratee, events, name, callback, opts)\n{\n   let i = 0, names;\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = objectKeys(name); i < names.length; i++)\n      {\n         events = eventsAPI(iteratee, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++)\n      {\n         events = iteratee(events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n   }\n   return events;\n}\n\n/**\n * Provides  protected Object.keys functionality.\n *\n * @param {object}   object - Object to retrieve keys.\n *\n * @returns {string[]} Keys of object if any.\n */\nexport const objectKeys = (object) =>\n{\n   return object === null || typeof object !== 'object' ? [] : Object.keys(object);\n};\n\n/**\n * Reduces the event callbacks into a map of `{event: beforeWrapper}`. `after` unbinds the `beforeWrapper` after\n * it has been called the number of times specified by options.count.\n *\n * @param {Events}   map      - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   opts    - Function to invoke after event has been triggered once; `off()`\n * @returns {Events} The Events object.\n */\nexport function beforeMap(map, name, callback, opts)\n{\n   const after = opts.after;\n   const count = opts.count + 1;\n\n   if (callback)\n   {\n      const beforeWrapper = map[name] = s_BEFORE(count, function()\n      {\n         return callback.apply(this, arguments);\n      }, () => { after(name, beforeWrapper); });\n\n      beforeWrapper._callback = callback;\n   }\n   return map;\n}\n\n/**\n * Creates a function that invokes `before`, with the `this` binding and arguments of the created function, while\n * it's called less than `count` times. Subsequent calls to the created function return the result of the last `before`\n * invocation.\n *\n * `after` is invoked after the count is reduced.\n *\n * @param {number} count The number of calls at which `before` is no longer invoked and then `after` is invoked.\n * @param {Function} before The function to restrict.\n * @param {Function} after The function to invoke after count number of calls.\n * @returns {Function} Returns the new restricted function.\n */\nconst s_BEFORE = function(count, before, after)\n{\n   let result;\n\n   return function(...args)\n   {\n      if (--count > 0) { result = before.apply(this, args); }\n\n      if (count <= 1)\n      {\n         if (after) { after.apply(this, args); }\n         after = void 0;\n         before = void 0;\n      }\n\n      return result;\n   };\n};\n\n/**\n * @typedef {object} EventData The callback data for an event.\n *\n * @property {Function} callback - Callback function\n * @property {object} context -\n * @property {object} ctx -\n * @property {object} listening -\n */\n\n/**\n * @typedef {object.<string, EventData[]>} Events Event data stored by event name.\n */\n","import * as Utils from './utils.js';\n\n/**\n * EventbusProxy provides a protected proxy of another Eventbus instance.\n *\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\n *\n * EventbusProxy provides the on / off, before, once, and trigger methods with the same signatures as found in\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\n *\n * Finally the EventbusProxy only allows events registered through it to be turned off providing a buffer between\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\n */\nexport default class EventbusProxy\n{\n   /**\n    * Creates the event proxy with an existing instance of Eventbus.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    */\n   constructor(eventbus)\n   {\n      /**\n       * Stores the target eventbus.\n       *\n       * @type {Eventbus}\n       * @private\n       */\n      this._eventbus = eventbus;\n\n      /**\n       * Stores all proxied event bindings.\n       *\n       * @type {Events}\n       * @private\n       */\n      this._events = void 0;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}         count Number of times the function will fire before being removed.\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         context Event context\n    *\n    * @returns {EventbusProxy} This Eventbus instance.\n    */\n   before(count, name, callback, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count,\n         after: this.off.bind(this)\n      });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\n    * after `destroy` has been called result in a ReferenceError thrown.\n    */\n   destroy()\n   {\n      if (this._eventbus !== null)\n      {\n         this.off();\n      }\n\n      this._events = void 0;\n\n      this._eventbus = null;\n   }\n\n   /**\n    * Returns an iterable for all events from the proxied eventbus yielding an array with event name, callback function,\n    * and event context.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this._eventbus.entries(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns the current proxied eventbus event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get eventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.eventCount;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of proxied eventbus event listeners.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this._eventbus.keys(regex))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns whether this EventbusProxy has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this._eventbus === null;\n   }\n\n   /**\n    * Returns the target eventbus name.\n    *\n    * @returns {string|*} The target eventbus name.\n    */\n   get name()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.name;\n   }\n\n   /**\n    * Remove a previously-bound proxied event binding.\n    *\n    * Please see {@link Eventbus#off}.\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       [callback] Event callback function\n    *\n    * @param {object}         [context] Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   off(name = void 0, callback = void 0, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._events = Utils.eventsAPI(s_OFF_API, this._events || {}, name, callback, {\n         context,\n         eventbus: this._eventbus\n      });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * This is proxied through `listenTo` of an internal Events instance instead of directly modifying the target\n    * eventbus.\n    *\n    * Please see {@link Eventbus#on}.\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         context  Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy\n    */\n   on(name, callback, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      let targetContext;\n\n      // Handle the case of event maps and callback being the context. Also applies this EventbusProxy as the default\n      // context when none supplied.\n      if (name !== null && typeof name === 'object')\n      {\n         targetContext = callback !== void 0 ? callback : this;\n      }\n      else\n      {\n         targetContext = context || this;\n      }\n\n      this._events = Utils.eventsAPI(s_ON_API, this._events || {}, name, callback, { context: targetContext });\n\n      this._eventbus.on(name, callback, targetContext);\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @see http://backbonejs.org/#Events-once\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         context Event context\n    *\n    * @returns {EventbusProxy} This Eventbus instance.\n    */\n   once(name, callback, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count: 1,\n         after: this.off.bind(this)\n      });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Returns an iterable for all stored locally proxied events yielding an array with event name, callback\n    * function, and event context.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyEntries(regex = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this._events) { return; }\n\n      if (regex)\n      {\n         for (const name in this._events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this._events[name])\n               {\n                  yield [name, event.callback, event.context];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            for (const event of this._events[name])\n            {\n               yield [name, event.callback, event.context];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current proxied event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get proxyEventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this._events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this._events) { count += this._events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of the locally proxied event names.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *proxyKeys(regex = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this._events) { return; }\n\n      if (regex)\n      {\n         for (const name in this._events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * Please see {@link Eventbus#trigger}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   trigger()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.trigger(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * Please see {@link Eventbus#triggerAsync}.\n    *\n    * @returns {Promise} A Promise to returning any results.\n    */\n   triggerAsync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerAsync(...arguments);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * Please see {@link Eventbus#triggerDefer}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   triggerDefer()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.triggerDefer(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * Please see {@link Eventbus#triggerSync}.\n    *\n    * @returns {*|Array.<*>} An Array of returned results.\n    */\n   triggerSync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerSync(...arguments);\n   }\n}\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {Events}   events Events object\n *\n * @param {string}   name Event name\n *\n * @param {Function} callback Event callback\n *\n * @param {object}   opts  Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, opts) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = opts.context;\n   const eventbus = opts.eventbus;\n\n   const names = name ? [name] : Utils.objectKeys(events);\n\n   for (let i = 0; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         eventbus.off(name, callback, context);\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events Events object\n *\n * @param {string}   name Event name\n *\n * @param {Function} callback Event callback\n *\n * @param {object}   opts Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, opts) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = opts.context;\n\n      handlers.push({ callback, context });\n   }\n\n   return events;\n};\n\n/**\n * @typedef {object} EventData The callback data for an event.\n *\n * @property {Function} callback - Callback function\n * @property {object} context -\n * @property {object} ctx -\n * @property {object} listening -\n */\n\n/**\n * @typedef {object.<string, EventData[]>} Events Event data stored by event name.\n */\n","import EventbusProxy from './EventbusProxy.js';\n\nimport * as Utils    from './utils.js';\n\n/**\n * `@typhonjs-plugin/eventbus` / Provides the ability to bind and trigger custom named events.\n *\n * This module is an evolution of Backbone Events. (http://backbonejs.org/#Events). Eventbus extends the\n * functionality provided in Backbone Events with additional triggering methods to receive asynchronous and\n * synchronous results.\n *\n * ---------------\n */\nexport default class Eventbus\n{\n   /**\n    * Provides a constructor which optionally takes the eventbus name.\n    *\n    * @param {string}   eventbusName - Optional eventbus name.\n    */\n   constructor(eventbusName = '')\n   {\n      if (typeof eventbusName !== 'string') { throw new TypeError(`'eventbusName' is not a string`); }\n\n      /**\n       * Stores the name of this eventbus.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventbusName = eventbusName;\n\n      /**\n       * Stores the events map for associated events and callback / context data.\n       *\n       * @type {Events}\n       * @private\n       */\n      this._events = void 0;\n\n      /**\n       * Stores the Listening instances for this context.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeners = void 0;\n\n      /**\n       * Stores the Listening instances for other contexts.\n       *\n       * @type {object.<string, Listening>}\n       * @private\n       */\n      this._listeningTo = void 0;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire several times up to the count specified before being\n    * removed. When multiple events are passed in using the space separated syntax, the event\n    * will fire count times for every event you passed in, not once for a combination of all events.\n    *\n    * @param {number}         count Number of times the function will fire before being removed.\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback - Event callback function\n    *\n    * @param {object}         context  - Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   before(count, name, callback, context = void 0)\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count,\n         after: this.off.bind(this)\n      });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Creates an EventProxy wrapping this events instance. An EventProxy proxies events allowing all listeners added\n    * to be easily removed from the wrapped Events instance.\n    *\n    * @returns {EventbusProxy} A new EventbusProxy for this eventbus.\n    */\n   createProxy()\n   {\n      return new EventbusProxy(this);\n   }\n\n   /**\n    * Returns an iterable for all stored events yielding an array with event name, callback function, and event context.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *entries(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this._events) { return; }\n\n      if (regex)\n      {\n         for (const name in this._events)\n         {\n            if (regex.test(name))\n            {\n               for (const event of this._events[name])\n               {\n                  yield [name, event.callback, event.ctx];\n               }\n            }\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            for (const event of this._events[name])\n            {\n               yield [name, event.callback, event.ctx];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current event count.\n    *\n    * @returns {number} The current event count.\n    */\n   get eventCount()\n   {\n      if (!this._events) { return 0; }\n\n      let count = 0;\n\n      for (const name in this._events) { count += this._events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns an iterable for the event names / keys of registered event listeners.\n    *\n    * @param {RegExp} [regex] Optional regular expression to filter event names.\n    *\n    * @yields\n    */\n   *keys(regex = void 0)\n   {\n      if (regex !== void 0 && !(regex instanceof RegExp)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this._events) { return; }\n\n      if (regex)\n      {\n         for (const name in this._events)\n         {\n            if (regex.test(name))\n            {\n               yield name;\n            }\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            yield name;\n         }\n      }\n   }\n\n   /**\n    * Returns the current eventbus name.\n    *\n    * @returns {string|*} The current eventbus name.\n    */\n   get name()\n   {\n      return this._eventbusName;\n   }\n\n   /**\n    * Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\n    * be removed all at once later on. The callback will always be called with object as context.\n    *\n    * @example\n    * view.listenTo(model, 'change', view.render);\n    *\n    * @see http://backbonejs.org/#Events-listenTo\n    *\n    * @param {object}         obj Event context\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenTo(obj, name, callback)\n   {\n      if (!obj) { return this; }\n      const id = obj._listenId || (obj._listenId = s_UNIQUE_ID('l'));\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\n      let listening = _listening = listeningTo[id];\n\n      // This object is not listening to any other events on `obj` yet.\n      // Setup the necessary references to track the listening callbacks.\n      if (!listening)\n      {\n         this._listenId || (this._listenId = s_UNIQUE_ID('l'));\n         listening = _listening = listeningTo[id] = new Listening(this, obj);\n      }\n\n      // Bind callbacks on obj.\n      const error = s_TRY_CATCH_ON(obj, name, callback, this);\n      _listening = void 0;\n\n      if (error) { throw error; }\n\n      // If the target obj is not an Eventbus, track events manually.\n      if (listening.interop) { listening.on(name, callback); }\n\n      return this;\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire count times before being removed.\n    *\n    * @param {number}         count Number of times the function will fire before being removed.\n    *\n    * @param {object}         obj Event context\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToBefore(count, obj, name, callback)\n   {\n      if (!Number.isInteger(count)) { throw new TypeError(`'count' is not an integer`); }\n\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\n    *\n    * @see http://backbonejs.org/#Events-listenToOnce\n    *\n    * @param {object}         obj Event context\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToOnce(obj, name, callback)\n   {\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count: 1,\n         after: this.stopListening.bind(this, obj)\n      });\n\n      return this.listenTo(obj, events);\n   }\n\n   /**\n    * Remove a previously-bound callback function from an object. If no context is specified, all of the versions of\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\n    * will be removed. If no event is specified, callbacks for all events will be removed.\n    *\n    * Note that calling model.off(), for example, will indeed remove all events on the model — including events that\n    * Backbone uses for internal bookkeeping.\n    *\n    * @example\n    * // Removes just the `onChange` callback.\n    * object.off(\"change\", onChange);\n    *\n    * // Removes all \"change\" callbacks.\n    * object.off(\"change\");\n    *\n    * // Removes the `onChange` callback for all events.\n    * object.off(null, onChange);\n    *\n    * // Removes all callbacks for `context` for all events.\n    * object.off(null, null, context);\n    *\n    * // Removes all callbacks on `object`.\n    * object.off();\n    *\n    * @see http://backbonejs.org/#Events-off\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       [callback] Event callback function\n    *\n    * @param {object}         [context] Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   off(name, callback = void 0, context = void 0)\n   {\n      if (!this._events) { return this; }\n\n      this._events = Utils.eventsAPI(s_OFF_API, this._events, name, callback, { context, listeners: this._listeners });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\n    * model.on('change', this.render, this) or model.on({change: this.render}, this).\n    *\n    * @example\n    * The event string may also be a space-delimited list of several events...\n    * book.on(\"change:title change:author\", ...);\n    *\n    * @example\n    * Callbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of\n    * the event as the first argument. For example, to proxy all events from one object to another:\n    * proxy.on(\"all\", function(eventName) {\n    *    object.trigger(eventName);\n    * });\n    *\n    * @example\n    * All Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n    * book.on({\n    *    \"change:author\": authorPane.update,\n    *    \"change:title change:subtitle\": titleView.update,\n    *    \"destroy\": bookView.remove\n    * });\n    *\n    * @see http://backbonejs.org/#Events-on\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         [context] Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      this._events = Utils.eventsAPI(s_ON_API, this._events || {}, name, callback,\n      {\n         context,\n         ctx: this,\n         listening: _listening\n      });\n\n      if (_listening)\n      {\n         const listeners = this._listeners || (this._listeners = {});\n         listeners[_listening.id] = _listening;\n\n         // Allow the listening to use a counter, instead of tracking callbacks for library interop.\n         _listening.interop = false;\n      }\n\n      return this;\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @see http://backbonejs.org/#Events-once\n    *\n    * @param {string|object}  name Event name(s) or event map\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         [context] Event context\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   once(name, callback, context = void 0)\n   {\n      // Map the event into a `{event: beforeWrapper}` object.\n      const events = Utils.eventsAPI(Utils.beforeMap, {}, name, callback, {\n         count: 1,\n         after: this.off.bind(this)\n      });\n\n      if (typeof name === 'string' && (context === null || context === void 0)) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\n    * on a specific object, or a specific event, or just a specific callback.\n    *\n    * @example\n    * view.stopListening();\n    *\n    * view.stopListening(model);\n    *\n    * @see http://backbonejs.org/#Events-stopListening\n    *\n    * @param {object}   obj Event context\n    *\n    * @param {string}   [name] Event name(s)\n    *\n    * @param {Function} [callback] Event callback function\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   stopListening(obj, name = void 0, callback = void 0)\n   {\n      const listeningTo = this._listeningTo;\n      if (!listeningTo) { return this; }\n\n      const ids = obj ? [obj._listenId] : Utils.objectKeys(listeningTo);\n\n      for (let i = 0; i < ids.length; i++)\n      {\n         const listening = listeningTo[ids[i]];\n\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\n         if (!listening) { break; }\n\n         listening.obj.off(name, callback, this);\n\n         if (listening.interop) { listening.off(name, callback); }\n      }\n\n      return this;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @see http://backbonejs.org/#Events-trigger\n    *\n    * @param {string}   name Event name(s)\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   trigger(name)\n   {\n      if (!this._events) { return this; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_EVENTS, this._events, name, void 0, args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name Event name(s)\n    *\n    * @returns {Promise<void|*|*[]>} A Promise with any results.\n    */\n   async triggerAsync(name)\n   {\n      if (!this._events) { return void 0; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      const result = s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_ASYNC_EVENTS, this._events, name, void 0, args);\n\n      // No event callbacks were triggered.\n      if (result === void 0) { return void 0; }\n\n      // A single Promise has been returned; just return it.\n      if (!Array.isArray(result)) { return result; }\n\n      // Multiple events & callbacks have been triggered so reduce the returned array of Promises and filter all\n      // values from each Promise result removing any undefined values.\n      return Promise.all(result).then((results) =>\n      {\n         let allResults = [];\n\n         for (const pResult of results)\n         {\n            if (Array.isArray(pResult))\n            {\n               allResults = allResults.concat(pResult);\n            }\n            else if (pResult !== void 0)\n            {\n               allResults.push(pResult);\n            }\n         }\n\n         return allResults.length > 1 ? allResults : allResults.length === 1 ? allResults[0] : void 0;\n      });\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @param {string}   name Event name(s)\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   triggerDefer(name)   // eslint-disable-line  no-unused-vars\n   {\n      setTimeout(() => { this.trigger(...arguments); }, 0);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name Event name(s)\n    *\n    * @returns {void|*|*[]} The results of the event invocation.\n    */\n   triggerSync(name)\n   {\n      if (!this._events) { return void 0; }\n\n      const start = 1;\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + start]; }\n\n      return s_RESULTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_SYNC_EVENTS, this._events, name, void 0, args);\n   }\n}\n\n// Private / internal methods ---------------------------------------------------------------------------------------\n\n/**\n * Global listening object\n *\n * @type {Listening}\n */\nlet _listening;\n\n/**\n * A listening class that tracks and cleans up memory bindings when all callbacks have been offed.\n */\nclass Listening\n{\n   constructor(listener, obj)\n   {\n      this.id = listener._listenId;\n      this.listener = listener;\n      this.obj = obj;\n      this.interop = true;\n      this.count = 0;\n      this._events = void 0;\n   }\n\n   // Cleans up memory bindings between the listener and the listenee.\n   cleanup()\n   {\n      delete this.listener._listeningTo[this.obj._listenId];\n      if (!this.interop) { delete this.obj._listeners[this.id]; }\n   }\n\n   /**\n    * @see {@link Eventbus#on}\n    *\n    * @param {string|object}  name Event name(s)\n    *\n    * @param {Function}       callback Event callback function\n    *\n    * @param {object}         [context] Event context\n    *\n    * @returns {Listening} This Listening instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      this._events = Utils.eventsAPI(s_ON_API, this._events || {}, name, callback,\n      {\n         context,\n         ctx: this,\n         listening: this\n      });\n\n      return this;\n   }\n\n   /**\n    * Offs a callback (or several). Uses an optimized counter if the listenee uses Eventbus. Otherwise, falls back to\n    * manual tracking to support events library interop.\n    *\n    * @param {string|object}  name Event name(s)\n    *\n    * @param {Function}       callback Event callback function\n    */\n   off(name, callback)\n   {\n      let cleanup;\n\n      if (this.interop)\n      {\n         this._events = Utils.eventsAPI(s_OFF_API, this._events, name, callback, {\n            context: void 0,\n            listeners: void 0\n         });\n         cleanup = !this._events;\n      }\n      else\n      {\n         this.count--;\n         cleanup = this.count === 0;\n      }\n\n      if (cleanup) { this.cleanup(); }\n   }\n}\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {Events}   events Events object\n *\n * @param {string}   name Event name\n *\n * @param {Function} callback Event callback\n *\n * @param {object}   options Optional parameters\n *\n * @returns {void|Events} Events object\n */\nconst s_OFF_API = (events, name, callback, options) =>\n{\n   /* c8 ignore next 1 */\n   if (!events) { return; }\n\n   const context = options.context, listeners = options.listeners;\n   let i = 0, names;\n\n   // Delete all event listeners and \"drop\" events.\n   if (!name && !context && !callback)\n   {\n      for (names = Utils.objectKeys(listeners); i < names.length; i++)\n      {\n         listeners[names[i]].cleanup();\n      }\n      return;\n   }\n\n   names = name ? [name] : Utils.objectKeys(events);\n\n   for (; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) { break; }\n\n      // Find any remaining events.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n         if (callback && callback !== handler.callback && callback !== handler.callback._callback ||\n          context && context !== handler.context)\n         {\n            remaining.push(handler);\n         }\n         else\n         {\n            const listening = handler.listening;\n            if (listening) { listening.off(name, callback); }\n         }\n      }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {Events}   events Events object\n *\n * @param {string}   name Event name\n *\n * @param {Function} callback Event callback\n *\n * @param {object}   options Optional parameters\n *\n * @returns {Events} Events object.\n */\nconst s_ON_API = (events, name, callback, options) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = options.context, ctx = options.ctx, listening = options.listening;\n\n      if (listening) { listening.count++; }\n\n      handlers.push({ callback, context, ctx: context || ctx, listening });\n   }\n   return events;\n};\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee Trigger API\n *\n * @param {Function} iterateeTarget Internal function which is dispatched to.\n *\n * @param {Events}   events Array of stored event callback data.\n *\n * @param {string}   name Event name(s)\n *\n * @param {Function} callback callback\n *\n * @param {object}   opts Optional parameters\n *\n * @returns {*} The results of the callback if any.\n */\nconst s_RESULTS_TARGET_API = (iteratee, iterateeTarget, events, name, callback, opts) =>\n{\n   let results = void 0;\n   let i = 0, names;\n\n   // Handle the case of multiple events being triggered. The potential results of each event & callbacks must be\n   // processed into a single array of results.\n   if (name && Utils.eventSplitter.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(Utils.eventSplitter); i < names.length; i++)\n      {\n         const result = iteratee(iterateeTarget, events, names[i], callback, opts);\n\n         // Determine type of `results`; 0: undefined, 1: single value, 2: an array of values.\n         const resultsType = Array.isArray(results) ? 2 : results !== void 0 ? 1 : 0;\n\n         // Handle an array result depending on existing results value.\n         if (Array.isArray(result))\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1:\n                  // Create a new array from existing results then concat the new result array.\n                  results = [results].concat(result);\n                  break;\n               case 2:\n                  // `results` is already an array so concat the new result array.\n                  results = results.concat(result);\n                  break;\n            }\n         }\n         else if (result !== void 0)\n         {\n            switch (resultsType)\n            {\n               case 0:\n                  // Simply set results.\n                  results = result;\n                  break;\n               case 1: {\n                  // Create a new array from existing results then push the new result value.\n                  const newArray = [results];\n                  newArray.push(result);\n                  results = newArray;\n                  break;\n               }\n               case 2:\n                  // `results` is already an array so push the new result array.\n                  results.push(result);\n                  break;\n            }\n         }\n      }\n   }\n   else\n   {\n      // Just single event.\n      results = iteratee(iterateeTarget, events, name, callback, opts);\n   }\n\n   return results;\n};\n\n/**\n * Handles triggering the appropriate event callbacks.\n *\n * @param {Function} iterateeTarget Internal function which is dispatched to.\n *\n * @param {Events}   objEvents Array of stored event callback data.\n *\n * @param {string}   name Event name(s)\n *\n * @param {Function} callback callback\n *\n * @param {*[]}      args Arguments supplied to a trigger method.\n *\n * @returns {*} The results from the triggered event.\n */\nconst s_TRIGGER_API = (iterateeTarget, objEvents, name, callback, args) =>\n{\n   let result;\n\n   if (objEvents)\n   {\n      const events = objEvents[name];\n      let allEvents = objEvents.all;\n      if (events && allEvents) { allEvents = allEvents.slice(); }\n      if (events) { result = iterateeTarget(events, args); }\n      if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\n   }\n\n   return result;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments).\n *\n * @param {EventData[]} events Array of stored event callback data.\n *\n * @param {*[]}         args Event argument array\n */\nconst s_TRIGGER_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\n         return;\n      case 1:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\n         return;\n      case 2:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\n         return;\n      case 3:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\n         return;\n      default:\n         while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\n         return;\n   }\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method uses ES6 Promises and adds\n * any returned results to an array which is added to a Promise.all construction which passes back a Promise which\n * waits until all Promises complete. Any target invoked may return a Promise or any result. This is very useful to\n * use for any asynchronous operations.\n *\n * @param {EventData[]} events Array of stored event callback data.\n *\n * @param {*[]}         args Arguments supplied to `triggerAsync`.\n *\n * @returns {Promise<void|*|*[]>} A Promise of the results from the triggered event.\n */\nconst s_TRIGGER_ASYNC_EVENTS = async (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   try\n   {\n      switch (args.length)\n      {\n         case 0:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 1:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 2:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 3:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         default:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n      }\n   }\n   catch (error) // will catch synchronous event binding errors and reject again async errors.\n   {\n      return Promise.reject(error);\n   }\n\n   // If there are multiple results then use Promise.all otherwise Promise.resolve. Filter out any undefined results.\n   return results.length > 1 ? Promise.all(results).then((values) =>\n   {\n      const filtered = values.filter((entry) => entry !== void 0);\n      switch (filtered.length)\n      {\n         case 0: return void 0;\n         case 1: return filtered[0];\n         default: return filtered;\n      }\n   }) : results.length === 1 ? Promise.resolve(results[0]) : Promise.resolve();\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method synchronously passes back a\n * single value or an array with all results returned by any invoked targets.\n *\n * @param {EventData[]} events Array of stored event callback data.\n *\n * @param {*[]}         args Arguments supplied to `triggerSync`.\n *\n * @returns {void|*|*[]} The results from the triggered event.\n */\nconst s_TRIGGER_SYNC_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // Return the results array if there are more than one or just a single result.\n   return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * A try-catch guarded #on function, to prevent poisoning the global `_listening` variable. Used when attempting to\n * invoke `on` from an other eventbus / context via `listenTo`.\n *\n * @param {object}         obj Event target / context\n *\n * @param {string|object}  name Event name(s)\n *\n * @param {Function}       callback Event callback function\n *\n * @param {object}         [context] Event context\n *\n * @returns {Error} Any error if thrown.\n */\nconst s_TRY_CATCH_ON = (obj, name, callback, context) =>\n{\n   try\n   {\n      obj.on(name, callback, context);\n   }\n   catch (err)\n   {\n      return err;\n   }\n};\n\n/**\n * Generate a unique integer ID (unique within the entire client session).\n *\n * @type {number} - unique ID counter.\n */\nlet idCounter = 0;\n\n/**\n * Creates a new unique ID with a given prefix\n *\n * @param {string}   prefix - An optional prefix to add to unique ID.\n *\n * @returns {string} A new unique ID with a given prefix.\n */\nconst s_UNIQUE_ID = (prefix = '') =>\n{\n   const id = `${++idCounter}`;\n   return prefix ? `${prefix}${id}` /* c8 ignore next */ : id;\n};\n\n/**\n * @typedef {object} EventData The callback data for an event.\n *\n * @property {Function} callback - Callback function\n *\n * @property {object} context - Event context\n *\n * @property {object} ctx - Event context or local eventbus instance.\n *\n * @property {object} listening - Any associated listening instance.\n */\n\n/**\n * @typedef {object.<string, EventData[]>} Events Event data stored by event name.\n */\n","/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nexport default class PluginEntry\n{\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {PluginData}  data -  describing the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {EventbusProxy}  eventbusProxy - An EventProxy associated with the plugin wrapping the plugin manager\n    * eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      /**\n       * Data describing the plugin, manager, and optional module data.\n       *\n       * @type {PluginData}\n       * @private\n       */\n      this._data = data;\n\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = true;\n\n      /**\n       * The plugin name.\n       *\n       * @type {string}\n       * @private\n       */\n      this._name = name;\n\n      /**\n       * The loaded plugin instance.\n       *\n       * @type {object}\n       * @private\n       */\n      this._instance = instance;\n\n      /**\n       * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n       *\n       * @type {EventbusProxy}\n       * @private\n       */\n      this._eventbusProxy = eventbusProxy;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {PluginData} The associated PluginData.\n    */\n   get data() { return this._data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this._enabled; }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = enabled;\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this._eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this._instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this._name; }\n}\n","/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link AbstractPluginManager#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nexport default class PluginEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied. Invoked functions\n       * may add to or modify this data.\n       *\n       * @type {PluginEventData}\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = void 0;\n   }\n}\n","const s_REGEX_ESCAPE_RELATIVE = /^([.]{1,2}[\\\\|/])+/g;\nconst s_REGEX_ESCAPE_FORWARD = /[\\\\]/g;\nconst s_REGEX_STRING_URL = /^(https?|file):/g;\n\n/**\n * Creates an escaped path which is suitable for use in RegExp construction.\n *\n * Note: This function will throw if a malformed URL string is the target. In AbstractPluginManager this function\n * is used after the module has been loaded / is a good target.\n *\n * @param {string|URL}  target - Target full / relative path or URL to escape.\n *\n * @returns {string} The escaped target.\n */\nexport default function escapeTarget(target)\n{\n   let targetEscaped = target;\n\n   if (target instanceof URL)\n   {\n      targetEscaped = target.pathname;\n   }\n   else if (target.match(s_REGEX_STRING_URL))\n   {\n      targetEscaped = new URL(target).pathname;\n   }\n\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_RELATIVE, '');\n   targetEscaped = targetEscaped.replace(s_REGEX_ESCAPE_FORWARD, '\\\\\\\\');\n\n   return targetEscaped;\n}\n","/**\n * Performs validation of a PluginConfig.\n *\n * @param {PluginConfig}   pluginConfig A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nexport default function isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n *\n * Support for typhonjs-plugin-manager is enabled.\n */\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Tests for whether object is not null and a typeof object.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Is it an object.\n */\nexport function isObject(object)\n{\n   return object !== null && typeof object === 'object';\n}\n\n/**\n * Safely returns keys on an object or an empty array if not an object.\n *\n * @param {object} object - An object.\n *\n * @returns {string[]} Object keys\n */\nexport function objectKeys(object)\n{\n   return object !== null && typeof object === 'object' ? Object.keys(object) : [];\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (expected.indexOf(dataArray[cntr]) < 0)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && expected.indexOf(dataEntry) < 0))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && skipFreezeKeys.indexOf(key) === -1) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","import Eventbus                     from '@typhonjs-plugin/eventbus';\nimport { EventbusProxy }            from '@typhonjs-plugin/eventbus';\n\nimport PluginEntry                  from './PluginEntry.js';\nimport PluginEvent                  from './PluginEvent.js';\n\nimport escapeTarget                 from './utils/escapeTarget.js';\nimport isValidConfig                from './utils/isValidConfig.js';\n\nimport { deepFreeze, isIterable, isObject }  from '@typhonjs-utils/object';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link AbstractPluginManager#add}\n *\n * `plugins:async:add:all` - {@link AbstractPluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link AbstractPluginManager#destroy}\n *\n * `plugins:async:invoke` - {@link AbstractPluginManager#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link AbstractPluginManager#invokeAsyncEvent}\n *\n * `plugins:async:remove` - {@link AbstractPluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link AbstractPluginManager#removeAll}\n *\n * `plugins:create:eventbus:proxy` - {@link AbstractPluginManager#createEventbusProxy}\n *\n * `plugins:get:enabled` - {@link AbstractPluginManager#getEnabled}\n *\n * `plugins:get:options` - {@link AbstractPluginManager#getOptions}\n *\n * `plugins:get:plugin:by:event` - {@link PluginSupport#getPluginByEvent}\n *\n * `plugins:get:plugin:data` - {@link PluginSupport#getPluginData}\n *\n * `plugins:get:plugin:events` - {@link PluginSupport#getPluginEvents}\n *\n * `plugins:get:plugin:names` - {@link PluginSupport#getPluginNames}\n *\n * `plugins:has:plugin` - {@link AbstractPluginManager#hasPlugin}\n *\n * `plugins:invoke` - {@link AbstractPluginManager#invoke}\n *\n * `plugins:is:valid:config` - {@link AbstractPluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link AbstractPluginManager#setEnabled}\n *\n * `plugins:set:options` - {@link AbstractPluginManager#setOptions}\n *\n * `plugins:sync:invoke` - {@link AbstractPluginManager#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link AbstractPluginManager#invokeSyncEvent}\n *\n * Automatically when a plugin is loaded and unloaded respective functions `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules / CommonJS in Node and ES Modules in the browser the plugin manager is by nature\n * asynchronous for the core methods of adding / removing plugins and destroying the manager. The lifecycle methods\n * `onPluginLoad` and `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * If eventbus functionality is enabled it is important especially if using a process / global level eventbus such as\n * `@typhonjs-plugin/eventbus/instances` to call {@link AbstractPluginManager#destroy} to clean up all plugin eventbus\n * resources and the plugin manager event bindings; this is primarily a testing concern.\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * await pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * await pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n *\n * // One can also indirectly invoke any method of the plugin.\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke:sync:event', { method: 'aCoolMethod' });\n *\n * // A specific invocation just for the 'an-npm-plugin-enabled-module'\n * eventbus.triggerSync('plugins:invoke:sync:event', {\n *    method: 'aCoolMethod',\n *    plugins: 'an-npm-plugin-enabled-module'\n * });\n *\n * // The 3rd parameter will make a copy of the hash and the 4th defines a pass through object hash sending a single\n * // event / object hash to the invoked method.\n *\n * // -----------------------\n *\n * // Given that `@typhonjs-plugin/eventbus/instances` defines a global / process level eventbus you can import it in\n * // an entirely different file or even NPM module and invoke methods of loaded plugins like this:\n *\n * import eventbus from '@typhonjs-plugin/eventbus/instances';\n *\n * // Any plugin with a method named `aCoolMethod` is invoked.\n * eventbus.triggerSync('plugins:invoke', 'aCoolMethod');\n *\n * assert(eventbus.triggerSync('cool:event') === true);\n *\n * // Removes the plugin and unregisters events.\n * await eventbus.triggerAsync('plugins:remove', 'an-npm-plugin-enabled-module');\n *\n * assert(eventbus.triggerSync('cool:event') === true); // Will now fail!\n *\n * // In this case though when using the global eventbus be mindful to always call `pluginManager.destroy()` in the\n * // main thread of execution scope to remove all plugins and the plugin manager event bindings!\n */\nexport default class AbstractPluginManager\n{\n   /**\n    * Instantiates AbstractPluginManager\n    *\n    * @param {object}   [options] Provides various configuration options:\n    *\n    * @param {Eventbus} [options.eventbus] An instance of '@typhonjs-plugin/eventbus' used as the plugin\n    *                                      eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] A customized name to prepend PluginManager events on the\n    *                                                   eventbus.\n    *\n    * @param {PluginSupportImpl|Iterable<PluginSupportImpl>} [options.PluginSupport] Optional classes to pass in which\n    *                                                 extends the plugin manager. A default implementation is available:\n    *                                                 {@link PluginSupport}\n    *\n    * @param {PluginManagerOptions}  [options.manager] The plugin manager options.\n    */\n   constructor(options = {})\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.eventbus !== void 0 && !isObject(options.eventbus))\n      {\n         throw new TypeError(`'options.eventbus' is not an Eventbus.`);\n      }\n\n      if (options.eventPrepend !== void 0 && typeof options.eventPrepend !== 'string')\n      {\n         throw new TypeError(`'options.eventPrepend' is not a string.`);\n      }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function' &&\n       !isIterable(options.PluginSupport))\n      {\n         throw new TypeError(\n          `'options.PluginSupport' must be a constructor function or iterable of such matching PluginSupportImpl.`);\n      }\n\n      if (options.manager !== void 0 && !isObject(options.manager))\n      {\n         throw new TypeError(`'options.manager' is not an object.`);\n      }\n\n      /**\n       * Stores the plugins by name with an associated PluginEntry.\n       *\n       * @type {Map<string, PluginEntry>}\n       * @private\n       */\n      this._pluginMap = new Map();\n\n      /**\n       * Stores any associated eventbus.\n       *\n       * @type {Eventbus}\n       * @protected\n       */\n      this._eventbus = null;\n\n      /**\n       * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n       *\n       * @type {EventbusProxy[]}\n       * @private\n       */\n      this._eventbusProxies = [];\n\n      /**\n       * Provides an array of PluginSupportImpl interfaces to extend the plugin manager through the eventbus API.\n       *\n       * @type {PluginSupportImpl[]}\n       * @private\n       */\n      this._pluginSupport = [];\n\n      // Instantiate any PluginSupport classes\n      if (isIterable(options.PluginSupport))\n      {\n         for (const PluginSupport of options.PluginSupport)\n         {\n            this._pluginSupport.push(new PluginSupport(this));\n         }\n      }\n      else if (options.PluginSupport !== void 0)\n      {\n         this._pluginSupport.push(new options.PluginSupport(this));\n      }\n\n      /**\n       * Defines various options for the plugin manager. By default plugins are enabled, no event invoke, and no\n       * event set options are enabled; the latter two preventing invoke dispatch methods functioning on the eventbus\n       * along with not being able to set the plugin manager options by the eventbus. These must be explicitly turned\n       * off.\n       *\n       * @type {PluginManagerOptions}\n       * @private\n       */\n      this._options =\n      {\n         pluginsEnabled: true,\n         noEventAdd: false,\n         noEventDestroy: false,\n         noEventInvoke: true,\n         noEventOptions: true,\n         noEventRemoval: false,\n         throwNoMethod: false,\n         throwNoPlugin: false\n      };\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n\n      this.setOptions(options.manager);\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {PluginConfig}   pluginConfig Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(`'pluginConfig.name' is not a string for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(`'pluginConfig.options' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof moduleData !== 'undefined' && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this._pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name}.`);\n      }\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         // Defer to child class to load module in Node or the browser.\n         const result = await this._loadModule(target);\n\n         instance = result.instance;\n         type = result.type;\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`,\n            target,\n            targetEscaped: escapeTarget(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['eventPrepend', 'scopedName']);\n\n      const eventbusProxy = this._eventbus !== null && typeof this._eventbus !== 'undefined' ?\n       new EventbusProxy(this._eventbus) : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this._pluginMap.set(pluginConfig.name, entry);\n\n      // Invoke private module method which allows skipping optional error checking.\n      await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, pluginConfig.name, this._pluginMap, this._options, false);\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this._eventbus)\n      {\n         await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {Iterable<PluginConfig>}  pluginConfigs An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                  [moduleData] Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    */\n   async addAll(pluginConfigs = [], moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isIterable(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not iterable.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig}   pluginConfig Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData>} The PluginData that represents the plugin added.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {Iterable<PluginConfig>}  pluginConfigs An iterable list of plugin config object hash entries.\n    *\n    * @param {object}                  [moduleData] Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all added plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventAdd) { return this.addAll(pluginConfigs, moduleData); }\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this._eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (!(this._eventbus instanceof Eventbus))\n      {\n         throw new ReferenceError('No eventbus assigned to plugin manager.');\n      }\n\n      const eventbusProxy = new EventbusProxy(this._eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this._eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      const results = await this.removeAll();\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this._eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this._eventbusProxies = [];\n\n      if (this._eventbus !== null && this._eventbus !== void 0)\n      {\n         this._eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke`, this._invokeAsyncEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke:event`, this._invokeAsyncEventEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${this._eventPrepend}:get:enabled`, this.getEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this._eventbus.off(`${this._eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         this._eventbus.off(`${this._eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this._eventbus.off(`${this._eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this._eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${this._eventPrepend}:invoke`, this._invokeEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${this._eventPrepend}:set:enabled`, this.setEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke`, this._invokeSyncEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke:event`, this._invokeSyncEventEventbus, this);\n      }\n\n      for (const pluginSupport of this._pluginSupport)\n      {\n         await pluginSupport.destroy({ eventbus: this._eventbus, eventPrepend: this._eventPrepend });\n      }\n\n      this._pluginSupport = [];\n      this._pluginMap = null;\n      this._eventbus = null;\n\n      return results;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async _destroyEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventDestroy) { return this.destroy(); }\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this._pluginMap === null || this._pluginMap === void 0;\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|DataOutPluginEnabled[]} Enabled state for single plugin or array of results for multiple\n    *                                           plugins.\n    */\n   getEnabled({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this._pluginMap.get(plugins);\n         return entry instanceof PluginEntry && entry.enabled;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this._pluginMap.get(name);\n         const loaded = entry instanceof PluginEntry;\n         results.push({ name, enabled: loaded && entry.enabled, loaded });\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const [name, entry] of this._pluginMap.entries())\n         {\n            const loaded = entry instanceof PluginEntry;\n            results.push({ name, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {Eventbus} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this._eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this._options));\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} - Event binding names registered from the plugin.\n    */\n   getPluginByEvent({ event = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof event !== 'string' && !(event instanceof RegExp))\n      {\n         throw new TypeError(`'event' is not a string or RegExp.`);\n      }\n\n      const pluginEvents = this.getPluginEvents();\n\n      const results = [];\n\n      if (typeof event === 'string')\n      {\n         for (const entry of pluginEvents)\n         {\n            if (entry.events.includes(event)) { results.push(entry.plugin); }\n         }\n      }\n      else\n      {\n         for (const entry of pluginEvents)\n         {\n            for (const eventEntry of entry.events)\n            {\n               if (event.test(eventEntry))\n               {\n                  results.push(entry.plugin);\n                  break;\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Gets the plugin data for a plugin, list of plugins, or all plugins.\n    *\n    * @param {object}                  [opts] Options object. If undefined all plugin data is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names to get plugin data.\n    *\n    * @returns {PluginData|PluginData[]|undefined} The plugin data for a plugin or list of plugins.\n    */\n   getPluginData({ plugins = [] } = {})\n   {\n      if (this.isDestroyed)\n      { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this._pluginMap.get(plugins);\n         return entry instanceof PluginEntry ? JSON.parse(JSON.stringify(entry.data)) : void 0;\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this._pluginMap.get(name);\n\n         if (entry instanceof PluginEntry)\n         {\n            results.push(JSON.parse(JSON.stringify(entry.data)));\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this._pluginMap.values())\n         {\n            if (entry instanceof PluginEntry)\n            {\n               results.push(JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]|DataOutPluginEvents[]} - Event binding names registered from the plugin.\n    */\n   getPluginEvents({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Return a PluginData result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this._pluginMap.get(plugins);\n         return entry instanceof PluginEntry && entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()) : [];\n      }\n\n      const results = [];\n\n      let count = 0;\n\n      for (const plugin of plugins)\n      {\n         const entry = this._pluginMap.get(plugin);\n\n         if (entry instanceof PluginEntry)\n         {\n            results.push({\n               plugin,\n               events: entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()).sort() : []\n            });\n         }\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this._pluginMap.values())\n         {\n            if (entry instanceof PluginEntry)\n            {\n               results.push({\n                  plugin: entry.name,\n                  events: entry.eventbusProxy ? Array.from(entry.eventbusProxy.proxyKeys()).sort() : []\n               });\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all plugin names or if enabled is set then return plugins matching the enabled state.\n    *\n    * @param {object}  [opts] Options object.\n    *\n    * @param {boolean} [opts.enabled] - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames({ enabled = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = [];\n\n      for (const entry of this._pluginMap.values())\n      {\n         if (anyEnabledState || entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results.sort();\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name.\n    *\n    * @param {object}                  [opts] Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>} [opts.plugin] Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean} True if a plugin exists.\n    */\n   hasPlugin({ plugin = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugin !== 'string') { throw new TypeError(`'plugin' is not a string.`); }\n\n      return this._pluginMap.has(plugin);\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given method name.\n    *\n    * @param {object}   opts Options object.\n    *\n    * @param {string}   opts.method Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Specific plugin name or iterable list of plugin names to invoke.\n    */\n   invoke({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (plugins === void 0) { plugins = this._pluginMap.keys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return; }\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this._pluginMap.get(plugins);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager dispatch for invoke if options\n    * `noEventInvoke` is enabled.\n    *\n    * @private\n    */\n   _invokeEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventInvoke) { this.invoke(...arguments); }\n   }\n\n   /**\n    * This dispatch method is asynchronous and adds any returned results to an array which is resolved via Promise.all\n    * Any target invoked may return a Promise or any result.\n    *\n    * @param {object}   opts Options object.\n    *\n    * @param {string}   opts.method Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<*|*[]>} A single result or array of results.\n    */\n   async invokeAsync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (typeof plugins === 'undefined') { plugins = this._pluginMap.keys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this._pluginMap.get(plugins);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n          throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results).then((values) =>\n      {\n         const filtered = values.filter((entry) => entry !== void 0);\n         switch (filtered.length)\n         {\n            case 0: return void 0;\n            case 1: return filtered[0];\n            default: return filtered;\n         }\n      }) : result;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager dispatch for invokeAsync if options\n    * `noEventInvoke` is enabled.\n    *\n    * @returns {Promise<*|*[]>} A single result or array of results.\n    * @private\n    */\n   async _invokeAsyncEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventInvoke) { return this.invokeAsync(...arguments); }\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}   opts Options object.\n    *\n    * @param {string}   opts.method Method name to invoke.\n    *\n    * @param {object}   [opts.copyProps] Properties that are copied.\n    *\n    * @param {object}   [opts.passthruProps] Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {Promise<PluginEventData>} The PluginEvent data.\n    */\n   async invokeAsyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (plugins === void 0) { plugins = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return void 0; }\n\n      // Invokes the private internal async events method with optional error checking enabled.\n      return s_INVOKE_ASYNC_EVENTS(method, copyProps, passthruProps, plugins, this._pluginMap, this._options);\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager dispatch for invokeAsyncEvent if options\n    * `noEventInvoke` is enabled.\n    *\n    * @returns {Promise<PluginEventData>} The PluginEvent data.\n    * @private\n    */\n   async _invokeAsyncEventEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventInvoke) { return this.invokeAsyncEvent(...arguments); }\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {object}   opts Options object.\n    *\n    * @param {string}   opts.method Method name to invoke.\n    *\n    * @param {*[]}      [opts.args] Method arguments. This array will be spread as multiple arguments.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {*|*[]} A single result or array of results.\n    */\n   invokeSync({ method, args = void 0, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n\n      if (args !== void 0 && !Array.isArray(args)) { throw new TypeError(`'args' is not an array.`); }\n\n      if (typeof plugins === 'undefined') { plugins = this._pluginMap.keys(); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      const isArgsArray = Array.isArray(args);\n\n      if (typeof plugins === 'string')\n      {\n         const plugin = this._pluginMap.get(plugins);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[method] === 'function')\n            {\n               result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n               // If we received a valid result push it to the results.\n               if (result !== void 0) { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[method] === 'function')\n               {\n                  result = isArgsArray ? plugin.instance[method](...args) : plugin.instance[method](args);\n\n                  // If we received a valid result push it to the results.\n                  if (result !== void 0) { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${method}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager dispatch for invokeSyncEvent if options\n    * `noEventInvoke` is enabled.\n    *\n    * @returns {*|*[]} A single result or array of results.\n    * @private\n    */\n   async _invokeSyncEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventInvoke) { return this.invokeSync(...arguments); }\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {object}            opts Options object.\n    *\n    * @param {string}            opts.method Method name to invoke.\n    *\n    * @param {object}            [opts.copyProps] Properties that are copied.\n    *\n    * @param {object}            [opts.passthruProps] Properties that are passed through.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Specific plugin name or iterable list of plugin names to invoke.\n    *\n    * @returns {PluginEventData} The PluginEvent data.\n    */\n   invokeSyncEvent({ method, copyProps = {}, passthruProps = {}, plugins = void 0 } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (plugins === void 0) { plugins = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return void 0; }\n\n      // Invokes the private internal sync events method with optional error checking enabled.\n      return s_INVOKE_SYNC_EVENTS(method, copyProps, passthruProps, plugins, this._pluginMap, this._options);\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager dispatch for invokeSyncEvent if options\n    * `noEventInvoke` is enabled.\n    *\n    * @returns {PluginEventData} The PluginEvent data.\n    * @private\n    */\n   async _invokeSyncEventEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventInvoke) { return this.invokeSyncEvent(...arguments); }\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {PluginConfig}   pluginConfig A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Child implementations provide platform specific module loading by overriding this method.\n    *\n    * @param {string|URL}   moduleOrPath A module name, file path, or URL.\n    *\n    * @returns {Promise<*>} Loaded module.\n    * @private\n    */\n   async _loadModule(moduleOrPath)  // eslint-disable-line no-unused-vars\n   {\n   }\n\n   /**\n    * Removes a plugin by name or all names in an iterable list unloading them and clearing any event bindings\n    * automatically.\n    *\n    * @param {object}                  opts Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async remove({ plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      const removeEntry = async (entry) =>\n      {\n         const errors = [];\n\n         const pluginName = entry.name;\n\n         try\n         {\n            // Invoke private module method which allows skipping optional error checking.\n            await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, pluginName, this._pluginMap, this._options, false);\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         try\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            entry.instance._eventbus = void 0;\n         }\n         catch (err) { /* noop */ }\n\n         if (entry.eventbusProxy instanceof EventbusProxy)\n         { entry.eventbusProxy.destroy(); }\n\n         this._pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         try\n         {\n            if (this._eventbus)\n            {\n               await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n                JSON.parse(JSON.stringify(entry.data)));\n            }\n         }\n         catch (err)\n         {\n            errors.push(err);\n         }\n\n         return { name: pluginName, success: errors.length === 0, errors };\n      };\n\n      const results = [];\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         const entry = this._pluginMap.get(plugins);\n\n         if (entry instanceof PluginEntry)\n         {\n            results.push(await removeEntry(entry));\n         }\n      }\n      else\n      {\n         for (const name of plugins)\n         {\n            const entry = this._pluginMap.get(name);\n\n            if (entry instanceof PluginEntry)\n            {\n               results.push(await removeEntry(entry));\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this.remove({ plugins: Array.from(this._pluginMap.keys()) });\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {object}                  opts Options object\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names to remove.\n    *\n    * @returns {Promise<DataOutPluginRemoved>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeEventbus(opts)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventRemoval ? this.remove(opts) : [];\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<DataOutPluginRemoved[]>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventRemoval) { return this.removeAll(); }\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            opts Options object.\n    *\n    * @param {boolean}           opts.enabled The enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names to set state.\n    */\n   setEnabled({ enabled, plugins = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry instanceof PluginEntry)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof plugins === 'string')\n      {\n         setEntryEnabled(this._pluginMap.get(plugins));\n      }\n\n      let count = 0;\n\n      // First attempt to iterate through plugins.\n      for (const pluginName of plugins)\n      {\n         setEntryEnabled(this._pluginMap.get(pluginName));\n         count++;\n      }\n\n      // If plugins is empty then set all plugins enabled state.\n      if (count === 0)\n      {\n         for (const pluginEntry of this._pluginMap.values())\n         {\n            setEntryEnabled(pluginEntry);\n         }\n      }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     opts An options object.\n    *\n    * @param {Eventbus}   opts.eventbus The new eventbus to associate.\n    *\n    * @param {string}     [opts.eventPrepend='plugins'] An optional string to prepend to all of the event\n    *                                                      binding targets.\n    *\n    * @returns {Promise<AbstractPluginManager>} This plugin manager.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!(eventbus instanceof Eventbus)) { throw new TypeError(`'eventbus' is not an Eventbus.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a string.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this._eventbus) { return this; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this._pluginMap.size > 0)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            try\n            {\n               entry.instance._eventbus = void 0;\n            }\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.plugin.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n         }\n\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Invoke `typhonjs:plugin:manager:eventbus:changed` allowing external code to react to plugin\n            // changing eventbus.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:eventbus:changed`, Object.assign({\n                  oldEventbus: this._eventbus,\n                  oldManagerEventPrepend: oldPrepend,\n                  oldScopedName: `${oldPrepend}:${entry.name}`,\n                  newEventbus: eventbus,\n                  newManagerEventPrepend: eventPrepend,\n                  newScopedName: `${eventPrepend}:${entry.name}`\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      }\n\n      if (this._eventbus !== null)\n      {\n         this._eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke`, this._invokeAsyncEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke:event`, this._invokeAsyncEventEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${oldPrepend}:get:enabled`, this.getEnabled, this);\n         this._eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         this._eventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         this._eventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         this._eventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         this._eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${oldPrepend}:invoke`, this._invokeEventbus, this);\n         this._eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${oldPrepend}:set:enabled`, this.setEnabled, this);\n         this._eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke`, this._invokeSyncEventbus, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke:event`, this._invokeSyncEventEventbus, this);\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this);\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this);\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n      eventbus.on(`${eventPrepend}:async:invoke`, this._invokeAsyncEventbus, this);\n      eventbus.on(`${eventPrepend}:async:invoke:event`, this._invokeAsyncEventEventbus, this);\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this);\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n      eventbus.on(`${eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getEnabled, this);\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this);\n      eventbus.on(`${eventPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n      eventbus.on(`${eventPrepend}:get:plugin:data`, this.getPluginData, this);\n      eventbus.on(`${eventPrepend}:get:plugin:events`, this.getPluginEvents, this);\n      eventbus.on(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugin, this);\n      eventbus.on(`${eventPrepend}:invoke`, this._invokeEventbus, this);\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this);\n      eventbus.on(`${eventPrepend}:set:enabled`, this.setEnabled, this);\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      eventbus.on(`${eventPrepend}:sync:invoke`, this._invokeSyncEventbus, this);\n      eventbus.on(`${eventPrepend}:sync:invoke:event`, this._invokeSyncEventEventbus, this);\n\n      for (const pluginSupport of this._pluginSupport)\n      {\n         pluginSupport.setEventbus({\n            oldEventbus: this._eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      this._eventbus = eventbus;\n\n      return this;\n   }\n\n   /**\n    * Set optional parameters.\n    *\n    * @param {PluginManagerOptions} options Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.pluginsEnabled === 'boolean') { this._options.pluginsEnabled = options.pluginsEnabled; }\n      if (typeof options.noEventAdd === 'boolean') { this._options.noEventAdd = options.noEventAdd; }\n      if (typeof options.noEventDestroy === 'boolean') { this._options.noEventDestroy = options.noEventDestroy; }\n      if (typeof options.noEventInvoke === 'boolean') { this._options.noEventInvoke = options.noEventInvoke; }\n      if (typeof options.noEventOptions === 'boolean') { this._options.noEventOptions = options.noEventOptions; }\n      if (typeof options.noEventRemoval === 'boolean') { this._options.noEventRemoval = options.noEventRemoval; }\n      if (typeof options.throwNoMethod === 'boolean') { this._options.throwNoMethod = options.throwNoMethod; }\n      if (typeof options.throwNoPlugin === 'boolean') { this._options.throwNoPlugin = options.throwNoPlugin; }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventOptions` is\n    * enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventOptions) { this.setOptions(options); }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {string}                     method Method name to invoke.\n *\n * @param {object}                     copyProps Properties that are copied.\n *\n * @param {object}                     passthruProps Properties that are passed through.\n *\n * @param {string|Iterable<string>}    plugins Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] If false optional error checking is disabled.\n *\n * @returns {Promise<PluginEventData>} The PluginEvent data.\n */\nconst s_INVOKE_ASYNC_EVENTS = async (method, copyProps = {}, passthruProps = {}, plugins, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof plugins === 'string')\n   {\n      const entry = pluginMap.get(plugins);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[method](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[method](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n};\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {string}                     method Method name to invoke.\n *\n * @param {object}                     copyProps Properties that are copied.\n *\n * @param {object}                     passthruProps Properties that are passed through.\n *\n * @param {string|Iterable<string>}    plugins Specific plugin name or iterable list of plugin names to invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] If false optional error checking is disabled.\n *\n * @returns {PluginEventData} The PluginEvent data.\n */\nconst s_INVOKE_SYNC_EVENTS = (method, copyProps = {}, passthruProps = {}, plugins, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof method !== 'string') { throw new TypeError(`'method' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof plugins !== 'string' && !isIterable(plugins))\n   {\n      throw new TypeError(`'plugins' is not a string or iterable.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   if (typeof plugins === 'string')\n   {\n      const entry = pluginMap.get(plugins);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[method] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[method](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of plugins)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[method] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[method](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${method}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n};\n\n/**\n * @typedef {object} DataOutPluginEnabled\n *\n * @property {string}   plugin The plugin name.\n *\n * @property {boolean}  enabled The enabled state of the plugin.\n *\n * @property {boolean}  loaded True if the plugin is actually loaded.\n */\n\n/**\n * @typedef {object} DataOutPluginRemoved\n *\n * @property {string}   plugin The plugin name.\n *\n * @property {boolean}  success The success state for removal.\n *\n * @property {Error[]}  errors A list of errors that may have been thrown during removal.\n */\n\n/**\n * @typedef {object} PluginConfig\n *\n * @property {string}      name Defines the name of the plugin; if no `target` entry is present the name\n *                              doubles as the target (please see target).\n *\n * @property {string|URL}  [target] Defines the target Node module to load or defines a local file (full\n *                                  path or relative to current working directory to load. Target may also be a file\n *                                  URL / string or in the browser a web URL.\n *\n * @property {string}      [instance] Defines an existing object instance to use as the plugin.\n *\n * @property {object}      [options] Defines an object of options for the plugin.\n */\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager Data about the plugin manager.\n *\n * @property {string}   manager.eventPrepend The plugin manager event prepend string.\n *\n * @property {object}   module Optional object hash to associate with plugin.\n *\n * @property {object}   plugin Data about the plugin.\n *\n * @property {string}   plugin.name The name of the plugin.\n *\n * @property {string}   plugin.scopedName The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target Defines the target NPM module to loaded or defines a local file (full\n *                                    path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type The type of plugin: `instance`\n *                                  In Node: `import-module`, `import-path`, `import-url`, `require-module`, or\n *                                  `require-path`, `require-url`.\n *                                  In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options Defines an object of options for the plugin.\n */\n\n// eslint-disable-next-line jsdoc/require-property\n/**\n * @typedef {object} PluginEventData Provides the unified event data including any pass through data to the copied data\n *                                   supplied. Invoked functions may add to or modify this data.\n */\n\n/**\n * @typedef {object} PluginManagerOptions\n *\n * @property {boolean}   [pluginsEnabled] If false all plugins are disabled.\n *\n * @property {boolean}   [noEventAdd] If true this prevents plugins from being added by `plugins:add` and\n *                                    `plugins:add:all` events forcing direct method invocation for addition.\n *\n * @property {boolean}   [noEventDestroy] If true this prevents the plugin manager from being destroyed by\n *                                        `plugins:destroy:manager` forcing direct method invocation for destruction.\n *\n * @property {boolean}   [noEventInvoke] If true this prevents the plugin manager from being able to invoke methods\n *                                       from the eventbus via `plugins:async:invoke`, `plugins:async:invoke:event`,\n *                                       `plugins:invoke`, `plugins:sync:invoke`, and `plugins:sync:invoke:event`.\n *\n * @property {boolean}   [noEventOptions] If true this prevents setting options for the plugin manager by\n *                                        `plugins:set:options` forcing direct method invocation for setting options.\n *\n * @property {boolean}   [noEventRemoval] If true this prevents plugins from being removed by `plugins:remove` and\n *                                        `plugins:remove:all` events forcing direct method invocation for removal.\n *\n * @property {boolean}   [throwNoMethod] If true then when a method fails to be invoked by any plugin an exception\n *                                       will be thrown.\n *\n * @property {boolean}   [throwNoPlugin] If true then when no plugin is matched to be invoked an exception will be\n *                                       thrown.\n */\n\n/*\n\n\n */\n\n// TODO THIS NEEDS REFINEMENT\n/**\n * Interface for PluginSupport implementation classes.\n *\n * @interface PluginSupportImpl\n */\n\n/**\n * A method to invoke when the plugin manager is destroyed.\n *\n * @function\n * @async\n * @name PluginSupportImpl#destroy\n */\n\n/**\n * A method to invoke when the plugin manager eventbus is set.\n *\n * @function\n * @name PluginSupportImpl#setEventbus\n */\n","import PluginEntry    from '../PluginEntry.js';\nimport { isIterable } from \"@typhonjs-utils/object\";\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * It isn't necessary to use an eventbus associated with the plugin manager though invocation then relies on invoking\n * methods directly with the plugin manager instance.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:get:method:names` - {@link PluginSupport#getMethodNames}\n *\n * `plugins:has:method` - {@link PluginSupport#hasMethod}\n *\n * `plugins:has:plugin:method` - {@link PluginSupport#hasPluginMethod}\n *\n * @implements {PluginSupportImpl}\n */\nexport default class PluginSupport\n{\n   constructor(pluginManager)\n   {\n      this._pluginManager = pluginManager;\n   }\n\n   get isDestroyed()\n   {\n      return this._pluginManager === null || this._pluginManager === void 0 ||\n         this._pluginManager._pluginMap === null || this._pluginManager._pluginMap === void 0;\n   }\n\n   get pluginMap()\n   {\n      /* c8 ignore next 4 */\n      if (this.isDestroyed)\n      {\n         throw new ReferenceError('This PluginManager instance has been destroyed.');\n      }\n\n      return this._pluginManager._pluginMap;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     options.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend } = {})\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      this._pluginManager = null;\n   }\n\n   /**\n    * Returns method names for a specific plugin, list of plugins, or all plugins. The enabled state can be specified\n    * along with sorting methods by plugin name.\n    *\n    * @param {object}                  [opts] Options object. If undefined all plugin data is returned.\n    *\n    * @param {boolean}                 [opts.enabled] If enabled is a boolean it will return plugin methods names given\n    *                                                 the respective enabled state.\n    *\n    * @param {string|Iterable<string>} [opts.plugins] Plugin name or iterable list of names.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames({ enabled = void 0, plugins = [] } = {})\n   {\n      if (this.isDestroyed)\n      { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (enabled !== void 0 && typeof enabled !== 'boolean')\n      {\n         throw new TypeError(`'enabled' is not a boolean.`);\n      }\n\n      if (typeof plugins !== 'string' && !isIterable(plugins))\n      {\n         throw new TypeError(`'plugins' is not a string or iterable.`);\n      }\n\n      // Create an array from a single plugin name.\n      if (typeof plugins === 'string')\n      {\n         plugins = [plugins];\n      }\n\n      const anyEnabledState = enabled === void 0;\n\n      const results = {};\n\n      let count = 0;\n\n      for (const name of plugins)\n      {\n         const entry = this.pluginMap.get(name);\n\n         if (entry.instance && (anyEnabledState || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor')\n               { results[name] = true; }\n            }\n         }\n\n         count++;\n      }\n\n      // Iterable plugins had no entries so return all plugin data.\n      if (count === 0)\n      {\n         for (const entry of this.pluginMap.values())\n         {\n            if (entry.instance && (anyEnabledState || entry.enabled === enabled))\n            {\n               for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n               {\n                  // Skip any names that are not a function or are the constructor.\n                  if (entry.instance[name] instanceof Function && name !== 'constructor')\n                  { results[name] = true; }\n               }\n            }\n         }\n      }\n\n      return Object.keys(results).sort();\n   }\n\n   /**\n    * Returns true if there is at least one plugin loaded with the given method name.\n    *\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod(methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      for (const plugin of this.pluginMap.values())\n      {\n         if (typeof plugin.instance[methodName] === 'function') { return true; }\n      }\n\n      return false;\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name that also has a method with the given\n    * method name.\n    *\n    * @param {string}   pluginName - Plugin name to test.\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True if a plugin and method exists.\n    */\n   hasPluginMethod(pluginName, methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      const plugin = this.pluginMap.get(pluginName);\n\n      return plugin instanceof PluginEntry && typeof plugin[methodName] === 'function';\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {Eventbus}   options.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     options.oldPrepend - The old event prepend.\n    *\n    * @param {string}     options.newPrepend - The new event prepend.\n    */\n   setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend } = {})\n   {\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:get:plugin:by:event`, this.getPluginByEvent, this);\n         newEventbus.on(`${newPrepend}:get:plugin:data`, this.getPluginData, this);\n         newEventbus.on(`${newPrepend}:get:plugin:events`, this.getPluginEvents, this);\n         newEventbus.on(`${newPrepend}:get:plugin:names`, this.getPluginNames, this);\n\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this);\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this);\n         newEventbus.on(`${newPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (typeof obj !== 'undefined' && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n\n/**\n * @typedef {object} DataOutPluginEvents\n *\n * @property {string}   plugin The plugin name.\n *\n * @property {string[]} events The event names registered.\n */\n","import AbstractPluginManager from '../AbstractPluginManager.js';\n\nexport default class PluginManager extends AbstractPluginManager\n{\n   async _loadModule(moduleOrPath)\n   {\n      const module = await import(moduleOrPath);\n\n      // Please note that a plugin or other logger must be setup on the associated eventbus.\n      if (this._eventbus !== null && typeof this._eventbus !== 'undefined')\n      {\n         this._eventbus.trigger('log:debug', `@typhonjs-plugin/manager - import: ${moduleOrPath}`);\n      }\n\n      const type = `import-${moduleOrPath instanceof URL || \n       (typeof moduleOrPath === 'string' && moduleOrPath.startsWith('http')) ? 'url' : 'path'}`;\n\n      let instance;\n\n      // If the module has a named export for `onPluginLoad` then take the module.\n      if (typeof module.onPluginLoad === 'function')\n      {\n         instance = module;\n      }\n      // Then potentially resolve any default export / static class.\n      else if (module.default)\n      {\n         instance = module.default;\n      }\n      // Finally resolve as just the module.\n      else\n      {\n         instance = module;\n      }\n\n      return { instance, type };\n   }\n}\n"],"names":["eventSplitter","eventsAPI","iteratee","events","name","callback","opts","names","i","context","objectKeys","length","test","split","object","Object","keys","beforeMap","map","after","count","beforeWrapper","s_BEFORE","apply","this","arguments","_callback","before","result","args","EventbusProxy","[object Object]","eventbus","_eventbus","_events","ReferenceError","Number","isInteger","TypeError","Utils.eventsAPI","Utils.beforeMap","off","bind","on","regex","entry","entries","eventCount","isDestroyed","s_OFF_API","targetContext","s_ON_API","RegExp","event","proxyEventCount","trigger","triggerAsync","triggerDefer","triggerSync","Utils.objectKeys","handlers","remaining","j","handler","push","Eventbus","eventbusName","_eventbusName","_listeners","_listeningTo","ctx","obj","id","_listenId","s_UNIQUE_ID","listeningTo","listening","_listening","Listening","error","s_TRY_CATCH_ON","interop","stopListening","listenTo","listeners","ids","Math","max","Array","s_RESULTS_TARGET_API","s_TRIGGER_API","s_TRIGGER_EVENTS","s_TRIGGER_ASYNC_EVENTS","isArray","Promise","all","then","results","allResults","pResult","concat","setTimeout","s_TRIGGER_SYNC_EVENTS","listener","cleanup","options","iterateeTarget","Utils.eventSplitter","resultsType","newArray","objEvents","allEvents","slice","ev","a1","a2","a3","l","call","async","reject","values","filtered","filter","resolve","err","idCounter","prefix","PluginEntry","data","instance","eventbusProxy","_data","_enabled","_name","_instance","_eventbusProxy","enabled","PluginEvent","copyProps","passthruProps","assign","JSON","parse","stringify","pluginName","pluginOptions","s_REGEX_ESCAPE_RELATIVE","s_REGEX_ESCAPE_FORWARD","s_REGEX_STRING_URL","escapeTarget","target","targetEscaped","URL","pathname","match","replace","isValidConfig","pluginConfig","deepFreeze","skipFreezeKeys","_deepFreeze","isIterable","Symbol","iterator","isObject","cntr","key","hasOwnProperty","indexOf","freeze","s_INVOKE_ASYNC_EVENTS","method","plugins","pluginMap","performErrorCheck","pluginInvokeCount","pluginInvokeNames","hasMethod","hasPlugin","get","plugin","throwNoPlugin","Error","throwNoMethod","$$plugin_invoke_count","$$plugin_invoke_names","PluginSupport","pluginManager","_pluginManager","_pluginMap","eventPrepend","getMethodNames","hasPluginMethod","anyEnabledState","s_GET_ALL_PROPERTY_NAMES","Function","sort","methodName","oldEventbus","newEventbus","oldPrepend","newPrepend","getPluginByEvent","getPluginData","getPluginEvents","getPluginNames","props","getOwnPropertyNames","forEach","prop","getPrototypeOf","prototype","manager","Map","_eventbusProxies","_pluginSupport","_options","pluginsEnabled","noEventAdd","noEventDestroy","noEventInvoke","noEventOptions","noEventRemoval","setEventbus","setOptions","moduleData","has","type","_loadModule","toString","pluginData","_eventPrepend","module","scopedName","set","pluginConfigs","pluginsData","add","addAll","removeAll","destroy","_addEventbus","_addAllEventbus","_destroyEventbus","_invokeAsyncEventbus","_invokeAsyncEventEventbus","_removeEventbus","_removeAllEventbus","createEventbusProxy","getEnabled","getOptions","_invokeEventbus","setEnabled","_setOptionsEventbus","_invokeSyncEventbus","_invokeSyncEventEventbus","pluginSupport","loaded","pluginEvents","includes","eventEntry","from","proxyKeys","isArgsArray","invoke","invokeAsync","invokeAsyncEvent","invokeSync","s_INVOKE_SYNC_EVENTS","invokeSyncEvent","moduleOrPath","removeEntry","errors","delete","success","remove","setEntryEnabled","pluginEntry","size","oldManagerEventPrepend","oldScopedName","newManagerEventPrepend","newScopedName","import","startsWith","onPluginLoad","default"],"mappings":"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"}