{"version":3,"file":"PluginManager.js","sources":["./node_modules/@typhonjs-plugin/eventbus/src/EventbusProxy.js","./node_modules/@typhonjs-plugin/eventbus/src/Eventbus.js","./node_modules/@typhonjs-utils/object/src/objectUtil.js","./src/PluginEntry.js","./src/PluginEvent.js","./src/isValidConfig.js","./src/AbstractPluginManager.js","./src/browser/PluginManager.js","./src/PluginSupport.js"],"sourcesContent":["import Eventbus from './Eventbus.js';\n\n/**\n * EventbusProxy provides a protected proxy of another Eventbus instance.\n *\n * The main use case of EventbusProxy is to allow indirect access to an eventbus. This is handy when it comes to\n * managing the event lifecycle for a plugin system. When a plugin is added it could receive a callback, perhaps named\n * `onPluginLoaded`, which contains an EventbusProxy instance rather than the direct eventbus. This EventbusProxy\n * instance is associated in the management system controlling plugin lifecycle. When a plugin is removed / unloaded the\n * management system can automatically unregister all events for the plugin without requiring the plugin author doing it\n * correctly if they had full control. IE This allows to plugin system to guarantee no dangling listeners.\n *\n * EventbusProxy provides the on / off, once, and trigger methods with the same signatures as found in\n * Eventbus. However, the proxy tracks all added event bindings which is used to proxy between the target\n * eventbus which is passed in from the constructor. All registration methods (on / off / once) proxy. In addition\n * there is a `destroy` method which will unregister all of proxied events and remove references to the managed\n * eventbus. Any further usage of a destroyed EventbusProxy instance results in a ReferenceError thrown.\n *\n * Finally the EventbusProxy only allows events registered through it to be turned off providing a buffer between\n * any consumers such that they can not turn off other registrations made on the eventbus or other proxy instances.\n */\nexport default class EventbusProxy\n{\n   /**\n    * Creates the event proxy with an existing instance of TyphonEvents.\n    *\n    * @param {Eventbus}   eventbus - The target eventbus instance.\n    */\n   constructor(eventbus)\n   {\n      if (!(eventbus instanceof Eventbus))\n      {\n         throw new TypeError(`'eventbus' is not an instance of Eventbus.`);\n      }\n\n      /**\n       * Stores the target eventbus.\n       *\n       * @type {Eventbus}\n       * @private\n       */\n      this._eventbus = eventbus;\n\n      /**\n       * Stores all proxied event bindings.\n       *\n       * @type {Array<{name: string, callback: Function, context: *}>}\n       * @private\n       */\n      this._events = [];\n   }\n\n   /**\n    * Unregisters all proxied events from the target eventbus and removes any local references. All subsequent calls\n    * after `destroy` has been called result in a ReferenceError thrown.\n    */\n   destroy()\n   {\n      if (this._eventbus !== null)\n      {\n         for (const event of this._events) { this._eventbus.off(event.name, event.callback, event.context); }\n      }\n\n      this._events = [];\n\n      this._eventbus = null;\n   }\n\n   /**\n    * Iterates over all of events from the proxied eventbus yielding an array with event name, callback function, and\n    * event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *entries(eventName = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      for (const entry of this._eventbus.entries(eventName))\n      {\n         yield entry;\n      }\n   }\n\n   /**\n    * Returns the current proxied eventbus event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get eventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.eventCount;\n   }\n\n   /**\n    * Returns the event names of proxied eventbus event listeners.\n    *\n    * @returns {string[]} Returns the event names of proxied event listeners.\n    */\n   get eventNames()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.eventNames;\n   }\n\n   /**\n    * Returns whether this EventbusProxy has already been destroyed.\n    *\n    * @returns {boolean} Is destroyed state.\n    */\n   get isDestroyed()\n   {\n      return this._eventbus === null;\n   }\n\n   /**\n    * Returns the target eventbus name.\n    *\n    * @returns {string|*} The target eventbus name.\n    */\n   get name()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.name;\n   }\n\n   /**\n    * Remove a previously-bound proxied event binding.\n    *\n    * Please see {@link Eventbus#off}.\n    *\n    * @param {string}   [name]     - Event name(s)\n    *\n    * @param {Function} [callback] - Event callback function\n    *\n    * @param {object}   [context]  - Event context\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   off(name = void 0, callback = void 0, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      const hasName = typeof name !== 'undefined' && name !== null;\n      const hasCallback = typeof callback !== 'undefined' && callback !== null;\n      const hasContext = typeof context !== 'undefined' && context !== null;\n\n      // Remove all events if `off()` is invoked.\n      if (!hasName && !hasCallback && !hasContext)\n      {\n         for (const event of this._events) { this._eventbus.off(event.name, event.callback, event.context); }\n         this._events = [];\n      }\n      else\n      {\n         const values = {};\n         if (hasName) { values.name = name; }\n         if (hasCallback) { values.callback = callback; }\n         if (hasContext) { values.context = context; }\n\n         for (let cntr = this._events.length; --cntr >= 0;)\n         {\n            const event = this._events[cntr];\n\n            let foundMatch = true;\n\n            for (const key in values)\n            {\n               if (event[key] !== values[key]) { foundMatch = false; break; }\n            }\n\n            if (foundMatch)\n            {\n               this._eventbus.off(values.name, values.callback, values.context);\n               this._events.splice(cntr, 1);\n            }\n         }\n      }\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * This is proxied through `listenTo` of an internal Events instance instead of directly modifying the target\n    * eventbus.\n    *\n    * Please see {@link Eventbus#on}.\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   on(name, callback, context = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.on(name, callback, context);\n\n      this._events.push({ name, callback, context });\n\n      return this;\n   }\n\n   /**\n    * Iterates over all stored proxy events yielding an array with event name, callback function, and event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *proxyEntries(eventName = void 0)\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      /* c8 ignore next */\n      if (!this._events) { return; }\n\n      if (eventName)\n      {\n         for (const event of this._events)\n         {\n            if (eventName === event.name) { yield [event.name, event.callback, event.context]; }\n         }\n      }\n      else\n      {\n         for (const event of this._events)\n         {\n            yield [event.name, event.callback, event.context];\n         }\n      }\n   }\n\n   /**\n    * Returns the current proxied event count.\n    *\n    * @returns {number} Returns the current proxied event count.\n    */\n   get proxyEventCount()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._events.length;\n   }\n\n   /**\n    * Returns the event names of proxied event listeners.\n    *\n    * @returns {string[]} Returns the event names of proxied event listeners.\n    */\n   get proxyEventNames()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      if (!this._events) { return []; }\n\n      const eventNames = {};\n\n      for (const event of this._events) { eventNames[event.name] = true; }\n\n      return Object.keys(eventNames);\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * Please see {@link Eventbus#trigger}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   trigger()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.trigger(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * Please see {@link Eventbus#triggerAsync}.\n    *\n    * @returns {Promise} A Promise to returning any results.\n    */\n   triggerAsync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerAsync(...arguments);\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * Please see {@link Eventbus#triggerDefer}.\n    *\n    * @returns {EventbusProxy} This EventbusProxy.\n    */\n   triggerDefer()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      this._eventbus.triggerDefer(...arguments);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * Please see {@link Eventbus#triggerSync}.\n    *\n    * @returns {*|Array.<*>} An Array of returned results.\n    */\n   triggerSync()\n   {\n      if (this._eventbus === null) { throw new ReferenceError('This EventbusProxy instance has been destroyed.'); }\n\n      return this._eventbus.triggerSync(...arguments);\n   }\n}\n","import EventbusProxy from './EventbusProxy.js';\n\n/**\n * `@typhonjs-plugin/eventbus` / Provides the ability to bind and trigger custom named events.\n *\n * This module is an evolution of Backbone Events. (http://backbonejs.org/#Events). Eventbus extends the\n * functionality provided in Backbone Events with additional triggering methods to receive asynchronous and\n * synchronous results.\n *\n * ---------------\n */\nexport default class Eventbus\n{\n   /**\n    * Provides a constructor which optionally takes the eventbus name.\n    *\n    * @param {string}   eventbusName - Optional eventbus name.\n    */\n   constructor(eventbusName = void 0)\n   {\n      /**\n       * Stores the name of this eventbus.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventbusName = eventbusName;\n   }\n\n   /**\n    * Creates an EventProxy wrapping this events instance. An EventProxy proxies events allowing all listeners added\n    * to be easily removed from the wrapped Events instance.\n    *\n    * @returns {EventbusProxy} A new EventbusProxy for this eventbus.\n    */\n   createProxy()\n   {\n      return new EventbusProxy(this);\n   }\n\n   /**\n    * Iterates over all stored events yielding an array with event name, callback function, and event context.\n    *\n    * @param {string} [eventName] Optional event name to iterate over.\n    *\n    * @yields\n    */\n   *entries(eventName = void 0)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return; }\n\n      if (eventName)\n      {\n         for (const event of this._events[eventName])\n         {\n            yield [eventName, event.callback, event.ctx];\n         }\n      }\n      else\n      {\n         for (const name in this._events)\n         {\n            for (const event of this._events[name])\n            {\n               yield [name, event.callback, event.ctx];\n            }\n         }\n      }\n   }\n\n   /**\n    * Returns the current event count.\n    *\n    * @returns {number} The current proxied event count.\n    */\n   get eventCount()\n   {\n      let count = 0;\n\n      for (const name in this._events) { count += this._events[name].length; }\n\n      return count;\n   }\n\n   /**\n    * Returns the event names of registered event listeners.\n    *\n    * @returns {string[]} The event names of registered event listeners.\n    */\n   get eventNames()\n   {\n      /* c8 ignore next */\n      if (!this._events) { return []; }\n\n      return Object.keys(this._events);\n   }\n\n   /**\n    * Returns the current eventbus name.\n    *\n    * @returns {string|*} The current eventbus name.\n    */\n   get name()\n   {\n      return this._eventbusName;\n   }\n\n   /**\n    * Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of\n    * other.on(event, callback, object), is that listenTo allows the object to keep track of the events, and they can\n    * be removed all at once later on. The callback will always be called with object as context.\n    *\n    * @example\n    * view.listenTo(model, 'change', view.render);\n    *\n    * @see http://backbonejs.org/#Events-listenTo\n    *\n    * @param {object}   obj         - Event context\n    * @param {string}   name        - Event name(s)\n    * @param {Function} callback    - Event callback function\n    * @param {object}   [context]   - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenTo(obj, name, callback, context = this)\n   {\n      if (!obj) { return this; }\n      const id = obj._listenId || (obj._listenId = s_UNIQUE_ID('l'));\n      const listeningTo = this._listeningTo || (this._listeningTo = {});\n      let listening = listeningTo[id];\n\n      // This object is not listening to any other events on `obj` yet.\n      // Setup the necessary references to track the listening callbacks.\n      if (!listening)\n      {\n         const thisId = this._listenId || (this._listenId = s_UNIQUE_ID('l'));\n         listening = listeningTo[id] = { obj, objId: id, id: thisId, listeningTo, count: 0 };\n      }\n\n      // Bind callbacks on obj, and keep track of them on listening.\n      s_INTERNAL_ON(obj, name, callback, context, listening);\n      return this;\n   }\n\n   /**\n    * Just like `listenTo`, but causes the bound callback to fire only once before being removed.\n    *\n    * @see http://backbonejs.org/#Events-listenToOnce\n    *\n    * @param {object}   obj      - Event context\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   [context=this] - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   listenToOnce(obj, name, callback, context = this)\n   {\n      // Map the event into a `{event: once}` object.\n      const events = s_EVENTS_API(s_ONCE_MAP, {}, name, callback, this.stopListening.bind(this, obj));\n\n      return this.listenTo(obj, events, void 0, context);\n   }\n\n   /**\n    * Remove a previously-bound callback function from an object. If no context is specified, all of the versions of\n    * the callback with different contexts will be removed. If no callback is specified, all callbacks for the event\n    * will be removed. If no event is specified, callbacks for all events will be removed.\n    *\n    * Note that calling model.off(), for example, will indeed remove all events on the model — including events that\n    * Backbone uses for internal bookkeeping.\n    *\n    * @example\n    * // Removes just the `onChange` callback.\n    * object.off(\"change\", onChange);\n    *\n    * // Removes all \"change\" callbacks.\n    * object.off(\"change\");\n    *\n    * // Removes the `onChange` callback for all events.\n    * object.off(null, onChange);\n    *\n    * // Removes all callbacks for `context` for all events.\n    * object.off(null, null, context);\n    *\n    * // Removes all callbacks on `object`.\n    * object.off();\n    *\n    * @see http://backbonejs.org/#Events-off\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   off(name, callback = void 0, context = void 0)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return this; }\n\n      /**\n       * @type {*}\n       * @protected\n       */\n      this._events = s_EVENTS_API(s_OFF_API, this._events, name, callback, { context, listeners: this._listeners });\n\n      return this;\n   }\n\n   /**\n    * Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a\n    * large number of different events on a page, the convention is to use colons to namespace them: \"poll:start\", or\n    * \"change:selection\".\n    *\n    * To supply a context value for this when the callback is invoked, pass the optional last argument:\n    * model.on('change', this.render, this) or model.on({change: this.render}, this).\n    *\n    * @example\n    * The event string may also be a space-delimited list of several events...\n    * book.on(\"change:title change:author\", ...);\n    *\n    * @example\n    * Callbacks bound to the special \"all\" event will be triggered when any event occurs, and are passed the name of\n    * the event as the first argument. For example, to proxy all events from one object to another:\n    * proxy.on(\"all\", function(eventName) {\n    *    object.trigger(eventName);\n    * });\n    *\n    * @example\n    * All Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n    * book.on({\n    *    \"change:author\": authorPane.update,\n    *    \"change:title change:subtitle\": titleView.update,\n    *    \"destroy\": bookView.remove\n    * });\n    *\n    * @see http://backbonejs.org/#Events-on\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   on(name, callback, context = void 0)\n   {\n      return s_INTERNAL_ON(this, name, callback, context, void 0);\n   }\n\n   /**\n    * Just like `on`, but causes the bound callback to fire only once before being removed. Handy for saying \"the next\n    * time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event\n    * will fire once for every event you passed in, not once for a combination of all events\n    *\n    * @see http://backbonejs.org/#Events-once\n    *\n    * @param {string}   name     - Event name(s)\n    * @param {Function} callback - Event callback function\n    * @param {object}   context  - Event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   once(name, callback, context = void 0)\n   {\n      // Map the event into a `{event: once}` object.\n      const events = s_EVENTS_API(s_ONCE_MAP, {}, name, callback, this.off.bind(this));\n\n      if (typeof name === 'string' && (context === null || typeof context === 'undefined')) { callback = void 0; }\n\n      return this.on(events, callback, context);\n   }\n\n   /**\n    * Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove\n    * all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to\n    * on a specific object, or a specific event, or just a specific callback.\n    *\n    * @example\n    * view.stopListening();\n    *\n    * view.stopListening(model);\n    *\n    * @see http://backbonejs.org/#Events-stopListening\n    *\n    * @param {object}   obj            - Event context\n    * @param {string}   name           - Event name(s)\n    * @param {Function} callback       - Event callback function\n    * @param {object}   [context=this] - Optional: event context\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   stopListening(obj, name = void 0, callback = void 0, context = this)\n   {\n      const listeningTo = this._listeningTo;\n      if (!listeningTo) { return this; }\n\n      const ids = obj ? [obj._listenId] : Object.keys(listeningTo);\n\n      for (let i = 0; i < ids.length; i++)\n      {\n         const listening = listeningTo[ids[i]];\n\n         // If listening doesn't exist, this object is not currently listening to obj. Break out early.\n         if (!listening) { break; }\n\n         listening.obj.off(name, callback, context);\n      }\n\n      return this;\n   }\n\n   /**\n    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be\n    * passed along to the event callbacks.\n    *\n    * @see http://backbonejs.org/#Events-trigger\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   trigger(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return this; }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_EVENTS, this._events, name, void 0, args);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a\n    * single Promise generated by `Promise.resolve` for a single value or `Promise.all` for multiple results. This is\n    * a very useful mechanism to invoke asynchronous operations over an eventbus.\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {Promise} A Promise with any results.\n    */\n   async triggerAsync(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return Promise.resolve([]); }\n\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + 1]; }\n\n      const promise = s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_ASYNC_EVENTS, this._events, name, void 0, args);\n\n      return promise !== void 0 ? promise : Promise.resolve();\n   }\n\n   /**\n    * Defers invoking `trigger`. This is useful for triggering events in the next clock tick.\n    *\n    * @returns {Eventbus} This Eventbus instance.\n    */\n   triggerDefer()\n   {\n      setTimeout(() => { this.trigger(...arguments); }, 0);\n\n      return this;\n   }\n\n   /**\n    * Provides `trigger` functionality, but collects any returned result or results from invoked targets as a single\n    * value or in an array and passes it back to the callee in a synchronous manner.\n    *\n    * @param {string}   name  - Event name(s)\n    * @returns {*|Array<*>} The results of the event invocation.\n    */\n   triggerSync(name)\n   {\n      /* c8 ignore next */\n      if (!this._events) { return void 0; }\n\n      const start = 1;\n      const length = Math.max(0, arguments.length - 1);\n      const args = new Array(length);\n      for (let i = 0; i < length; i++) { args[i] = arguments[i + start]; }\n\n      return s_EVENTS_TARGET_API(s_TRIGGER_API, s_TRIGGER_SYNC_EVENTS, this._events, name, void 0, args);\n   }\n}\n\n// Private / internal methods ---------------------------------------------------------------------------------------\n\n/**\n * Regular expression used to split event strings.\n *\n * @type {RegExp}\n */\nconst s_EVENT_SPLITTER = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee    - Event operation to invoke.\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string|object} name   - A single event name, compound event names, or a hash of event names.\n * @param {Function} callback    - Event callback function\n * @param {object}   opts        - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_EVENTS_API = (iteratee, events, name, callback, opts) =>\n{\n   let i = 0, names;\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = Object.keys(name); i < names.length; i++)\n      {\n         events = s_EVENTS_API(iteratee, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && s_EVENT_SPLITTER.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(s_EVENT_SPLITTER); i < names.length; i++)\n      {\n         events = iteratee(events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n   }\n   return events;\n};\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple space-separated events `\"change blur\",\n * callback` and jQuery-style event maps `{event: callback}`).\n *\n * @param {Function} iteratee       - Trigger API\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n * @param {Array<*>} events         - Array of stored event callback data.\n * @param {string}   name           - Event name(s)\n * @param {Function} callback       - callback\n * @param {object}   opts           - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_EVENTS_TARGET_API = (iteratee, iterateeTarget, events, name, callback, opts) =>\n{\n   let i = 0, names;\n\n   if (name && typeof name === 'object')\n   {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) { opts.context = callback; }\n      for (names = Object.keys(name); i < names.length; i++)\n      {\n         events = s_EVENTS_API(iteratee, iterateeTarget, events, names[i], name[names[i]], opts);\n      }\n   }\n   else if (name && s_EVENT_SPLITTER.test(name))\n   {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(s_EVENT_SPLITTER); i < names.length; i++)\n      {\n         events = iteratee(iterateeTarget, events, names[i], callback, opts);\n      }\n   }\n   else\n   {\n      // Finally, standard events.\n      events = iteratee(iterateeTarget, events, name, callback, opts);\n   }\n\n   return events;\n};\n\n/**\n * Guard the `listening` argument from the public API.\n *\n * @param {Eventbus}   obj    - The Eventbus instance\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   context  - Event context\n * @param {object.<{obj: object, objId: string, id: string, listeningTo: object, count: number}>} listening -\n *                              Listening object\n * @returns {Eventbus} The Eventbus instance.\n */\nconst s_INTERNAL_ON = (obj, name, callback, context, listening) =>\n{\n   obj._events = s_EVENTS_API(s_ON_API, obj._events || {}, name, callback, { context, ctx: obj, listening });\n\n   if (listening)\n   {\n      const listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n   }\n\n   return obj;\n};\n\n/**\n * The reducing API that removes a callback from the `events` object.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   options  - Optional parameters\n * @returns {Eventbus} The Eventbus object.\n */\nconst s_OFF_API = (events, name, callback, options) =>\n{\n   if (!events) { return; }\n\n   let i = 0, listening;\n   const context = options.context, listeners = options.listeners;\n\n   // Delete all events listeners and \"drop\" events.\n   if (!name && !callback && !context && listeners)\n   {\n      const ids = Object.keys(listeners);\n      for (; i < ids.length; i++)\n      {\n         listening = listeners[ids[i]];\n         delete listeners[listening.id];\n         delete listening.listeningTo[listening.objId];\n      }\n      return;\n   }\n\n   const names = name ? [name] : Object.keys(events);\n   for (; i < names.length; i++)\n   {\n      name = names[i];\n      const handlers = events[name];\n\n      // Bail out if there are no events stored.\n      /* c8 ignore next */\n      if (!handlers) { break; }\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      const remaining = [];\n      for (let j = 0; j < handlers.length; j++)\n      {\n         const handler = handlers[j];\n         if (\n          callback && callback !== handler.callback &&\n          callback !== handler.callback._callback ||\n          context && context !== handler.context\n         )\n         {\n            remaining.push(handler);\n         }\n         else\n         {\n            listening = handler.listening;\n            if (listening && --listening.count === 0)\n            {\n               delete listeners[listening.id];\n               delete listening.listeningTo[listening.objId];\n            }\n         }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length)\n      {\n         events[name] = remaining;\n      }\n      else\n      {\n         delete events[name];\n      }\n   }\n\n   return events;\n};\n\n/**\n * The reducing API that adds a callback to the `events` object.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} events - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {object}   options  - Optional parameters\n * @returns {*} The Events object.\n */\nconst s_ON_API = (events, name, callback, options) =>\n{\n   if (callback)\n   {\n      const handlers = events[name] || (events[name] = []);\n      const context = options.context, ctx = options.ctx, listening = options.listening;\n\n      if (listening) { listening.count++; }\n\n      handlers.push({ callback, context, ctx: context || ctx, listening });\n   }\n   return events;\n};\n\n/**\n * Reduces the event callbacks into a map of `{event: onceWrapper}`. `offer` unbinds the `onceWrapper` after\n * it has been called.\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>} map - Events object\n * @param {string}   name     - Event name\n * @param {Function} callback - Event callback\n * @param {Function} offer    - Function to invoke after event has been triggered once; `off()`\n * @returns {*} The Events object.\n */\nconst s_ONCE_MAP = function(map, name, callback, offer)\n{\n   if (callback)\n   {\n      const once = map[name] = () =>\n      {\n         offer(name, once);\n         return callback.apply(this, arguments);\n      };\n\n      once._callback = callback;\n   }\n   return map;\n};\n\n/**\n * Handles triggering the appropriate event callbacks.\n *\n * @param {Function} iterateeTarget - Internal function which is dispatched to.\n * @param {Array<*>} objEvents      - Array of stored event callback data.\n * @param {string}   name           - Event name(s)\n * @param {Function} cb             - callback\n * @param {Array<*>} args           - Arguments supplied to a trigger method.\n * @returns {*} The results from the triggered event.\n */\nconst s_TRIGGER_API = (iterateeTarget, objEvents, name, cb, args) =>\n{\n   let result;\n\n   if (objEvents)\n   {\n      const events = objEvents[name];\n      let allEvents = objEvents.all;\n      if (events && allEvents) { allEvents = allEvents.slice(); }\n      if (events) { result = iterateeTarget(events, args); }\n      if (allEvents) { result = iterateeTarget(allEvents, [name].concat(args)); }\n   }\n\n   return result;\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments).\n *\n * @param {object.<{callback: Function, context: object, ctx: object, listening:{}}>}  events - events array\n * @param {Array<*>} args - event argument array\n */\nconst s_TRIGGER_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx); }\n         return;\n      case 1:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1); }\n         return;\n      case 2:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2); }\n         return;\n      case 3:\n         while (++i < l) { (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); }\n         return;\n      default:\n         while (++i < l) { (ev = events[i]).callback.apply(ev.ctx, args); }\n         return;\n   }\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method uses ES6 Promises and adds\n * any returned results to an array which is added to a Promise.all construction which passes back a Promise which\n * waits until all Promises complete. Any target invoked may return a Promise or any result. This is very useful to\n * use for any asynchronous operations.\n *\n * @param {Array<*>} events   -  Array of stored event callback data.\n * @param {Array<*>} args     -  Arguments supplied to `triggerAsync`.\n * @returns {Promise} A Promise of the results from the triggered event.\n */\nconst s_TRIGGER_ASYNC_EVENTS = async (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   try\n   {\n      switch (args.length)\n      {\n         case 0:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 1:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 2:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         case 3:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n\n         default:\n            while (++i < l)\n            {\n               const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n               // If we received a valid result add it to the promises array.\n               if (result !== void 0) { results.push(result); }\n            }\n            break;\n      }\n   }\n   catch (error) // will catch synchronous event binding errors and reject again async errors.\n   {\n      return Promise.reject(error);\n   }\n\n   // If there are multiple results then use Promise.all otherwise Promise.resolve.\n   return results.length > 1 ? Promise.all(results).then((values) =>\n   {\n      const filtered = values.filter((entry) => entry !== void 0);\n      switch (filtered.length)\n      {\n         case 0: return void 0;\n         case 1: return filtered[0];\n         default: return filtered;\n      }\n   }) : results.length === 1 ? Promise.resolve(results[0]) : Promise.resolve();\n};\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for triggering events. Tries to keep the usual\n * cases speedy (most internal Backbone events have 3 arguments). This dispatch method synchronously passes back a\n * single value or an array with all results returned by any invoked targets.\n *\n * @param {Array<*>} events   -  Array of stored event callback data.\n * @param {Array<*>} args     -  Arguments supplied to `triggerSync`.\n * @returns {*|Array<*>} The results from the triggered event.\n */\nconst s_TRIGGER_SYNC_EVENTS = (events, args) =>\n{\n   let ev, i = -1;\n   const a1 = args[0], a2 = args[1], a3 = args[2], l = events.length;\n\n   const results = [];\n\n   switch (args.length)\n   {\n      case 0:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 1:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 2:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      case 3:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n      default:\n         while (++i < l)\n         {\n            const result = (ev = events[i]).callback.apply(ev.ctx, args);\n\n            // If we received a valid result return immediately.\n            if (result !== void 0) { results.push(result); }\n         }\n         break;\n   }\n\n   // Return the results array if there are more than one or just a single result.\n   return results.length > 1 ? results : results.length === 1 ? results[0] : void 0;\n};\n\n/**\n * Generate a unique integer ID (unique within the entire client session).\n *\n * @type {number} - unique ID counter.\n */\nlet idCounter = 0;\n\n/**\n * Creates a new unique ID with a given prefix\n *\n * @param {string}   prefix - An optional prefix to add to unique ID.\n * @returns {string} A new unique ID with a given prefix.\n */\nconst s_UNIQUE_ID = (prefix = '') =>\n{\n   const id = `${++idCounter}`;\n   return prefix ? `${prefix}${id}` : id;\n};\n","/**\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\n * equality tests, and validation.\n *\n * Support for typhonjs-plugin-manager is enabled.\n */\n\n/**\n * @typedef {object} ValidationEntry - Provides data for a validation check.\n *\n * @property {string}               [type] - Optionally tests with a typeof check.\n *\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\n * against.\n *\n * @property {string}               [message] - Optional message to include.\n *\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\n *\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\n */\n\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {object|Array} The frozen object.\n */\nexport function deepFreeze(data, skipFreezeKeys = [])\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\n\n   return _deepFreeze(data, skipFreezeKeys);\n}\n\n/**\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\n * The result of the callback function is used to modify in place the given data.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n *\n * @returns {*} The data object.\n */\nexport function depthTraverse(data, func, modify = false)\n{\n   /* istanbul ignore if */\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n\n   /* istanbul ignore if */\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\n\n   return _depthTraverse(data, func, modify);\n}\n\n/**\n * Returns a list of accessor keys by traversing the given object.\n *\n * @param {object}   data - An object to traverse for accessor keys.\n *\n * @returns {string[]} Accessor list.\n */\nexport function getAccessorList(data)\n{\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\n\n   return _getAccessorList(data);\n}\n\n/**\n * Tests for whether an object is iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is iterable.\n */\nexport function isIterable(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.iterator] === 'function';\n}\n\n/**\n * Tests for whether an object is async iterable.\n *\n * @param {object} object - An object.\n *\n * @returns {boolean} Whether object is async iterable.\n */\nexport function isIterableAsync(object)\n{\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\n\n   return typeof object[Symbol.asyncIterator] === 'function';\n}\n\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns {object} The data object.\n */\nexport function safeAccess(data, accessor, defaultValue = void 0)\n{\n   if (typeof data !== 'object') { return defaultValue; }\n   if (typeof accessor !== 'string') { return defaultValue; }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If the next level of object access is undefined or null then return the empty string.\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\n\n      data = data[access[cntr]];\n   }\n\n   return data;\n}\n\n/**\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\n * value to set across all accessors.\n *\n * @param {object}         data - An object to access entry data.\n *\n * @param {Array<string>}  accessors - A string describing the entries to access.\n *\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\n *\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                             'set-undefined', 'sub'.\n *\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\n *\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n */\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\n\n   if (typeof value === 'object')\n   {\n      accessors.forEach((accessor) =>\n      {\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\n         safeSet(data, accessor, targetValue, operation, createMissing);\n      });\n   }\n   else\n   {\n      accessors.forEach((accessor) =>\n      {\n         safeSet(data, accessor, value, operation, createMissing);\n      });\n   }\n}\n\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * @param {object}   source - Source object.\n *\n * @param {object}   target - Target object.\n *\n * @returns {boolean} True if equal.\n */\nexport function safeEqual(source, target)\n{\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\n   {\n      return false;\n   }\n\n   const sourceAccessors = getAccessorList(source);\n\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\n   {\n      const accessor = sourceAccessors[cntr];\n\n      const sourceObjectValue = safeAccess(source, accessor);\n      const targetObjectValue = safeAccess(target, accessor);\n\n      if (sourceObjectValue !== targetObjectValue) { return false; }\n   }\n\n   return true;\n}\n\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param {object}   data - An object to access entry data.\n *\n * @param {string}   accessor - A string describing the entries to access.\n *\n * @param {*}        value - A new value to set if an entry for accessor is found.\n *\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\n *                                       'set-undefined', 'sub'.\n *\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\n *                                          automatically.\n *\n * @returns {boolean} True if successful.\n */\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\n\n   const access = accessor.split('.');\n\n   // Walk through the given object by the accessor indexes.\n   for (let cntr = 0; cntr < access.length; cntr++)\n   {\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n      if (Array.isArray(data))\n      {\n         const number = (+access[cntr]);\n\n         if (!Number.isInteger(number) || number < 0) { return false; }\n      }\n\n      if (cntr === access.length - 1)\n      {\n         switch (operation)\n         {\n            case 'add':\n               data[access[cntr]] += value;\n               break;\n\n            case 'div':\n               data[access[cntr]] /= value;\n               break;\n\n            case 'mult':\n               data[access[cntr]] *= value;\n               break;\n\n            case 'set':\n               data[access[cntr]] = value;\n               break;\n\n            case 'set-undefined':\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\n               break;\n\n            case 'sub':\n               data[access[cntr]] -= value;\n               break;\n         }\n      }\n      else\n      {\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\n\n         // Abort if the next level is null or not an object and containing a value.\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\n\n         data = data[access[cntr]];\n      }\n   }\n\n   return true;\n}\n\n/**\n * Performs bulk setting of values to the given data object.\n *\n * @param {object}            data - The data object to set data.\n *\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\n *\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\n *                                                default (`set`).\n *\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\n *                                                   automatically.\n */\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\n{\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\n\n   for (const accessor of Object.keys(accessorValues))\n   {\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\n   }\n}\n\n/**\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\n *\n * @param {object}                           data - The data object to test.\n *\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\n *\n * @param {string}                           [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validate(data, validationData = {}, dataName = 'data')\n{\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\n\n   let result;\n\n   for (const key of Object.keys(validationData))\n   {\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\n\n      const entry = validationData[key];\n\n      switch (entry.test)\n      {\n         case 'array':\n            result = validateArray(data, key, entry, dataName);\n            break;\n\n         case 'entry':\n            result = validateEntry(data, key, entry, dataName);\n            break;\n\n         case 'entry|array':\n            result = validateEntryOrArray(data, key, entry, dataName);\n            break;\n      }\n   }\n\n   return result;\n}\n\n/**\n * Validates all array entries against potential type and expected tests.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object.\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataArray = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataArray === 'undefined') { return true; }\n\n   if (!Array.isArray(dataArray))\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if (typeof type === 'string')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!(typeof dataArray[cntr] === type))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(TypeError,\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\n   // entries as a `typeof` test against expected.\n   if (Array.isArray(expected))\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (expected.indexOf(dataArray[cntr]) < 0)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (expected instanceof Set)\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         if (!expected.has(dataArray[cntr]))\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\n      {\n         try\n         {\n            const result = expected(dataArray[cntr]);\n\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\n         }\n         catch (err)\n         {\n            if (error)\n            {\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\n                dataArray[cntr];\n\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\n                dataEntryString}' failed validation: ${err.message}.`);\n            }\n            else\n            {\n               return false;\n            }\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\n *\n * @param {object}            data - The object data to validate.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {object}            opts - Options object\n *\n * @param {string}            [opts.type] - Tests with a typeof check.\n *\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\n *\n * @param {string}            [opts.message] - Optional message to include.\n *\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\n *\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\n error = true } = {}, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   // A non-required entry is missing so return without validation.\n   if (!required && typeof dataEntry === 'undefined') { return true; }\n\n   if (type && typeof dataEntry !== type)\n   {\n      if (error)\n      {\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\n    (Array.isArray(expected) && expected.indexOf(dataEntry) < 0))\n   {\n      if (error)\n      {\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\n          JSON.stringify(expected)}.`);\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (typeof expected === 'function')\n   {\n      try\n      {\n         const result = expected(dataEntry);\n\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\n      }\n      catch (err)\n      {\n         if (error)\n         {\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\n\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\n             err.message}.`);\n         }\n         else\n         {\n            return false;\n         }\n      }\n   }\n\n   return true;\n}\n\n/**\n * Dispatches validation of data entry to string or array validation depending on data entry type.\n *\n * @param {object}            data - The data object to test.\n *\n * @param {string}            accessor - A string describing the entries to access.\n *\n * @param {ValidationEntry}   [entry] - A validation entry.\n *\n * @param {string}            [dataName='data'] - Optional name of data.\n *\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\n */\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\n{\n   const dataEntry = safeAccess(data, accessor);\n\n   let result;\n\n   if (Array.isArray(dataEntry))\n   {\n      result = validateArray(data, accessor, entry, dataName);\n   }\n   else\n   {\n      result = validateEntry(data, accessor, entry, dataName);\n   }\n\n   return result;\n}\n\n// Module private ---------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\n *\n * @returns {*} The frozen object.\n * @ignore\n * @private\n */\nfunction _deepFreeze(data, skipFreezeKeys)\n{\n   if (Array.isArray(data))\n   {\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\n   }\n   else if (typeof data === 'object')\n   {\n      for (const key in data)\n      {\n         // eslint-disable-next-line no-prototype-builtins\n         if (data.hasOwnProperty(key) && skipFreezeKeys.indexOf(key) === -1) { _deepFreeze(data[key], skipFreezeKeys); }\n      }\n   }\n\n   return Object.freeze(data);\n}\n\n/**\n * Private implementation of depth traversal.\n *\n * @param {object|Array}   data - An object or array.\n *\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\n *\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\n *                                  the given data.\n * @returns {*} The data object.\n * @ignore\n * @private\n */\nfunction _depthTraverse(data, func, modify)\n{\n   if (modify)\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++)\n         {\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\n         }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         data = func(data);\n      }\n   }\n   else\n   {\n      if (Array.isArray(data))\n      {\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\n      }\n      else if (typeof data === 'object')\n      {\n         for (const key in data)\n         {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\n         }\n      }\n      else\n      {\n         func(data);\n      }\n   }\n\n   return data;\n}\n\n/**\n * Private implementation of `getAccessorList`.\n *\n * @param {object}   data - An object to traverse.\n *\n * @returns {string[]} Accessor list.\n * @ignore\n * @private\n */\nfunction _getAccessorList(data)\n{\n   const accessors = [];\n\n   for (const key in data)\n   {\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\n      {\n         if (typeof data[key] === 'object')\n         {\n            const childKeys = _getAccessorList(data[key]);\n\n            childKeys.forEach((childKey) =>\n            {\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\n            });\n         }\n         else\n         {\n            accessors.push(key);\n         }\n      }\n   }\n\n   return accessors;\n}\n\n/**\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\n *\n * @param {Error}    clazz - Error class to instantiate.\n *\n * @param {string}   message - An error message.\n *\n * @returns {*} Error of the clazz.\n * @ignore\n * @private\n */\nfunction _validateError(clazz, message = void 0)\n{\n   const error = new clazz(message);\n   error._objectValidateError = true;\n   return error;\n}\n","import { EventbusProxy } from '@typhonjs-plugin/eventbus';\n\n/**\n * Defines a class holding the data associated with a plugin including its instance.\n */\nexport default class PluginEntry\n{\n   /**\n    * Instantiates a PluginEntry.\n    *\n    * @param {string}      name - The plugin name.\n    *\n    * @param {PluginData}  data -  describing the plugin, manager, and optional module data.\n    *\n    * @param {object}      instance - The loaded plugin instance.\n    *\n    * @param {EventbusProxy}  eventbusProxy - An EventProxy associated with the plugin wrapping the plugin manager\n    * eventbus.\n    */\n   constructor(name, data, instance, eventbusProxy = void 0)\n   {\n      /**\n       * Data describing the plugin, manager, and optional module data.\n       *\n       * @type {PluginData}\n       * @private\n       */\n      this._data = data;\n\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = true;\n\n      /**\n       * The plugin name.\n       *\n       * @type {string}\n       * @private\n       */\n      this._name = name;\n\n      /**\n       * The loaded plugin instance.\n       *\n       * @type {object}\n       * @private\n       */\n      this._instance = instance;\n\n      /**\n       * An EventbusProxy associated with the plugin wrapping the plugin manager eventbus.\n       *\n       * @type {EventbusProxy}\n       * @private\n       */\n      this._eventbusProxy = eventbusProxy;\n   }\n\n   /**\n    * Provides a convenience method to escape file paths.\n    *\n    * @param {string}   value - A string to escape.\n    *\n    * @returns {string} An escaped string.\n    */\n   static escape(value)\n   {\n      if (typeof value !== 'string') { throw new TypeError(`'value' is not a string.`); }\n\n      // Remove any leading relative directory paths.\n      let escaped = value.replace(/^(\\.\\.|\\.)/, '');\n\n      // Escape any forward / reverse slashes for RegExp creation.\n      escaped = escaped.replace(/[\\\\]/g, '\\\\');\n      escaped = escaped.replace(/[/]/g, '\\\\/');\n\n      return escaped;\n   }\n\n   /**\n    * Get plugin data.\n    *\n    * @returns {PluginData} The associated PluginData.\n    */\n   get data() { return this._data; }\n\n   /**\n    * Get enabled.\n    *\n    * @returns {boolean} Current enabled state.\n    */\n   get enabled() { return this._enabled; }\n\n   /**\n    * Set enabled.\n    *\n    * @param {boolean} enabled - New enabled state.\n    */\n   set enabled(enabled)\n   {\n      /**\n       * The plugin enabled state.\n       *\n       * @type {boolean}\n       * @private\n       */\n      this._enabled = enabled;\n   }\n\n   /**\n    * Get associated EventbusProxy.\n    *\n    * @returns {EventbusProxy} Associated EventbusProxy.\n    */\n   get eventbusProxy() { return this._eventbusProxy; }\n\n   /**\n    * Get plugin instance.\n    *\n    * @returns {object} The plugin instance.\n    */\n   get instance() { return this._instance; }\n\n   /**\n    * Get plugin name.\n    *\n    * @returns {string} Plugin name.\n    */\n   get name() { return this._name; }\n}\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n","import { EventbusProxy } from '@typhonjs-plugin/eventbus';\n\n/**\n * PluginEvent - Provides the data / event passed to all invoked methods in\n * {@link AbstractPluginManager#invokeSyncEvent}. The `event.data` field is returned to the caller. Before returning\n * though additional the following additional metadata is attached:\n *\n * (number)    `$$plugin_invoke_count` - The count of plugins invoked.\n *\n * (string[])  `$$plugin_invoke_names` - The names of plugins invoked.\n */\nexport default class PluginEvent\n{\n   /**\n    * Initializes PluginEvent.\n    *\n    * @param {object} copyProps - Event data to copy.\n    * @param {object} passthruProps - Event data to pass through.\n    */\n   constructor(copyProps = {}, passthruProps = {})\n   {\n      /**\n       * Provides the unified event data assigning any pass through data to the copied data supplied.\n       */\n      this.data = Object.assign(JSON.parse(JSON.stringify(copyProps)), passthruProps);\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {EventbusProxy} - The active EventbusProxy for that particular plugin.\n       */\n      this.eventbus = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {string} - The active plugin name.\n       */\n      this.pluginName = void 0;\n\n      /**\n       * Unique data available in each plugin invoked.\n       *\n       * @type {object} - The active plugin options.\n       */\n      this.pluginOptions = void 0;\n   }\n}\n","/**\n * @typedef {object} PluginConfig\n *\n * @property {string}      name - Defines the name of the plugin; if no `target` entry is present the name\n *                                doubles as the target (please see target).\n *\n * @property {string|URL}  [target] - Defines the target Node module to load or defines a local file (full\n *                                    path or relative to current working directory to load. Target may also be a file\n *                                    URL / string or in the browser a web URL.\n *\n * @property {string}      [instance] - Defines an existing object instance to use as the plugin.\n *\n * @property {object}      [options] - Defines an object of options for the plugin.\n */\n\n/**\n * Performs validation of a PluginConfig.\n *\n * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n *\n * @returns {boolean} True if the given PluginConfig is valid.\n */\nexport default function isValidConfig(pluginConfig)\n{\n   if (typeof pluginConfig !== 'object') { return false; }\n\n   if (typeof pluginConfig.name !== 'string') { return false; }\n\n   if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n    !(pluginConfig.target instanceof URL))\n   {\n      return false;\n   }\n\n   if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object') { return false; }\n\n   return true;\n}\n","import Eventbus                     from '@typhonjs-plugin/eventbus';\nimport { EventbusProxy }            from '@typhonjs-plugin/eventbus';\nimport { deepFreeze, isIterable }   from '@typhonjs-utils/object';\n\nimport PluginEntry                  from './PluginEntry.js';\nimport PluginEvent                  from './PluginEvent.js';\n\nimport isValidConfig                from './isValidConfig.js';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * It isn't necessary to use an eventbus associated with the plugin manager though invocation then relies on invoking\n * methods directly with the plugin manager instance.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:async:add` - {@link AbstractPluginManager#add}\n *\n * `plugins:async:add:all` - {@link AbstractPluginManager#addAll}\n *\n * `plugins:async:destroy:manager` - {@link AbstractPluginManager#destroy}\n *\n * `plugins:async:invoke` - {@link AbstractPluginManager#invokeAsync}\n *\n * `plugins:async:invoke:event` - {@link AbstractPluginManager#invokeAsyncEvent}\n *\n * `plugins:async:remove` - {@link AbstractPluginManager#remove}\n *\n * `plugins:async:remove:all` - {@link AbstractPluginManager#removeAll}\n *\n * `plugins:create:eventbus:proxy` - {@link AbstractPluginManager#createEventbusProxy}\n *\n * `plugins:get:enabled` - {@link AbstractPluginManager#getPluginsEnabled}\n *\n * `plugins:get:options` - {@link AbstractPluginManager#getOptions}\n *\n * `plugins:has:plugin` - {@link AbstractPluginManager#hasPlugin}\n *\n * `plugins:invoke` - {@link AbstractPluginManager#invoke}\n *\n * `plugins:is:valid:config` - {@link AbstractPluginManager#isValidConfig}\n *\n * `plugins:set:enabled` - {@link AbstractPluginManager#setPluginsEnabled}\n *\n * `plugins:set:options` - {@link AbstractPluginManager#setOptions}\n *\n * `plugins:sync:invoke` - {@link AbstractPluginManager#invokeSync}\n *\n * `plugins:sync:invoke:event` - {@link AbstractPluginManager#invokeSyncEvent}\n *\n * Automatically when a plugin is loaded and unloaded respective callbacks `onPluginLoad` and `onPluginUnload` will\n * be attempted to be invoked on the plugin. This is an opportunity for the plugin to receive any associated eventbus\n * and wire itself into it. It should be noted that a protected proxy around the eventbus is passed to the plugins\n * such that when the plugin is removed automatically all events registered on the eventbus are cleaned up without\n * a plugin author needing to do this manually in the `onPluginUnload` callback. This solves any dangling event binding\n * issues.\n *\n * By supporting ES Modules in Node and the browser and CJS on Node the plugin manager is by nature asynchronous for\n * the\n * core methods of adding / removing plugins and destroying the manager. The lifecycle methods `onPluginLoad` and\n * `onPluginUnload` will be awaited on such that if a plugin returns a Promise or is an async method\n * then it will complete before execution continues.\n *\n * It is recommended to interact with the plugin manager eventbus through an eventbus proxy. The\n * `createEventbusProxy` method will return a proxy to the default or currently set eventbus.\n *\n * If eventbus functionality is enabled it is important especially if using a process / global level eventbus such as\n * `@typhonjs-plugin/eventbus/instances` to call {@link AbstractPluginManager#destroy} to clean up all plugin eventbus\n * resources and the plugin manager event bindings; this is primarily a testing concern.\n *\n * @see https://www.npmjs.com/package/@typhonjs-plugin/eventbus\n *\n * @example\n * import PluginManager from '@typhonjs-plugin/manager';\n *\n * const pluginManager = new PluginManager();\n *\n * pluginManager.add({ name: 'an-npm-plugin-enabled-module' });\n * pluginManager.add({ name: 'my-local-module', target: './myModule.js' });\n *\n * const eventbus = pluginManager.createEventbusProxy();\n *\n * // Let's say an-npm-plugin-enabled-module responds to 'cool:event' which returns 'true'.\n * // Let's say my-local-module responds to 'hot:event' which returns 'false'.\n * // Both of the plugin / modules will have 'onPluginLoaded' invoked with a proxy to the eventbus and any plugin\n * // options defined.\n *\n * // One can then use the eventbus functionality to invoke associated module / plugin methods even retrieving results.\n * assert(eventbus.triggerSync('cool:event') === true);\n * assert(eventbus.triggerSync('hot:event') === false);\n *\n * // One can also indirectly invoke any method of the plugin via:\n * eventbus.triggerSync('plugins:invoke:sync:event', 'aCoolMethod'); // Any plugin with a method named `aCoolMethod` is\n *    invoked. eventbus.triggerSync('plugins:invoke:sync:event', 'aCoolMethod', {}, {},\n *    'an-npm-plugin-enabled-module'); // specific invocation.\n *\n * // The 3rd parameter will make a copy of the hash and the 4th defines a pass through object hash sending a single\n * // event / object hash to the invoked method.\n *\n * // -----------------------\n *\n * // Given that `@typhonjs-plugin/eventbus/instances` defines a global / process level eventbus you can import it in\n *    an\n * entirely different file or even NPM module and invoke methods of loaded plugins like this:\n *\n * import eventbus from '@typhonjs-plugin/eventbus/instances';\n *\n * eventbus.triggerSync('plugins:invoke', 'aCoolMethod'); // Any plugin with a method named `aCoolMethod` is invoked.\n *\n * assert(eventbus.triggerSync('cool:event') === true);\n *\n * eventbus.trigger('plugins:remove', 'an-npm-plugin-enabled-module'); // Removes the plugin and unregisters events.\n *\n * assert(eventbus.triggerSync('cool:event') === true); // Will now fail!\n *\n * // In this case though when using the global eventbus be mindful to always call `pluginManager.destroy()` in the\n *    main\n * // thread of execution scope to remove all plugins and the plugin manager event bindings!\n */\nexport default class AbstractPluginManager\n{\n   /**\n    * Instantiates AbstractPluginManager\n    *\n    * @param {object}   [options] - Provides various configuration options:\n    *\n    * @param {Eventbus} [options.eventbus] - An instance of '@typhonjs-plugin/eventbus' used as the plugin\n    * eventbus. If not provided a default eventbus is created.\n    *\n    * @param {string}   [options.eventPrepend='plugin'] - A customized name to prepend PluginManager events on the\n    *                                                     eventbus.\n    *\n    * @param {boolean}  [options.throwNoMethod=false] - If true then when a method fails to be invoked by any plugin\n    *                                                   an exception will be thrown.\n    *\n    * @param {boolean}  [options.throwNoPlugin=false] - If true then when no plugin is matched to be invoked an\n    *                                                   exception will be thrown.\n    *\n    * @param {PluginSupportImpl}  [options.PluginSupport] - Optional class to pass in which extends the plugin manager. A default\n    *                                              implementation is available: {@link PluginSupport}\n    */\n   constructor(options = {})\n   {\n      if (typeof options !== 'object') { throw new TypeError(`'options' is not an object.`); }\n\n      if (options.PluginSupport !== void 0 && typeof options.PluginSupport !== 'function')\n      {\n         throw new TypeError(`'options.pluginSupport' is not a constructor function.`);\n      }\n\n      /**\n       * Stores the plugins by name with an associated PluginEntry.\n       *\n       * @type {Map<string, PluginEntry>}\n       * @private\n       */\n      this._pluginMap = new Map();\n\n      /**\n       * Stores any associated eventbus.\n       *\n       * @type {Eventbus}\n       * @protected\n       */\n      this._eventbus = null;\n\n      /**\n       * Stores any EventbusProxy instances created, so that they may be automatically destroyed.\n       *\n       * @type {EventbusProxy[]}\n       * @private\n       */\n      this._eventbusProxies = [];\n\n      /**\n       * Provides an instance of PluginSupportImpl interface to extend the plugin manager through the eventbus API.\n       *\n       * @type {PluginSupportImpl}\n       * @private\n       */\n      this._pluginSupport = options.PluginSupport !== void 0 ? new options.PluginSupport(this) : null;\n\n      /**\n       * Defines options for throwing exceptions. Turned off by default.\n       *\n       * @type {PluginManagerOptions}\n       * @private\n       */\n      this._options =\n      {\n         pluginsEnabled: true,\n         noEventAdd: false,\n         noEventDestroy: false,\n         noEventOptions: true,\n         noEventRemoval: false,\n         throwNoMethod: false,\n         throwNoPlugin: false\n      };\n\n      this.setEventbus({\n         eventbus: options.eventbus !== void 0 ? options.eventbus : new Eventbus(),\n         eventPrepend: options.eventPrepend\n      });\n\n      this.setOptions(options);\n   }\n\n   /**\n    * Adds a plugin by the given configuration parameters. A plugin `name` is always required. If no other options\n    * are provided then the `name` doubles as the NPM module / local file to load. The loading first checks for an\n    * existing `instance` to use as the plugin. Then the `target` is chosen as the NPM module / local file to load.\n    * By passing in `options` this will be stored and accessible to the plugin during all callbacks.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with plugin.\n    *\n    * @returns {Promise<PluginData|undefined>} The PluginData that represents the plugin added.\n    */\n   async add(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginConfig !== 'object') { throw new TypeError(`'pluginConfig' is not an object.`); }\n\n      if (typeof pluginConfig.name !== 'string')\n      {\n         throw new TypeError(`'pluginConfig.name' is not a string for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.target !== 'undefined' && typeof pluginConfig.target !== 'string' &&\n       !(pluginConfig.target instanceof URL))\n      {\n         throw new TypeError(\n          `'pluginConfig.target' is not a string or URL for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof pluginConfig.options !== 'undefined' && typeof pluginConfig.options !== 'object')\n      {\n         throw new TypeError(`'pluginConfig.options' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      if (typeof moduleData !== 'undefined' && typeof moduleData !== 'object')\n      {\n         throw new TypeError(`'moduleData' is not an object for entry: ${JSON.stringify(pluginConfig)}.`);\n      }\n\n      // If a plugin with the same name already exists post a warning and exit early.\n      if (this._pluginMap.has(pluginConfig.name))\n      {\n         throw new Error(`A plugin already exists with name: ${pluginConfig.name}.`);\n      }\n\n      let instance, target, type;\n\n      // Use an existing instance of a plugin; a static class is assumed when instance is a function.\n      if (typeof pluginConfig.instance === 'object' || typeof pluginConfig.instance === 'function')\n      {\n         instance = pluginConfig.instance;\n\n         target = pluginConfig.name;\n\n         type = 'instance';\n      }\n      else\n      {\n         // If a target is defined use it instead of the name.\n         target = pluginConfig.target || pluginConfig.name;\n\n         // Defer to child class to load module in Node or the browser.\n         const result = await this._loadModule(target);\n\n         instance = result.instance;\n         type = result.type;\n      }\n\n      // Convert any URL target a string.\n      if (target instanceof URL)\n      {\n         target = target.toString();\n      }\n\n      /**\n       * Create an object hash with data describing the plugin, manager, and any extra module data.\n       *\n       * @type {PluginData}\n       */\n      const pluginData = JSON.parse(JSON.stringify(\n      {\n         manager:\n         {\n            eventPrepend: this._eventPrepend\n         },\n\n         module: moduleData || {},\n\n         plugin:\n         {\n            name: pluginConfig.name,\n            scopedName: `${this._eventPrepend}:${pluginConfig.name}`,\n            target,\n            targetEscaped: PluginEntry.escape(target),\n            type,\n            options: pluginConfig.options || {}\n         }\n      }));\n\n      deepFreeze(pluginData, ['eventPrepend', 'scopedName']);\n\n      const eventbusProxy = this._eventbus !== null && typeof this._eventbus !== 'undefined' ?\n       new EventbusProxy(this._eventbus) : void 0;\n\n      const entry = new PluginEntry(pluginConfig.name, pluginData, instance, eventbusProxy);\n\n      this._pluginMap.set(pluginConfig.name, entry);\n\n      // Invoke private module method which allows skipping optional error checking.\n      await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, pluginConfig.name, this._pluginMap, this._options, false);\n\n      // Invoke `typhonjs:plugin:manager:plugin:added` allowing external code to react to plugin addition.\n      if (this._eventbus)\n      {\n         await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:added`, pluginData);\n      }\n\n      return pluginData;\n   }\n\n   /**\n    * Initializes multiple plugins in a single call.\n    *\n    * @param {PluginConfig[]} pluginConfigs - An array of plugin config object hash entries.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all loaded plugins.\n    */\n   async addAll(pluginConfigs = [], moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!Array.isArray(pluginConfigs)) { throw new TypeError(`'pluginConfigs' is not an array.`); }\n\n      const pluginsData = [];\n\n      for (const pluginConfig of pluginConfigs)\n      {\n         const result = await this.add(pluginConfig, moduleData);\n\n         if (result) { pluginsData.push(result); }\n      }\n\n      return pluginsData;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig}   pluginConfig - Defines the plugin to load.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData|undefined>} - Operation success.\n    * @private\n    */\n   async _addEventbus(pluginConfig, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventAdd ? this.add(pluginConfig, moduleData) : void 0;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent addition if optional `noEventAdd` is enabled. This disables\n    * the ability for plugins to be added via events preventing any external code adding plugins in this manner.\n    *\n    * @param {PluginConfig[]} pluginConfigs - An array of plugin config object hash entries.\n    *\n    * @param {object}         [moduleData] - Optional object hash to associate with all plugins.\n    *\n    * @returns {Promise<PluginData[]>} An array of PluginData objects of all loaded plugins.\n    * @private\n    */\n   async _addAllEventbus(pluginConfigs, moduleData)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventAdd) { return this.addAll(pluginConfigs, moduleData); }\n   }\n\n   /**\n    * If an eventbus is assigned to this plugin manager then a new EventbusProxy wrapping this eventbus is returned.\n    * It is added to `this._eventbusProxies` so †hat the instances are destroyed when the plugin manager is destroyed.\n    *\n    * @returns {EventbusProxy} A proxy for the currently set Eventbus.\n    */\n   createEventbusProxy()\n   {\n      if (!(this._eventbus instanceof Eventbus))\n      {\n         throw new ReferenceError('No eventbus assigned to plugin manager.');\n      }\n\n      const eventbusProxy = new EventbusProxy(this._eventbus);\n\n      // Store proxy to make sure it is destroyed when the plugin manager is destroyed.\n      this._eventbusProxies.push(eventbusProxy);\n\n      return eventbusProxy;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    */\n   async destroy()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      // Remove all plugins; this will invoke onPluginUnload.\n      await this.removeAll();\n\n      // Destroy any EventbusProxy instances created.\n      for (const eventbusProxy of this._eventbusProxies)\n      {\n         eventbusProxy.destroy();\n      }\n\n      this._eventbusProxies = [];\n\n      if (this._eventbus !== null && typeof this._eventbus !== 'undefined')\n      {\n         this._eventbus.off(`${this._eventPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke`, this.invokeAsync, this);\n         this._eventbus.off(`${this._eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${this._eventPrepend}:get:enabled`, this.getPluginsEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${this._eventPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${this._eventPrepend}:invoke`, this.invoke, this);\n         this._eventbus.off(`${this._eventPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${this._eventPrepend}:set:enabled`, this.setPluginsEnabled, this);\n         this._eventbus.off(`${this._eventPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke`, this.invokeSync, this);\n         this._eventbus.off(`${this._eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n      }\n\n      if (this._pluginSupport !== null && this._pluginSupport !== void 0)\n      {\n         await this._pluginSupport.destroy({ eventbus: this._eventbus, eventPrepend: this._eventPrepend });\n\n         this._pluginSupport = null;\n      }\n\n      this._pluginMap = null;\n      this._eventbus = null;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager destruction if optional `noEventDestroy` is\n    * enabled. This disables the ability for the plugin manager to be destroyed via events preventing any external\n    * code removing plugins in this manner.\n    *\n    * @private\n    * @returns {Promise} The promise returned from `destroy` or immediate resolution.\n    */\n   async _destroyEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventDestroy) { return this.destroy(); }\n   }\n\n   /**\n    * Returns whether this plugin manager has been destroyed.\n    *\n    * @returns {boolean} Returns whether this plugin manager has been destroyed.\n    */\n   get isDestroyed()\n   {\n      return this._pluginMap === null || this._pluginMap === void 0;\n   }\n\n   /**\n    * Returns any associated eventbus.\n    *\n    * @returns {Eventbus|null} The associated eventbus.\n    */\n   getEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return this._eventbus;\n   }\n\n   /**\n    * Returns a copy of the plugin manager options.\n    *\n    * @returns {PluginManagerOptions} A copy of the plugin manager options.\n    */\n   getOptions()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return JSON.parse(JSON.stringify(this._options));\n   }\n\n   /**\n    * Returns the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {undefined|object}  [options] - Options object. If undefined all plugin enabled state is returned.\n    *\n    * @param {string|Iterable<string>}   [options.pluginNames] - Plugin name or iterable list of names to get state.\n    *\n    * @returns {boolean|Array<{pluginName: string, enabled: boolean}>} - Enabled state for single plugin or array of\n    *                                                                    results for multiple plugins.\n    */\n   getPluginsEnabled({ pluginNames = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginNames !== 'string' && !isIterable(pluginNames))\n      {\n         throw new TypeError(`'pluginNames' is not a string or iterable.`);\n      }\n\n      // Return a single boolean enabled result for a single plugin if found.\n      if (typeof pluginNames === 'string')\n      {\n         const entry = this._pluginMap.get(pluginNames);\n         return entry instanceof PluginEntry && entry.enabled;\n      }\n\n      const results = [];\n\n      // If there are plugin names specified then limit returned results to just them.\n      if (pluginNames.length)\n      {\n         for (const pluginName of pluginNames)\n         {\n            const entry = this._pluginMap.get(pluginName);\n            const loaded = entry instanceof PluginEntry;\n            results.push({ pluginName, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n      else // Return all plugins enabled state.\n      {\n         for (const [pluginName, entry] of this._pluginMap.entries())\n         {\n            const loaded = entry instanceof PluginEntry;\n            results.push({ pluginName, enabled: loaded && entry.enabled, loaded });\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name.\n    *\n    * @param {string}   pluginName - Plugin name to test.\n    *\n    * @returns {boolean} - True if a plugin exists.\n    */\n   hasPlugin(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      return this._pluginMap.has(pluginName);\n   }\n\n   /**\n    * This dispatch method simply invokes any plugin targets for the given methodName..\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    */\n   invoke(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return; }\n\n      if (typeof nameOrList === 'string')\n      {\n         const plugin = this._pluginMap.get(nameOrList);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[methodName] === 'function')\n            {\n               Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of nameOrList)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n      }\n   }\n\n   /**\n    * This dispatch method uses ES6 Promises and adds any returned results to an array which is added to a Promise.all\n    * construction which passes back a Promise which waits until all Promises complete. Any target invoked may return a\n    * Promise or any result. This is very useful to use for any asynchronous operations.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {Promise<*|Array<*>>} A Promise with any returned results.\n    */\n   invokeAsync(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      try\n      {\n         if (typeof nameOrList === 'string')\n         {\n            const plugin = this._pluginMap.get(nameOrList);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                   plugin.instance[methodName](args);\n\n                  // If we received a valid result return immediately.\n                  if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n         else\n         {\n            for (const name of nameOrList)\n            {\n               const plugin = this._pluginMap.get(name);\n\n               if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n               {\n                  hasPlugin = true;\n\n                  if (typeof plugin.instance[methodName] === 'function')\n                  {\n                     result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                      plugin.instance[methodName](args);\n\n                     // If we received a valid result return immediately.\n                     if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                     hasMethod = true;\n                  }\n               }\n            }\n         }\n\n         if (this._options.throwNoPlugin && !hasPlugin)\n         {\n            return Promise.reject(new Error(`PluginManager failed to find any target plugins.`));\n         }\n\n         if (this._options.throwNoMethod && !hasMethod)\n         {\n            return Promise.reject(new Error(`PluginManager failed to invoke '${methodName}'.`));\n         }\n      }\n      catch (error)\n      {\n         return Promise.reject(error);\n      }\n\n      // If there are multiple results then use Promise.all otherwise Promise.resolve.\n      return results.length > 1 ? Promise.all(results) : Promise.resolve(result);\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {object}            [copyProps={}] - plugin event object.\n    *\n    * @param {object}            [passthruProps={}] - if true, event has plugin option.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {Promise<PluginEvent>} A PluginEvent representing the invocation results.\n    */\n   invokeAsyncEvent(methodName, copyProps = {}, passthruProps = {}, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return Promise.resolve(); }\n\n      // Invokes the private internal async events method with optional error checking enabled.\n      return s_INVOKE_ASYNC_EVENTS(methodName, copyProps, passthruProps, nameOrList, this._pluginMap, this._options);\n   }\n\n   /**\n    * This dispatch method synchronously passes back a single value or an array with all results returned by any\n    * invoked targets.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {*|Array<*>}        [args] - Optional arguments. An array will be spread as multiple arguments.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {*|Array<*>} An array of results.\n    */\n   invokeSync(methodName, args = void 0, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n       typeof nameOrList[Symbol.iterator] !== 'function')\n      {\n         throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n      }\n\n      // Track if a plugin method is invoked.\n      let hasMethod = false;\n      let hasPlugin = false;\n\n      // Capture results.\n      let result = void 0;\n      const results = [];\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return result; }\n\n      if (typeof nameOrList === 'string')\n      {\n         const plugin = this._pluginMap.get(nameOrList);\n\n         if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof plugin.instance[methodName] === 'function')\n            {\n               result = Array.isArray(args) ? plugin.instance[methodName](...args) : plugin.instance[methodName](args);\n\n               // If we received a valid result return immediately.\n               if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n               hasMethod = true;\n            }\n         }\n      }\n      else\n      {\n         for (const name of nameOrList)\n         {\n            const plugin = this._pluginMap.get(name);\n\n            if (plugin instanceof PluginEntry && plugin.enabled && plugin.instance)\n            {\n               hasPlugin = true;\n\n               if (typeof plugin.instance[methodName] === 'function')\n               {\n                  result = Array.isArray(args) ? plugin.instance[methodName](...args) :\n                   plugin.instance[methodName](args);\n\n                  // If we received a valid result return immediately.\n                  if (result !== null || typeof result !== 'undefined') { results.push(result); }\n\n                  hasMethod = true;\n               }\n            }\n         }\n      }\n\n      if (this._options.throwNoPlugin && !hasPlugin)\n      {\n         throw new Error(`PluginManager failed to find any target plugins.`);\n      }\n\n      if (this._options.throwNoMethod && !hasMethod)\n      {\n         throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n      }\n\n      // Return the results array if there are more than one or just a single result.\n      return results.length > 1 ? results : result;\n   }\n\n   /**\n    * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n    *\n    * @param {string}            methodName - Method name to invoke.\n    *\n    * @param {object}            [copyProps={}] - plugin event object.\n    *\n    * @param {object}            [passthruProps={}] - if true, event has plugin option.\n    *\n    * @param {string|string[]}   [nameOrList] - An optional plugin name or array / iterable of plugin names to invoke.\n    *\n    * @returns {PluginEvent|undefined} A plugin event with invocation results.\n    */\n   invokeSyncEvent(methodName, copyProps = {}, passthruProps = {}, nameOrList = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this._pluginMap.keys(); }\n\n      // Early out if plugins are not enabled.\n      if (!this._options.pluginsEnabled) { return void 0; }\n\n      // Invokes the private internal sync events method with optional error checking enabled.\n      return s_INVOKE_SYNC_EVENTS(methodName, copyProps, passthruProps, nameOrList, this._pluginMap, this._options);\n   }\n\n   /**\n    * Performs validation of a PluginConfig.\n    *\n    * @param {PluginConfig}   pluginConfig - A PluginConfig to validate.\n    *\n    * @returns {boolean} True if the given PluginConfig is valid.\n    */\n   isValidConfig(pluginConfig)\n   {\n      return isValidConfig(pluginConfig);\n   }\n\n   /**\n    * Child implementations provide platform specific module loading by overriding this method.\n    *\n    * @param {string|URL}   moduleOrPath - A module name, file path, or URL.\n    *\n    * @returns {Promise<*>} Loaded module.\n    * @private\n    */\n   async _loadModule(moduleOrPath)  // eslint-disable-line no-unused-vars\n   {\n   }\n\n   /**\n    * Removes a plugin by name after unloading it and clearing any event bindings automatically.\n    *\n    * @param {string}   pluginName - The plugin name to remove.\n    *\n    * @returns {Promise<boolean>} - Operation success.\n    */\n   async remove(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      const entry = this._pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, pluginName, this._pluginMap, this._options, false);\n\n         // Automatically remove any potential reference to a stored event proxy instance.\n         try\n         {\n            entry.instance._eventbus = void 0;\n         }\n         catch (err) { /* nop */ }\n\n         if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n         this._pluginMap.delete(pluginName);\n\n         // Invoke `typhonjs:plugin:manager:plugin:removed` allowing external code to react to plugin removed.\n         if (this._eventbus)\n         {\n            await this._eventbus.triggerAsync(`typhonjs:plugin:manager:plugin:removed`,\n             JSON.parse(JSON.stringify(entry.data)));\n         }\n\n         return true;\n      }\n\n      return false;\n   }\n\n   /**\n    * Removes all plugins after unloading them and clearing any event bindings automatically.\n    *\n    * @returns {Promise.<Array<{plugin: string, result: boolean}>>} A list of plugin names and removal success state.\n    */\n   async removeAll()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      const values = [];\n\n      for (const pluginName of this._pluginMap.keys())\n      {\n         const result = await this.remove(pluginName);\n         values.push({ plugin: pluginName, result });\n      }\n\n      this._pluginMap.clear();\n\n      return values;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @param {string}   pluginName - The plugin name to remove.\n    *\n    * @returns {Promise<boolean>} - Operation success.\n    * @private\n    */\n   async _removeEventbus(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      return !this._options.noEventRemoval ? this.remove(pluginName) : false;\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent removal if optional `noEventRemoval` is enabled. This disables\n    * the ability for plugins to be removed via events preventing any external code removing plugins in this manner.\n    *\n    * @returns {Promise.<Array<{plugin: string, result: boolean}>>} A list of plugin names and removal success state.\n    * @private\n    */\n   async _removeAllEventbus()\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventRemoval) { return this.removeAll(); }\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.eventbus - The new eventbus to associate.\n    *\n    * @param {string}     [options.eventPrepend='plugins'] - An optional string to prepend to all of the event\n    *                                                        binding targets.\n    *\n    * @returns {Promise<AbstractPluginManager>} This plugin manager.\n    */\n   async setEventbus({ eventbus, eventPrepend = 'plugins' } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!(eventbus instanceof Eventbus)) { throw new TypeError(`'eventbus' is not an 'Eventbus'.`); }\n      if (typeof eventPrepend !== 'string') { throw new TypeError(`'eventPrepend' is not a 'string'.`); }\n\n      // Early escape if the eventbus is the same as the current eventbus.\n      if (eventbus === this._eventbus) { return this; }\n\n      const oldPrepend = this._eventPrepend;\n\n      /**\n       * Stores the prepend string for eventbus registration.\n       *\n       * @type {string}\n       * @private\n       */\n      this._eventPrepend = eventPrepend;\n\n      // Unload and reload any existing plugins from the old eventbus to the target eventbus.\n      if (this._pluginMap.size > 0)\n      {\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginUnload', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Automatically remove any potential reference to a stored event proxy instance.\n            try\n            {\n               entry.instance._eventbus = void 0;\n            }\n            catch (err) { /* nop */ }\n\n            entry.data.manager.eventPrepend = eventPrepend;\n            entry.data.plugin.scopedName = `${eventPrepend}:${entry.name}`;\n\n            if (entry.eventbusProxy instanceof EventbusProxy) { entry.eventbusProxy.destroy(); }\n\n            entry.eventbusProxy = new EventbusProxy(eventbus);\n         }\n\n         // Invoke private module method which allows skipping optional error checking.\n         await s_INVOKE_ASYNC_EVENTS('onPluginLoad', {}, {}, this._pluginMap.keys(), this._pluginMap, this._options,\n          false);\n\n         for (const entry of this._pluginMap.values())\n         {\n            // Invoke `typhonjs:plugin:manager:eventbus:changed` allowing external code to react to plugin\n            // changing eventbus.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:eventbus:changed`, Object.assign({\n                  oldEventbus: this._eventbus,\n                  oldManagerEventPrepend: oldPrepend,\n                  oldScopedName: `${oldPrepend}:${entry.name}`,\n                  newEventbus: eventbus,\n                  newManagerEventPrepend: eventPrepend,\n                  newScopedName: `${eventPrepend}:${entry.name}`\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      }\n\n      if (this._eventbus !== null)\n      {\n         this._eventbus.off(`${oldPrepend}:async:add`, this._addEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:add:all`, this._addAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke`, this.invokeAsync, this);\n         this._eventbus.off(`${oldPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n         this._eventbus.off(`${oldPrepend}:async:remove`, this._removeEventbus, this);\n         this._eventbus.off(`${oldPrepend}:async:remove:all`, this._removeAllEventbus, this);\n         this._eventbus.off(`${oldPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n         this._eventbus.off(`${oldPrepend}:get:enabled`, this.getPluginsEnabled, this);\n         this._eventbus.off(`${oldPrepend}:get:options`, this.getOptions, this);\n         this._eventbus.off(`${oldPrepend}:has:plugin`, this.hasPlugin, this);\n         this._eventbus.off(`${oldPrepend}:invoke`, this.invoke, this);\n         this._eventbus.off(`${oldPrepend}:is:valid:config`, this.isValidConfig, this);\n         this._eventbus.off(`${oldPrepend}:set:enabled`, this.setPluginsEnabled, this);\n         this._eventbus.off(`${oldPrepend}:set:options`, this._setOptionsEventbus, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke`, this.invokeSync, this);\n         this._eventbus.off(`${oldPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n\n         // Invoke `typhonjs:plugin:manager:eventbus:removed` allowing external code to react to eventbus removal.\n         this._eventbus.trigger(`typhonjs:plugin:manager:eventbus:removed`,\n         {\n            oldEventbus: this._eventbus,\n            oldEventPrepend: oldPrepend,\n            newEventbus: eventbus,\n            newEventPrepend: eventPrepend\n         });\n      }\n\n      eventbus.on(`${eventPrepend}:async:add`, this._addEventbus, this);\n      eventbus.on(`${eventPrepend}:async:add:all`, this._addAllEventbus, this);\n      eventbus.on(`${eventPrepend}:async:destroy:manager`, this._destroyEventbus, this);\n      eventbus.on(`${eventPrepend}:async:invoke`, this.invokeAsync, this);\n      eventbus.on(`${eventPrepend}:async:invoke:event`, this.invokeAsyncEvent, this);\n      eventbus.on(`${eventPrepend}:async:remove`, this._removeEventbus, this);\n      eventbus.on(`${eventPrepend}:async:remove:all`, this._removeAllEventbus, this);\n      eventbus.on(`${eventPrepend}:create:eventbus:proxy`, this.createEventbusProxy, this);\n      eventbus.on(`${eventPrepend}:get:enabled`, this.getPluginsEnabled, this);\n      eventbus.on(`${eventPrepend}:get:options`, this.getOptions, this);\n      eventbus.on(`${eventPrepend}:has:plugin`, this.hasPlugin, this);\n      eventbus.on(`${eventPrepend}:invoke`, this.invoke, this);\n      eventbus.on(`${eventPrepend}:is:valid:config`, this.isValidConfig, this);\n      eventbus.on(`${eventPrepend}:set:enabled`, this.setPluginsEnabled, this);\n      eventbus.on(`${eventPrepend}:set:options`, this._setOptionsEventbus, this);\n      eventbus.on(`${eventPrepend}:sync:invoke`, this.invokeSync, this);\n      eventbus.on(`${eventPrepend}:sync:invoke:event`, this.invokeSyncEvent, this);\n\n      // Invoke `typhonjs:plugin:manager:eventbus:set` allowing external code to react to eventbus set.\n      eventbus.trigger('typhonjs:plugin:manager:eventbus:set',\n      {\n         oldEventbus: this._eventbus,\n         oldEventPrepend: oldPrepend,\n         newEventbus: eventbus,\n         newEventPrepend: eventPrepend\n      });\n\n      if (this._pluginSupport !== null && this._pluginSupport !== void 0)\n      {\n         this._pluginSupport.setEventbus({\n            oldEventbus: this._eventbus,\n            newEventbus: eventbus,\n            oldPrepend,\n            newPrepend: eventPrepend\n         });\n      }\n\n      this._eventbus = eventbus;\n\n      return this;\n   }\n\n   /**\n    * Set optional parameters. All parameters are off by default.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    */\n   setOptions(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof options !== 'object') { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.pluginsEnabled === 'boolean') { this._options.pluginsEnabled = options.pluginsEnabled; }\n      if (typeof options.noEventAdd === 'boolean') { this._options.noEventAdd = options.noEventAdd; }\n      if (typeof options.noEventDestroy === 'boolean') { this._options.noEventDestroy = options.noEventDestroy; }\n      if (typeof options.noEventOptions === 'boolean') { this._options.noEventOptions = options.noEventOptions; }\n      if (typeof options.noEventRemoval === 'boolean') { this._options.noEventRemoval = options.noEventRemoval; }\n      if (typeof options.throwNoMethod === 'boolean') { this._options.throwNoMethod = options.throwNoMethod; }\n      if (typeof options.throwNoPlugin === 'boolean') { this._options.throwNoPlugin = options.throwNoPlugin; }\n   }\n\n   /**\n    * Provides the eventbus callback which may prevent plugin manager options being set if optional `noEventOptions` is\n    * enabled. This disables the ability for the plugin manager options to be set via events preventing any external\n    * code modifying options.\n    *\n    * @param {PluginManagerOptions} options - Defines optional parameters to set.\n    *\n    * @private\n    */\n   _setOptionsEventbus(options = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (!this._options.noEventOptions) { this.setOptions(options); }\n   }\n\n   /**\n    * Sets the enabled state of a plugin, a list of plugins, or all plugins.\n    *\n    * @param {object}            options - Options object.\n    *\n    * @param {boolean}           options.enabled - The enabled state.\n    *\n    * @param {string|string[]}   [options.pluginNames] - Plugin name or list of names to set state.\n    */\n   setPluginsEnabled({ enabled, pluginNames = [] } = {})\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginNames !== 'string' && !Array.isArray(pluginNames))\n      {\n         throw new TypeError(`'pluginNames' is not a string or array.`);\n      }\n\n      if (typeof enabled !== 'boolean') { throw new TypeError(`'enabled' is not a boolean.`); }\n\n      const setEntryEnabled = (entry) =>\n      {\n         if (entry instanceof PluginEntry)\n         {\n            entry.enabled = enabled;\n\n            // Invoke `typhonjs:plugin:manager:plugin:enabled` allowing external code to react to plugin enabled state.\n            if (this._eventbus)\n            {\n               this._eventbus.trigger(`typhonjs:plugin:manager:plugin:enabled`, Object.assign({\n                  enabled\n               }, JSON.parse(JSON.stringify(entry.data))));\n            }\n         }\n      };\n\n      // Set enabled state for a single plugin if found.\n      if (typeof pluginNames === 'string')\n      {\n         setEntryEnabled(this._pluginMap.get(pluginNames));\n      }\n\n      // If there are plugin names specified then limit setting enabled state just them.\n      if (pluginNames.length)\n      {\n         for (const pluginName of pluginNames)\n         {\n            setEntryEnabled(this._pluginMap.get(pluginName));\n         }\n      }\n      else // Set all plugins enabled state.\n      {\n         for (const pluginEntry of this._pluginMap.values())\n         {\n            setEntryEnabled(pluginEntry);\n         }\n      }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Private implementation to invoke asynchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method asynchronously passes to and returns from any invoked targets a PluginEvent. Any invoked plugin\n * may return a Promise which is awaited upon by `Promise.all` before returning the PluginEvent data via a Promise.\n *\n * @param {string}                     methodName - Method name to invoke.\n *\n * @param {object}                     copyProps - plugin event object.\n *\n * @param {object}                     passthruProps - if true, event has plugin option.\n *\n * @param {string|string[]}            nameOrList - An optional plugin name or array / iterable of plugin names to\n *                                                  invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap - Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {Promise<PluginEvent>} A PluginEvent representing the invocation results.\n */\nconst s_INVOKE_ASYNC_EVENTS = async (methodName, copyProps = {}, passthruProps = {}, nameOrList, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n    typeof nameOrList[Symbol.iterator] !== 'function')\n   {\n      throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   const results = [];\n\n   if (typeof nameOrList === 'string')\n   {\n      const entry = pluginMap.get(nameOrList);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[methodName] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            const result = entry.instance[methodName](ev);\n\n            if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of nameOrList)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[methodName] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               const result = entry.instance[methodName](ev);\n\n               if (typeof result !== 'undefined' && result !== null) { results.push(result); }\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   await Promise.all(results);\n\n   return ev.data;\n};\n\n/**\n * Private implementation to invoke synchronous events. This allows internal calls in PluginManager for\n * `onPluginLoad` and `onPluginUnload` callbacks to bypass optional error checking.\n *\n * This dispatch method synchronously passes to and returns from any invoked targets a PluginEvent.\n *\n * @param {string}                     methodName - Method name to invoke.\n *\n * @param {object}                     copyProps - plugin event object.\n *\n * @param {object}                     passthruProps - if true, event has plugin option.\n *\n * @param {string|string[]}            nameOrList - An optional plugin name or array / iterable of plugin names to\n *                                                  invoke.\n *\n * @param {Map<string, PluginEvent>}   pluginMap - Stores the plugins by name with an associated PluginEntry.\n *\n * @param {object}                     options - Defines options for throwing exceptions. Turned off by default.\n *\n * @param {boolean}                    [performErrorCheck=true] - If false optional error checking is disabled.\n *\n * @returns {PluginEvent} A PluginEvent representing the invocation results.\n */\nconst s_INVOKE_SYNC_EVENTS = (methodName, copyProps = {}, passthruProps = {}, nameOrList, pluginMap, options,\n performErrorCheck = true) =>\n{\n   if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n   if (typeof passthruProps !== 'object') { throw new TypeError(`'passthruProps' is not an object.`); }\n   if (typeof copyProps !== 'object') { throw new TypeError(`'copyProps' is not an object.`); }\n\n   if (typeof nameOrList !== 'string' && !Array.isArray(nameOrList) &&\n    typeof nameOrList[Symbol.iterator] !== 'function')\n   {\n      throw new TypeError(`'nameOrList' is not a string, array, or iterator.`);\n   }\n\n   // Track how many plugins were invoked.\n   let pluginInvokeCount = 0;\n   const pluginInvokeNames = [];\n\n   // Track if a plugin method is invoked\n   let hasMethod = false;\n   let hasPlugin = false;\n\n   // Create plugin event.\n   const ev = new PluginEvent(copyProps, passthruProps);\n\n   if (typeof nameOrList === 'string')\n   {\n      const entry = pluginMap.get(nameOrList);\n\n      if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n      {\n         hasPlugin = true;\n\n         if (typeof entry.instance[methodName] === 'function')\n         {\n            ev.eventbus = entry.eventbusProxy;\n            ev.pluginName = entry.name;\n            ev.pluginOptions = entry.data.plugin.options;\n\n            entry.instance[methodName](ev);\n\n            hasMethod = true;\n            pluginInvokeCount++;\n            pluginInvokeNames.push(entry.name);\n         }\n      }\n   }\n   else\n   {\n      for (const name of nameOrList)\n      {\n         const entry = pluginMap.get(name);\n\n         if (entry instanceof PluginEntry && entry.enabled && entry.instance)\n         {\n            hasPlugin = true;\n\n            if (typeof entry.instance[methodName] === 'function')\n            {\n               ev.eventbus = entry.eventbusProxy;\n               ev.pluginName = entry.name;\n               ev.pluginOptions = entry.data.plugin.options;\n\n               entry.instance[methodName](ev);\n\n               hasMethod = true;\n               pluginInvokeCount++;\n               pluginInvokeNames.push(entry.name);\n            }\n         }\n      }\n   }\n\n   if (performErrorCheck && options.throwNoPlugin && !hasPlugin)\n   {\n      throw new Error(`PluginManager failed to find any target plugins.`);\n   }\n\n   if (performErrorCheck && options.throwNoMethod && !hasMethod)\n   {\n      throw new Error(`PluginManager failed to invoke '${methodName}'.`);\n   }\n\n   // Add meta data for plugin invoke count.\n   ev.data.$$plugin_invoke_count = pluginInvokeCount;\n   ev.data.$$plugin_invoke_names = pluginInvokeNames;\n\n   return ev.data;\n};\n\n/**\n * @typedef {object} PluginConfig\n *\n * @property {string}      name - Defines the name of the plugin; if no `target` entry is present the name\n *                                doubles as the target (please see target).\n *\n * @property {string|URL}  [target] - Defines the target Node module to load or defines a local file (full\n *                                    path or relative to current working directory to load. Target may also be a file\n *                                    URL / string or in the browser a web URL.\n *\n * @property {string}      [instance] - Defines an existing object instance to use as the plugin.\n *\n * @property {object}      [options] - Defines an object of options for the plugin.\n */\n\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n\n/**\n * @typedef {object} PluginManagerOptions\n *\n * @property {boolean}   [pluginsEnabled] - If false all plugins are disabled.\n *\n * @property {boolean}   [noEventAdd] - If true this prevents plugins from being added by `plugins:add` and\n *                                      `plugins:add:all` events forcing direct method invocation for addition.\n *\n * @property {boolean}   [noEventDestroy] - If true this prevents the plugin manager from being destroyed by\n *                                          `plugins:destroy:manager` forcing direct method invocation for destruction.\n *\n * @property {boolean}   [noEventOptions] - If true this prevents setting options for the plugin manager by\n *                                          `plugins:destroy:manager` forcing direct method invocation for destruction.\n *\n * @property {boolean}   [noEventRemoval] - If true this prevents plugins from being removed by `plugins:remove` and\n *                                          `plugins:remove:all` events forcing direct method invocation for removal.\n *\n * @property {boolean}   [throwNoMethod] - If true then when a method fails to be invoked by any plugin an exception\n *                                         will be thrown.\n *\n * @property {boolean}   [throwNoPlugin] - If true then when no plugin is matched to be invoked an exception will be\n *                                         thrown.\n */\n\n// TODO THIS NEEDS REFINEMENT\n/**\n * Interface for PluginSupport implementation classes.\n *\n * @interface PluginSupportImpl\n */\n\n/**\n * A method to invoke when the plugin manager is destroyed.\n *\n * @function\n * @async\n * @name PluginSupportImpl#destroy\n */\n\n/**\n * A method to invoke when the plugin manager eventbus is set.\n *\n * @function\n * @async\n * @name PluginSupportImpl#setEventbus\n */\n","import AbstractPluginManager from '../AbstractPluginManager.js';\n\nexport default class PluginManager extends AbstractPluginManager\n{\n   async _loadModule(moduleOrPath)\n   {\n      const module = await import(moduleOrPath);\n\n      // Please note that a plugin or other logger must be setup on the associated eventbus.\n      if (this._eventbus !== null && typeof this._eventbus !== 'undefined')\n      {\n         this._eventbus.trigger('log:debug', `@typhonjs-plugin/manager - import: ${moduleOrPath}`);\n      }\n\n      const type = `import-${moduleOrPath instanceof URL || \n       (typeof moduleOrPath === 'string' && moduleOrPath.startsWith('http')) ? 'url' : 'path'}`;\n\n      let instance;\n\n      // If the module has a named export for `onPluginLoad` then take the module.\n      if (typeof module.onPluginLoad === 'function')\n      {\n         instance = module;\n      }\n      // Then potentially resolve any default export / static class.\n      else if (module.default)\n      {\n         instance = module.default;\n      }\n      // Finally resolve as just the module.\n      else\n      {\n         instance = module;\n      }\n\n      return { instance, type };\n   }\n}\n","import Eventbus      from '@typhonjs-plugin/eventbus';\n\nimport PluginEntry   from './PluginEntry.js';\n\n/**\n * Provides a lightweight plugin manager for Node / NPM & the browser with eventbus integration for plugins in a safe\n * and protected manner across NPM modules, local files, and preloaded object instances. This pattern facilitates\n * message passing between modules versus direct dependencies / method invocation.\n *\n * It isn't necessary to use an eventbus associated with the plugin manager though invocation then relies on invoking\n * methods directly with the plugin manager instance.\n *\n * A default eventbus will be created, but you may also pass in an eventbus from `@typhonjs-plugin/eventbus` and the\n * plugin manager will register by default under these event categories:\n *\n * `plugins:get:all:plugin:data` - {@link AbstractPluginManager#getAllPluginData}\n *\n * `plugins:get:method:names` - {@link AbstractPluginManager#getMethodNames}\n *\n * `plugins:get:plugin:data` - {@link AbstractPluginManager#getPluginData}\n *\n * `plugins:get:plugin:event:names` - {@link AbstractPluginManager#getPluginEventNames}\n *\n * `plugins:get:plugin:method:names` - {@link AbstractPluginManager#getPluginMethodNames}\n *\n * `plugins:get:plugin:names` - {@link AbstractPluginManager#getPluginNames}\n *\n * `plugins:get:plugin:options` - {@link AbstractPluginManager#getPluginOptions}\n *\n * `plugins:get:plugins:by:event:name` - {@link AbstractPluginManager#getPluginsByEventName}\n *\n * `plugins:get:plugins:event:names` - {@link AbstractPluginManager#getPluginsEventNames}\n *\n * `plugins:has:method` - {@link AbstractPluginManager#hasMethod}\n *\n * `plugins:has:plugin:method` - {@link AbstractPluginManager#hasPluginMethod}\n *\n * @example\n *\n * @implements {PluginSupportImpl}\n */\nexport default class PluginSupport\n{\n   constructor(pluginManager)\n   {\n      this._pluginManager = pluginManager;\n   }\n\n   get isDestroyed()\n   {\n      return this._pluginManager === null || this._pluginManager === void 0 ||\n       this._pluginManager._pluginMap === null || this._pluginManager._pluginMap === void 0;\n   }\n\n   get pluginMap()\n   {\n      /* c8 ignore next 4 */\n      if (this.isDestroyed)\n      {\n         throw new ReferenceError('This PluginManager instance has been destroyed.');\n      }\n\n      return this._pluginManager._pluginMap;\n   }\n\n   /**\n    * Destroys all managed plugins after unloading them.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.eventbus - The eventbus to disassociate.\n    *\n    * @param {string}     options.eventPrepend - The current event prepend.\n    */\n   async destroy({ eventbus, eventPrepend } = {})\n   {\n      if (eventbus !== null && eventbus !== void 0)\n      {\n         eventbus.off(`${eventPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         eventbus.off(`${eventPrepend}:get:method:names`, this.getMethodNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:data`, this.getPluginData, this);\n         eventbus.off(`${eventPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:names`, this.getPluginNames, this);\n         eventbus.off(`${eventPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         eventbus.off(`${eventPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         eventbus.off(`${eventPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         eventbus.off(`${eventPrepend}:has:method`, this.hasMethod, this);\n         eventbus.off(`${eventPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      this._pluginManager = null;\n   }\n\n   /**\n    * Returns all plugin data or if a boolean is passed in will return plugin data by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {PluginData[]} A list of all PluginData or just enabled / disabled plugins.\n    */\n   getAllPluginData(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = [];\n\n      // Return all plugin data if enabled is not defined.\n      const allPlugins = enabled === void 0;\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (allPlugins || entry.enabled === enabled)\n         {\n            results.push(this.getPluginData(entry.name));\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all method names or if a boolean is passed in will return method names for plugins by current enabled\n    * state.\n    *\n    * @param {boolean|undefined} [enabled] - If enabled is a boolean it will return plugin methods names given their\n    *                                        enabled state.\n    *\n    * @param {string|undefined}  [pluginName] - If a string then just this plugins methods names are returned.\n    *\n    * @returns {string[]} A list of method names\n    */\n   getMethodNames(enabled = void 0, pluginName = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = {};\n      const allEnabled = typeof enabled === 'undefined';\n      const allNames = typeof pluginName === 'undefined';\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.instance && (allEnabled || entry.enabled === enabled) && (allNames || entry.name === pluginName))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor') { results[name] = true; }\n            }\n         }\n      }\n\n      return Object.keys(results);\n   }\n\n   /**\n    * Gets the plugin data for a plugin by name.\n    *\n    * @param {string}   pluginName - A plugin name.\n    *\n    * @returns {PluginData|undefined} The plugin data for a specific plugin.\n    */\n   getPluginData(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      const entry = this.pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry)\n      {\n         return JSON.parse(JSON.stringify(entry.data));\n      }\n\n      return void 0;\n   }\n\n// TODO FINISH IMPLEMENTING\n   // /**\n   //  * Returns the event binding names registered on any associated plugin EventbusProxy.\n   //  *\n   //  * @param {string}   pluginName - Plugin name to set state.\n   //  *\n   //  * @returns {string[]} - Event binding names registered from the plugin.\n   //  *\n   //  * @param {undefined|object}  [options] - Options object. If undefined all plugin enabled state is returned.\n   //  *\n   //  * @param {string|string[]}   [options.pluginNames] - Plugin name or list of names to get state.\n   //  *\n   //  * @returns {boolean|Array<{pluginName: string, enabled: boolean}>} - Event binding names registered from a\n   //  *                                                                    plugin, list of plugins, or all plugins.\n   //  */\n   // newPluginEventNames({ pluginNames = [] } = {})\n   // {\n   //    if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n   //\n   //    if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n   //\n   //    const entry = this.pluginMap.get(pluginName);\n   //\n   //    return entry instanceof PluginEntry && entry.eventbusProxy ? entry.eventbusProxy.proxyEventNames : [];\n   // }\n\n   /**\n    * Returns the event binding names registered on any associated plugin EventbusProxy.\n    *\n    * @param {string}   pluginName - Plugin name to set state.\n    *\n    * @returns {string[]} - Event binding names registered from the plugin.\n    */\n   getPluginEventNames(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      const entry = this.pluginMap.get(pluginName);\n\n      return entry instanceof PluginEntry && entry.eventbusProxy ? entry.eventbusProxy.proxyEventNames : [];\n   }\n\n   /**\n    * Returns the event binding names registered from each plugin.\n    *\n    * @param {string|string[]} [nameOrList] - An array / iterable of plugin names.\n    *\n    * @returns {Array<{pluginName: string, events: string[]}>} A list of objects with plugin name and event binding\n    *                                                          names registered from the plugin.\n    */\n   getPluginsEventNames(nameOrList)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof nameOrList === 'undefined') { nameOrList = this.pluginMap.keys(); }\n      if (typeof nameOrList === 'string') { nameOrList = [nameOrList]; }\n\n      const results = [];\n\n      for (const pluginName of nameOrList)\n      {\n         results.push({ pluginName, events: this.getPluginEventNames(pluginName) });\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns the plugin names that registered the given event binding name.\n    *\n    * @param {string} eventName - An event name that plugins may have registered.\n    *\n    * @returns {string[]} A list of plugin names that has registered the given event name.\n    */\n   getPluginsByEventName(eventName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof eventName !== 'string') { throw new TypeError(`'eventName' is not a 'string'.`); }\n\n      const results = [];\n\n      const pluginEventNames = this.getPluginsEventNames();\n\n      for (const entry of pluginEventNames)\n      {\n         if (entry.events.indexOf(eventName) >= 0) { results.push(entry.pluginName); }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all plugin names or if a boolean is passed in will return plugin names by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {Array<{plugin: string, method: string}>} A list of plugin names and method names.\n    */\n   getPluginMethodNames(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      const results = [];\n      const allPlugins = typeof enabled === 'undefined';\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.instance && (allPlugins || entry.enabled === enabled))\n         {\n            for (const name of s_GET_ALL_PROPERTY_NAMES(entry.instance))\n            {\n               // Skip any names that are not a function or are the constructor.\n               if (entry.instance[name] instanceof Function && name !== 'constructor')\n               {\n                  results.push({ plugin: entry.name, method: name });\n               }\n            }\n         }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns all plugin names or if a boolean is passed in will return plugin names by current enabled state.\n    *\n    * @param {boolean|undefined} enabled - If enabled is a boolean it will return plugins given their enabled state.\n    *\n    * @returns {string[]} A list of plugin names optionally by enabled state.\n    */\n   getPluginNames(enabled = void 0)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof enabled !== 'boolean' && typeof enabled !== 'undefined')\n      {\n         throw new TypeError(`'enabled' is not a 'boolean' or 'undefined'.`);\n      }\n\n      // Return all plugin names if enabled is not defined.\n      if (enabled === void 0) { return Array.from(this.pluginMap.keys()); }\n\n      const results = [];\n\n      for (const entry of this.pluginMap.values())\n      {\n         if (entry.enabled === enabled) { results.push(entry.name); }\n      }\n\n      return results;\n   }\n\n   /**\n    * Returns a copy of the given plugin options.\n    *\n    * @param {string}   pluginName - Plugin name to retrieve.\n    *\n    * @returns {*} A copy of the given plugin options.\n    */\n   getPluginOptions(pluginName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n\n      let result;\n\n      const entry = this.pluginMap.get(pluginName);\n\n      if (entry instanceof PluginEntry) { result = JSON.parse(JSON.stringify(entry.data.plugin.options)); }\n\n      return result;\n   }\n\n   /**\n    * Returns true if there is at least one plugin loaded with the given method name.\n    *\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True method is found.\n    */\n   hasMethod(methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      for (const plugin of this.pluginMap.values())\n      {\n         if (typeof plugin.instance[methodName] === 'function') { return true; }\n      }\n\n      return false;\n   }\n\n   /**\n    * Returns true if there is a plugin loaded with the given plugin name that also has a method with the given\n    * method name.\n    *\n    * @param {string}   pluginName - Plugin name to test.\n    * @param {string}   methodName - Method name to test.\n    *\n    * @returns {boolean} - True if a plugin and method exists.\n    */\n   hasPluginMethod(pluginName, methodName)\n   {\n      if (this.isDestroyed) { throw new ReferenceError('This PluginManager instance has been destroyed.'); }\n\n      if (typeof pluginName !== 'string') { throw new TypeError(`'pluginName' is not a string.`); }\n      if (typeof methodName !== 'string') { throw new TypeError(`'methodName' is not a string.`); }\n\n      const plugin = this.pluginMap.get(pluginName);\n\n      return plugin instanceof PluginEntry && typeof plugin[methodName] === 'function';\n   }\n\n   /**\n    * Sets the eventbus associated with this plugin manager. If any previous eventbus was associated all plugin manager\n    * events will be removed then added to the new eventbus. If there are any existing plugins being managed their\n    * events will be removed from the old eventbus and then `onPluginLoad` will be called with the new eventbus.\n    *\n    * @param {object}     options - An options object.\n    *\n    * @param {Eventbus}   options.oldEventbus - The old eventbus to disassociate.\n    *\n    * @param {Eventbus}   options.newEventbus - The new eventbus to associate.\n    *\n    * @param {string}     options.oldPrepend - The old event prepend.\n    *\n    * @param {string}     options.newPrepend - The new event prepend.\n    */\n   async setEventbus({ oldEventbus, newEventbus, oldPrepend, newPrepend } = {})\n   {\n      if (oldEventbus !== null && oldEventbus !== void 0)\n      {\n         oldEventbus.off(`${oldPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         oldEventbus.off(`${oldPrepend}:get:method:names`, this.getMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:data`, this.getPluginData, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:names`, this.getPluginNames, this);\n         oldEventbus.off(`${oldPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         oldEventbus.off(`${oldPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         oldEventbus.off(`${oldPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         oldEventbus.off(`${oldPrepend}:has:method`, this.hasMethod, this);\n         oldEventbus.off(`${oldPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n\n      if (newEventbus !== null && newEventbus !== void 0)\n      {\n         newEventbus.on(`${newPrepend}:get:all:plugin:data`, this.getAllPluginData, this);\n         newEventbus.on(`${newPrepend}:get:method:names`, this.getMethodNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:data`, this.getPluginData, this);\n         newEventbus.on(`${newPrepend}:get:plugin:event:names`, this.getPluginEventNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:method:names`, this.getPluginMethodNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:names`, this.getPluginNames, this);\n         newEventbus.on(`${newPrepend}:get:plugin:options`, this.getPluginOptions, this);\n         newEventbus.on(`${newPrepend}:get:plugins:by:event:name`, this.getPluginsByEventName, this);\n         newEventbus.on(`${newPrepend}:get:plugins:event:names`, this.getPluginsEventNames, this);\n         newEventbus.on(`${newPrepend}:has:method`, this.hasMethod, this);\n         newEventbus.on(`${newPrepend}:has:plugin:method`, this.hasPluginMethod, this);\n      }\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * Walks an objects inheritance tree collecting property names stopping before `Object` is reached.\n *\n * @param {object}   obj - object to walks.\n *\n * @returns {string[]} A list of property names.\n * @ignore\n */\nconst s_GET_ALL_PROPERTY_NAMES = (obj) =>\n{\n   const props = [];\n\n   do\n   {\n      Object.getOwnPropertyNames(obj).forEach((prop) => { if (props.indexOf(prop) === -1) { props.push(prop); } });\n      obj = Object.getPrototypeOf(obj);\n   } while (typeof obj !== 'undefined' && obj !== null && !(obj === Object.prototype));\n\n   return props;\n};\n\n/**\n * @typedef {object} PluginData\n *\n * @property {object}   manager - Data about the plugin manager\n *\n * @property {string}   manager.eventPrepend - The plugin manager event prepend string.\n *\n * @property {object}   module - Optional object hash to associate with plugin.\n *\n * @property {object}   plugin - Data about the plugin.\n *\n * @property {string}   plugin.name - The name of the plugin.\n *\n * @property {string}   plugin.scopedName - The name of the plugin with the plugin managers event prepend string.\n *\n * @property {string}   plugin.target - Defines the target NPM module to loaded or defines a local file (full\n *                               path or relative to current working directory to load.\n *\n * @property {string}   plugin.targetEscaped - Provides the target, but properly escaped for RegExp usage.\n *\n * @property {string}   plugin.type - The type of plugin: `instance` +\n *                                    In Node: `import-module`, `import-path`, `require-module`, or `require-path`.\n *                                    In Browser: `import-path`, `import-url`.\n *\n * @property {object}   plugin.options - Defines an object of options for the plugin.\n */\n\n/**\n * Interface for PluginSupport instances.\n *\n * @interface PluginSupportImpl\n */\n\n/**\n * A method to invoke when the plugin manager is destroyed.\n *\n * @function\n * @async\n * @name PluginSupportImpl#destroy\n */\n\n/**\n * A method to invoke when the plugin manager eventbus is set.\n *\n * @function\n * @async\n * @name PluginSupportImpl#setEventbus\n */\n"],"names":["EventbusProxy","constructor","eventbus","Eventbus","TypeError","_eventbus","_events","destroy","event","off","name","callback","context","entries","eventName","ReferenceError","entry","eventCount","eventNames","isDestroyed","hasName","hasCallback","hasContext","values","cntr","length","foundMatch","key","splice","on","push","proxyEntries","proxyEventCount","proxyEventNames","Object","keys","trigger","arguments","triggerAsync","triggerDefer","triggerSync","eventbusName","_eventbusName","createProxy","ctx","count","listenTo","obj","id","_listenId","s_UNIQUE_ID","listeningTo","_listeningTo","listening","thisId","objId","s_INTERNAL_ON","listenToOnce","events","s_EVENTS_API","s_ONCE_MAP","stopListening","bind","s_OFF_API","listeners","_listeners","once","ids","i","Math","max","args","Array","s_EVENTS_TARGET_API","s_TRIGGER_API","s_TRIGGER_EVENTS","Promise","resolve","promise","s_TRIGGER_ASYNC_EVENTS","setTimeout","start","s_TRIGGER_SYNC_EVENTS","s_EVENT_SPLITTER","iteratee","opts","names","test","split","iterateeTarget","s_ON_API","options","handlers","remaining","j","handler","_callback","map","offer","apply","objEvents","cb","result","allEvents","all","slice","concat","ev","a1","a2","a3","l","call","results","error","reject","then","filtered","filter","idCounter","prefix","deepFreeze","data","skipFreezeKeys","isArray","_deepFreeze","isIterable","object","Symbol","iterator","hasOwnProperty","indexOf","freeze","PluginEntry","instance","eventbusProxy","_data","_enabled","_name","_instance","_eventbusProxy","escape","value","escaped","replace","enabled","PluginEvent","copyProps","passthruProps","assign","JSON","parse","stringify","pluginName","pluginOptions","isValidConfig","pluginConfig","target","URL","AbstractPluginManager","PluginSupport","_pluginMap","Map","_eventbusProxies","_pluginSupport","_options","pluginsEnabled","noEventAdd","noEventDestroy","noEventOptions","noEventRemoval","throwNoMethod","throwNoPlugin","setEventbus","eventPrepend","setOptions","add","moduleData","has","Error","type","_loadModule","toString","pluginData","manager","_eventPrepend","module","plugin","scopedName","targetEscaped","set","s_INVOKE_ASYNC_EVENTS","addAll","pluginConfigs","pluginsData","_addEventbus","_addAllEventbus","createEventbusProxy","removeAll","_destroyEventbus","invokeAsync","invokeAsyncEvent","_removeEventbus","_removeAllEventbus","getPluginsEnabled","getOptions","hasPlugin","invoke","setPluginsEnabled","_setOptionsEventbus","invokeSync","invokeSyncEvent","getEventbus","pluginNames","get","loaded","methodName","nameOrList","hasMethod","s_INVOKE_SYNC_EVENTS","moduleOrPath","remove","err","delete","clear","oldPrepend","size","oldEventbus","oldManagerEventPrepend","oldScopedName","newEventbus","newManagerEventPrepend","newScopedName","oldEventPrepend","newEventPrepend","newPrepend","setEntryEnabled","pluginEntry","pluginMap","performErrorCheck","pluginInvokeCount","pluginInvokeNames","$$plugin_invoke_count","$$plugin_invoke_names","PluginManager","startsWith","onPluginLoad","default","pluginManager","_pluginManager","getAllPluginData","getMethodNames","getPluginData","getPluginEventNames","getPluginMethodNames","getPluginNames","getPluginOptions","getPluginsByEventName","getPluginsEventNames","hasPluginMethod","allPlugins","allEnabled","allNames","s_GET_ALL_PROPERTY_NAMES","Function","pluginEventNames","method","from","props","getOwnPropertyNames","forEach","prop","getPrototypeOf","prototype"],"mappings":"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"}